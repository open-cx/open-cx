/**
 * Record Error
 * @memberof ValidationError
 */
export declare type RecordError = {
    /**
     * error type (i.e. required)
     */
    type: string;
    /**
     * human readible message
     */
    message: string;
};
/**
 * Property Errors
 * @memberof ValidationError
 */
export declare type PropertyErrors = {
    [key: string]: RecordError;
};
/**
 * Error which is thrown when there are validation errors with records
 * @category Errors
 */
declare class ValidationError extends Error {
    /**
     * Validation errors for all properties
     */
    propertyErrors: PropertyErrors;
    /**
     * One root validatin error i.e. thrown when user wants to perform
     * an action which violates foreign key constraint
     */
    baseError: RecordError | null;
    /**
     * @param {string} message   custom message
     * @param {PropertyErrors} propertyErrors     error messages
     * @param {RecordError} [baseError]           base error
     */
    constructor(message: string, propertyErrors: PropertyErrors, baseError?: RecordError);
}
export default ValidationError;
