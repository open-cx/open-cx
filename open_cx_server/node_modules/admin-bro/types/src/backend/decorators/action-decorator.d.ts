import AdminBro from '../../admin-bro';
import BaseResource from '../adapters/base-resource';
import Action, { ActionContext, ActionRequest, ActionResponse } from '../actions/action.interface';
import { CurrentAdmin } from '../../current-admin.interface';
import ActionJSON from './action-json.interface';
import BaseRecord from '../adapters/base-record';
/**
 * Decorates an action
 *
 * @category Decorators
 */
declare class ActionDecorator {
    name: string;
    private _admin;
    private _resource;
    private h;
    private action;
    /**
     * @param {Object}        params
     * @param {Action}        params.action
     * @param {BaseResource}  params.resource
     * @param {AdminBro}      params.admin  current instance of AdminBro
     */
    constructor({ action, admin, resource }: {
        action: Action<ActionResponse>;
        admin: AdminBro;
        resource: BaseResource;
    });
    /**
     * Original handler wrapped with the hook `before` and `after` methods.
     *
     * @param {ActionRequest} request
     * @param {any} response
     * @param {ActionContext} data
     *
     * @return {Promise<any>}
     */
    handler(request: ActionRequest, response: any, data: ActionContext): Promise<any>;
    /**
     * Returns true when action can be performed on a record
     *
     * @return  {Boolean}
     */
    isRecordType(): boolean;
    /**
     * Returns true when action can be performed on an entire resource
     *
     * @return  {Boolean}
     */
    isResourceType(): boolean;
    is(what: 'isAccessible' | 'isVisible', currentAdmin?: CurrentAdmin, record?: BaseRecord): boolean;
    /**
     * Is action visible in the UI
     * @param {CurrentAdmin} [currentAdmin]   currently logged in admin user
     * @param {BaseRecord} [record]
     *
     * @return  {Boolean}
     */
    isVisible(currentAdmin?: CurrentAdmin, record?: BaseRecord): boolean;
    /**
     * Is action accessible
     *
     * @param {CurrentAdmin} [currentAdmin]   currently logged in admin user
     * @param {BaseRecord} [record]
     * @return  {Boolean}
     */
    isAccessible(currentAdmin?: CurrentAdmin, record?: BaseRecord): boolean;
    /**
     * Serializes action to JSON format
     *
     * @return  {ActionJSON}  serialized action
     */
    toJSON(): ActionJSON;
}
export default ActionDecorator;
