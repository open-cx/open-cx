import PropertyDecorator from './property-decorator';
import ActionDecorator from './action-decorator';
import BaseResource from '../adapters/base-resource';
import AdminBro from '../../admin-bro';
import { ResourceOptions } from './resource-options.interface';
import { CurrentAdmin } from '../../current-admin.interface';
import ResourceJSON from './resource-json.interface';
import { PropertyPlace } from './property-json.interface';
import BaseRecord from '../adapters/base-record';
/**
 * Default maximum number of items which should be present in a list.
 *
 * @type {Number}
 * @private
 */
export declare const DEFAULT_MAX_COLUMNS_IN_LIST = 8;
/**
 * Base decorator class which decorates the Resource.
 *
 * @category Decorators
 */
declare class ResourceDecorator {
    properties: {
        [key: string]: PropertyDecorator;
    };
    options: ResourceOptions;
    actions: {
        [key: string]: ActionDecorator;
    };
    private _resource;
    private _admin;
    private h;
    /**
     * @param  {object}       options
     * @param  {BaseResource} options.resource  resource which is decorated
     * @param  {AdminBro}     options.admin  current instance of AdminBro
     * @param  {ResourceOptions} [options.options]
     */
    constructor({ resource, admin, options }: {
        resource: BaseResource;
        admin: AdminBro;
        options: ResourceOptions;
    });
    /**
     * Used to create an {@link ActionDecorator} based on both
     * {@link AdminBro.ACTIONS default actions} and actions specified by the user
     * via {@link AdminBroOptions}
     *
     * @returns {Record<string, ActionDecorator>}
     */
    decorateActions(): {
        [key: string]: ActionDecorator;
    };
    /**
     * Initializes PropertyDecorator for all properties within a resource. When
     * user passess new property in the options - it will be created as well.
     *
     * @returns {Object<string,PropertyDecorator>}
     * @private
     */
    decorateProperties(): {
        [key: string]: PropertyDecorator;
    };
    /**
     * Returns the name for the resource.
     * @return {string} resource name
     */
    getResourceName(): string;
    /**
     * Returns resource parent along with the icon. By default it is a
     * database type with its icon
     * @return {Record<string,string>} returns { name, icon }
     */
    getParent(): {
        name: string;
        icon: string;
    };
    /**
     * Returns propertyDecordator by giving property path
     *
     * @param   {String}  propertyPath  property path
     *
     * @return  {PropertyDecorator}
     * @throws  {ConfigurationError} when there is no property for given key
     */
    getPropertyByKey(propertyPath: string): PropertyDecorator;
    /**
     * Returns list of all properties which will be visible in given place (where)
     *
     * @param   {Object}  options
     * @param   {String}  options.where   one of: 'list', 'show', 'edit', 'filter'
     * @param   {String}  [options.max]   maximum number of properites retunred where there are
     *                                    no overrides in the options
     *
     * @return {Array<PropertyDecorator>}
     */
    getProperties({ where, max }: {
        where: PropertyPlace;
        max?: number;
    }): Array<PropertyDecorator>;
    getListProperties(): Array<PropertyDecorator>;
    /**
     * List of all actions which should be invoked for entire resource and not
     * for a particular record
     *
     * @param {CurrentAdmin} currentAdmin   currently logged in admin user
     * @return  {Array<ActionDecorator>}     Actions assigned to resources
     */
    resourceActions(currentAdmin?: CurrentAdmin): Array<ActionDecorator>;
    /**
     * List of all actions which should be invoked for given record and not
     * for an entire resource
     *
     * @param {CurrentAdmin} [currentAdmin]   currently logged in admin user
     * @return  {Array<ActionDecorator>}     Actions assigned to each record
     */
    recordActions(record: BaseRecord, currentAdmin?: CurrentAdmin): Array<ActionDecorator>;
    /**
     * Returns PropertyDecorator of a property which should be treaten as a title property.
     *
     * @return  {PropertyDecorator} PropertyDecorator of title property
     */
    titleProperty(): PropertyDecorator;
    /**
     * Returns title for given record.
     *
     * For example: If given record has `name` property and this property has `isTitle` flag set in
     * options or by the Adapter - value for this property will be shown
     *
     * @param   {BaseRecord}  record
     *
     * @return  {String}      title of given record
     */
    titleOf(record: BaseRecord): string;
    /**
     * Returns JSON representation of a resource
     *
     * @param {CurrentAdmin} currentAdmin
     * @return  {ResourceJSON}
     */
    toJSON(currentAdmin?: CurrentAdmin): ResourceJSON;
}
export default ResourceDecorator;
