import { AxiosResponse } from 'axios';
import RecordJSON from '../../backend/decorators/record-json.interface';
import { RecordActionResponse, ActionResponse } from '../../backend/actions/action.interface';
/**
 * Client which access the admin API.
 * Use it to fetch data from auto generated AdminBro API.
 *
 * In the backend it uses [axios](https://github.com/axios/axios) client
 * library.
 *
 * Usage:
 * ```javascript
 * import { ApiClient } from 'admin-bro'
 *
 * const api = new ApiClient()
 * api.getRecords({ resourceId: 'Comments' }).then(results => {...})
 * ```
 * @see https://github.com/axios/axios
 */
declare class ApiClient {
    private baseURL;
    private client;
    constructor();
    /**
     * Search by query string for records in a given resource.
     *
     * @param   {Object}  options
     * @param   {String}  options.resourceId  Id of a {@link ResourceJSON}
     * @param   {String}  options.query       query string
     *
     * @return  {Promise<Array<SearchRecord>>}
     */
    searchRecords({ resourceId, query }: {
        resourceId: string;
        query: string;
    }): Promise<Array<RecordJSON>>;
    /**
     * Invokes given resource {@link Action} on the backend.
     *
     * @param   {Object} options
     * @param   {String} options.resourceId  id of a {@link BaseResource}
     * @param   {String} options.actionName  name of an {@link Action}
     * @param   {Object} [options.payload]   optional action payload
     * @param   {Object} [options.params]    optional query params
     * @param   {Object} [options.headers]   optional request headers
     * @param   {String} [options.method]    if there is a Payload it sends
     *                                       POST request, otherwise GET.
     * @return  {Promise<Object>}            response from an {@link Action}
     */
    resourceAction({ resourceId, actionName, payload, method, params, headers }: {
        resourceId: string;
        actionName: string;
        payload?: {
            [key: string]: any;
        };
        method?: 'POST' | 'GET';
        params?: {
            [key: string]: any;
        };
        headers?: {
            [key: string]: any;
        };
    }): Promise<AxiosResponse<ActionResponse>>;
    /**
     * Invokes given record {@link Action} on the backend.
     *
     * @param   {Object} options
     * @param   {String} options.resourceId  id of a {@link BaseResource}
     * @param   {String} options.recordId    id of a {@link BaseRecord}
     * @param   {String} options.actionName  name of an {@link Action}
     * @param   {Object} [options.payload]   optional action payload
     * @param   {Object} [options.params]    optional query params
     * @param   {Object} [options.headers]   optional request headers
     * @param   {String} [options.method]    if there is a Payload it sends
     *                                       POST request, otherwise GET.
     * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
     */
    recordAction({ resourceId, recordId, actionName, payload, method, params, headers }: {
        recordId: string;
        resourceId: string;
        actionName: string;
        payload?: {
            [key: string]: any;
        };
        method?: 'POST' | 'GET';
        params?: {
            [key: string]: any;
        };
        headers?: {
            [key: string]: any;
        };
    }): Promise<AxiosResponse<RecordActionResponse>>;
    getDashboard({ params }?: {
        params?: any;
    }): Promise<any>;
}
export default ApiClient;
