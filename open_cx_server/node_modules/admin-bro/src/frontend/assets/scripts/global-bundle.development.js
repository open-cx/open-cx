var globals = (function (exports) {
	'use strict';

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var react_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var _assign = objectAssign;
	var checkPropTypes = checkPropTypes_1;

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.12.0';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?


	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	// Do not require this module directly! Use normal `invariant` calls with
	// template literal strings. The messages will be replaced with error codes
	// during build.

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var lowPriorityWarningWithoutStack = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });

	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarningWithoutStack = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(void 0, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }

	    if (condition) {
	      return;
	    }

	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610

	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
	    {
	      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
	    }
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	_assign(pureComponentPrototype, Component.prototype);

	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  suspense: null
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	var Resolved = 1;

	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = {};
	var currentlyValidatingElement = null;
	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	/**
	 * Used by act() to track whether you're inside an act() scope.
	 */
	var IsSomeRendererActing = {
	  current: false
	};

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner,
	  IsSomeRendererActing: IsSomeRendererActing,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }

	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://reactjs.org/docs/react-api.html#createfactory
	 */


	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (!!(element === null || element === undefined)) {
	    {
	      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
	    }
	  }

	  var propName; // Original props are copied

	  var props = _assign({}, element.props); // Reserved names are extracted


	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];

	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;

	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {
	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';

	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }

	      var childrenString = '' + children;

	      {
	        {
	          throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	  func.call(context, child, bookKeeping.count++);
	}
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */


	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	  var mappedChild = func.call(context, child, bookKeeping.count++);

	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }

	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';

	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }

	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */


	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    {
	      throw Error("React.Children.only expected to receive a single React element child.");
	    }
	  }

	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;
	            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;
	            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes;
	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	          defaultProps = newDefaultProps; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	          propTypes = newPropTypes; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
	      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
	    }

	    if (render != null) {
	      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  if (!(dispatcher !== null)) {
	    {
	      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
	    }
	  }

	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();

	  {
	    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context, unstable_observedBits);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, inputs);
	}
	function useLayoutEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, inputs);
	}
	function useCallback(callback, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, inputs);
	}
	function useMemo(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, inputs);
	}
	function useImperativeHandle(ref, create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, inputs);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
	  }

	  setCurrentlyValidatingElement(element);

	  {
	    warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }

	  setCurrentlyValidatingElement(null);
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  var type = element.type;

	  if (type === null || type === undefined || typeof type === 'string') {
	    return;
	  }

	  var name = getComponentName(type);
	  var propTypes;

	  if (typeof type === 'function') {
	    propTypes = type.propTypes;
	  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	  // Inner props are checked in the reconciler.
	  type.$$typeof === REACT_MEMO_TYPE)) {
	    propTypes = type.propTypes;
	  } else {
	    return;
	  }

	  if (propTypes) {
	    setCurrentlyValidatingElement(element);
	    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	    setCurrentlyValidatingElement(null);
	  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	    propTypesMisspellWarningShown = true;
	    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	  }

	  if (typeof type.getDefaultProps === 'function') {
	    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  setCurrentlyValidatingElement(fragment);
	  var keys = Object.keys(fragment.props);

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];

	    if (key !== 'children' && key !== 'key') {
	      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	      break;
	    }
	  }

	  if (fragment.ref !== null) {
	    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
	  }

	  setCurrentlyValidatingElement(null);
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type; // Legacy hook: remove it

	  {
	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	{

	  try {
	    var frozenObject = Object.freeze({});
	    var testMap = new Map([[frozenObject, null]]);
	    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	  }
	}
	// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

	 // For tests, we flush suspense fallbacks in an act scope;
	// *except* in some of our own tests, where we test incremental loading states.

	 // Add a callback property to suspense to notify which promises are currently
	// in the update queue. This allows reporting and tracing of what is causing
	// the user to see a loading state.
	// Also allows hydration callbacks to fire when a dehydrated boundary gets
	// hydrated or deleted.

	 // Part of the simplification of React.createElement so we can eventually move
	// from React.createElement to React.jsx
	// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md





	 // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

	var React = {
	  Children: {
	    map: mapChildren,
	    forEach: forEachChildren,
	    count: countChildren,
	    toArray: toArray,
	    only: onlyChild
	  },
	  createRef: createRef,
	  Component: Component,
	  PureComponent: PureComponent,
	  createContext: createContext,
	  forwardRef: forwardRef,
	  lazy: lazy,
	  memo: memo,
	  useCallback: useCallback,
	  useContext: useContext,
	  useEffect: useEffect,
	  useImperativeHandle: useImperativeHandle,
	  useDebugValue: useDebugValue,
	  useLayoutEffect: useLayoutEffect,
	  useMemo: useMemo,
	  useReducer: useReducer,
	  useRef: useRef,
	  useState: useState,
	  Fragment: REACT_FRAGMENT_TYPE,
	  Profiler: REACT_PROFILER_TYPE,
	  StrictMode: REACT_STRICT_MODE_TYPE,
	  Suspense: REACT_SUSPENSE_TYPE,
	  createElement: createElementWithValidation,
	  cloneElement: cloneElementWithValidation,
	  createFactory: createFactoryWithValidation,
	  isValidElement: isValidElement,
	  version: ReactVersion,
	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
	};



	var React$2 = Object.freeze({
		default: React
	});

	var React$3 = ( React$2 && React ) || React$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.


	var react = React$3.default || React$3;

	module.exports = react;
	  })();
	}
	});

	var react = createCommonjsModule(function (module) {

	{
	  module.exports = react_development;
	}
	});
	var react_1 = react.Children;
	var react_2 = react.createRef;
	var react_3 = react.Component;
	var react_4 = react.PureComponent;
	var react_5 = react.createContext;
	var react_6 = react.forwardRef;
	var react_7 = react.lazy;
	var react_8 = react.memo;
	var react_9 = react.useCallback;
	var react_10 = react.useContext;
	var react_11 = react.useEffect;
	var react_12 = react.useImperativeHandle;
	var react_13 = react.useDebugValue;
	var react_14 = react.useLayoutEffect;
	var react_15 = react.useMemo;
	var react_16 = react.useReducer;
	var react_17 = react.useRef;
	var react_18 = react.useState;
	var react_19 = react.Fragment;
	var react_20 = react.Profiler;
	var react_21 = react.StrictMode;
	var react_22 = react.Suspense;
	var react_23 = react.createElement;
	var react_24 = react.cloneElement;
	var react_25 = react.createFactory;
	var react_26 = react.isValidElement;
	var react_27 = react.version;
	var react_28 = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;

		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	var root;

	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global$1 !== 'undefined') {
	  root = global$1;
	} else if (typeof module !== 'undefined') {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = symbolObservablePonyfill(root);

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};

	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;

	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }

	  return Object.getPrototypeOf(obj) === proto;
	}

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */

	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
	  }

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	  /**
	   * This makes a shallow copy of currentListeners so we can use
	   * nextListeners as a temporary list while dispatching.
	   *
	   * This prevents any bugs around consumers calling
	   * subscribe/unsubscribe in the middle of a dispatch.
	   */

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */


	  function getState() {
	    if (isDispatching) {
	      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }

	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */


	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected the listener to be a function.');
	    }

	    if (isDispatching) {
	      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	    }

	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      if (isDispatching) {
	        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	      }

	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */


	  function dispatch(action) {
	    if (!isPlainObject(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;

	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */


	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
	    // Any reducers that existed in both the new and old rootReducer
	    // will receive the previous state. This effectively populates
	    // the new state tree with any relevant data from the old one.

	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */


	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[result] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.


	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[result] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty

	}

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
	  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!isPlainObject(inputState)) {
	    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	  if (action && action.type === ActionTypes.REPLACE) return;

	  if (unexpectedKeys.length > 0) {
	    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, {
	      type: ActionTypes.INIT
	    });

	    if (typeof initialState === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
	    }

	    if (typeof reducer(undefined, {
	      type: ActionTypes.PROBE_UNKNOWN_ACTION()
	    }) === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
	    }
	  });
	}
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */


	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};

	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    {
	      if (typeof reducers[key] === 'undefined') {
	        warning("No reducer provided for key \"" + key + "\"");
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }

	  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
	  // keys multiple times.

	  var unexpectedKeyCache;

	  {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError;

	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination(state, action) {
	    if (state === void 0) {
	      state = {};
	    }

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

	      if (warningMessage) {
	        warning(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};

	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);

	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }

	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }

	    return hasChanged ? nextState : state;
	  };
	}

	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(this, arguments));
	  };
	}
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass an action creator as the first argument,
	 * and get a dispatch wrapped function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */


	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
	  }

	  var boundActionCreators = {};

	  for (var key in actionCreators) {
	    var actionCreator = actionCreators[key];

	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }

	  return boundActionCreators;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
	  }

	  if (enumerableOnly) keys = keys.filter(function (sym) {
	    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	  });
	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(source, true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(source).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(void 0, arguments));
	    };
	  });
	}

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */

	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function () {
	      var store = createStore.apply(void 0, arguments);

	      var _dispatch = function dispatch() {
	        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
	      };

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch() {
	          return _dispatch.apply(void 0, arguments);
	        }
	      };
	      var chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(void 0, chain)(store.dispatch);
	      return _objectSpread2({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

	/*
	 * This is a dummy function to check if the function name has been altered by minification.
	 * If the function has been minified and NODE_ENV !== 'production', warn the user.
	 */

	function isCrushed() {}

	if ( typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
	}

	var Redux = /*#__PURE__*/Object.freeze({
		__proto__: null,
		__DO_NOT_USE__ActionTypes: ActionTypes,
		applyMiddleware: applyMiddleware,
		bindActionCreators: bindActionCreators,
		combineReducers: combineReducers,
		compose: compose,
		createStore: createStore
	});

	var bind = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	var isBuffer = function isBuffer (obj) {
	  return obj != null && obj.constructor != null &&
	    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	};

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	var utils = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$1.performance || {};
	var performanceNow =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	var enhanceError = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	var createError = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	var settle = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	var buildURL = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};

	var isURLSameOrigin = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);

	var cookies = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);

	var xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request.onreadystatechange = function handleLoad() {
	      if (!request || request.readyState !== 4) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies$1 = cookies;

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies$1.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$1 = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer.isBuffer = isBuffer$1;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$1(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var hasFetch = isFunction$1(global$1.fetch) && isFunction$1(global$1.ReadableStream);

	var _blobConstructor;
	function blobConstructor() {
	  if (typeof _blobConstructor !== 'undefined') {
	    return _blobConstructor;
	  }
	  try {
	    new global$1.Blob([new ArrayBuffer(1)]);
	    _blobConstructor = true;
	  } catch (e) {
	    _blobConstructor = false;
	  }
	  return _blobConstructor
	}
	var xhr$1;

	function checkTypeSupport(type) {
	  if (!xhr$1) {
	    xhr$1 = new global$1.XMLHttpRequest();
	    // If location.host is empty, e.g. if this page/worker was loaded
	    // from a Blob, then use example.com to avoid an error
	    xhr$1.open('GET', global$1.location.host ? '/' : 'https://example.com');
	  }
	  try {
	    xhr$1.responseType = type;
	    return xhr$1.responseType === type
	  } catch (e) {
	    return false
	  }

	}

	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
	var haveSlice = haveArrayBuffer && isFunction$1(global$1.ArrayBuffer.prototype.slice);

	var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
	  // These next two tests unavoidably show warnings in Chrome. Since fetch will always
	  // be used if it's available, just return false for these to avoid the warnings.
	var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
	var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
	  checkTypeSupport('moz-chunked-arraybuffer');
	var overrideMimeType = isFunction$1(xhr$1.overrideMimeType);
	var vbArray = isFunction$1(global$1.VBArray);

	function isFunction$1(value) {
	  return typeof value === 'function'
	}

	xhr$1 = null; // Help gc

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString$1(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject$1(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined$1(global$1.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined$1(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined$1(ctx.depth)) ctx.depth = 2;
	  if (isUndefined$1(ctx.colors)) ctx.colors = false;
	  if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction$2(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString$1(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction$2(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate$1(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$2(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction$2(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate$1(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined$1(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString$1(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber$1(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$1(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty$1(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined$1(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$2(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber$1(arg) {
	  return typeof arg === 'number';
	}

	function isString$1(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined$1(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject$1(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject$1(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate$1(d) {
	  return isObject$1(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject$1(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction$2(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer$2(maybeBuf) {
	  return isBuffer$1(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject$1(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty$1(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer$2,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction$2,
	  isError: isError,
	  isDate: isDate$1,
	  isObject: isObject$1,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined$1,
	  isSymbol: isSymbol,
	  isString: isString$1,
	  isNumber: isNumber$1,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray$2,
	  inspect: inspect,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active && !(this instanceof domain.Domain)) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount$1 (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!isBuffer$1(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach$1(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach$1(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$1(Duplex, Readable);

	var keys = Object.keys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$1(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$1(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$1(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EventEmitter.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EventEmitter.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var rStates = {
	  UNSENT: 0,
	  OPENED: 1,
	  HEADERS_RECEIVED: 2,
	  LOADING: 3,
	  DONE: 4
	};
	function IncomingMessage(xhr, response, mode) {
	  var self = this;
	  Readable.call(self);

	  self._mode = mode;
	  self.headers = {};
	  self.rawHeaders = [];
	  self.trailers = {};
	  self.rawTrailers = [];

	  // Fake the 'close' event, but only once 'end' fires
	  self.on('end', function() {
	    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
	    nextTick(function() {
	      self.emit('close');
	    });
	  });
	  var read;
	  if (mode === 'fetch') {
	    self._fetchResponse = response;

	    self.url = response.url;
	    self.statusCode = response.status;
	    self.statusMessage = response.statusText;
	      // backwards compatible version of for (<item> of <iterable>):
	      // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
	    for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
	      self.headers[header[0].toLowerCase()] = header[1];
	      self.rawHeaders.push(header[0], header[1]);
	    }

	    // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
	    var reader = response.body.getReader();

	    read = function () {
	      reader.read().then(function(result) {
	        if (self._destroyed)
	          return
	        if (result.done) {
	          self.push(null);
	          return
	        }
	        self.push(new Buffer(result.value));
	        read();
	      });
	    };
	    read();

	  } else {
	    self._xhr = xhr;
	    self._pos = 0;

	    self.url = xhr.responseURL;
	    self.statusCode = xhr.status;
	    self.statusMessage = xhr.statusText;
	    var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
	    headers.forEach(function(header) {
	      var matches = header.match(/^([^:]+):\s*(.*)/);
	      if (matches) {
	        var key = matches[1].toLowerCase();
	        if (key === 'set-cookie') {
	          if (self.headers[key] === undefined) {
	            self.headers[key] = [];
	          }
	          self.headers[key].push(matches[2]);
	        } else if (self.headers[key] !== undefined) {
	          self.headers[key] += ', ' + matches[2];
	        } else {
	          self.headers[key] = matches[2];
	        }
	        self.rawHeaders.push(matches[1], matches[2]);
	      }
	    });

	    self._charset = 'x-user-defined';
	    if (!overrideMimeType) {
	      var mimeType = self.rawHeaders['mime-type'];
	      if (mimeType) {
	        var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
	        if (charsetMatch) {
	          self._charset = charsetMatch[1].toLowerCase();
	        }
	      }
	      if (!self._charset)
	        self._charset = 'utf-8'; // best guess
	    }
	  }
	}

	inherits$1(IncomingMessage, Readable);

	IncomingMessage.prototype._read = function() {};

	IncomingMessage.prototype._onXHRProgress = function() {
	  var self = this;

	  var xhr = self._xhr;

	  var response = null;
	  switch (self._mode) {
	  case 'text:vbarray': // For IE9
	    if (xhr.readyState !== rStates.DONE)
	      break
	    try {
	      // This fails in IE8
	      response = new global$1.VBArray(xhr.responseBody).toArray();
	    } catch (e) {
	      // pass
	    }
	    if (response !== null) {
	      self.push(new Buffer(response));
	      break
	    }
	    // Falls through in IE8
	  case 'text':
	    try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
	      response = xhr.responseText;
	    } catch (e) {
	      self._mode = 'text:vbarray';
	      break
	    }
	    if (response.length > self._pos) {
	      var newData = response.substr(self._pos);
	      if (self._charset === 'x-user-defined') {
	        var buffer = new Buffer(newData.length);
	        for (var i = 0; i < newData.length; i++)
	          buffer[i] = newData.charCodeAt(i) & 0xff;

	        self.push(buffer);
	      } else {
	        self.push(newData, self._charset);
	      }
	      self._pos = response.length;
	    }
	    break
	  case 'arraybuffer':
	    if (xhr.readyState !== rStates.DONE || !xhr.response)
	      break
	    response = xhr.response;
	    self.push(new Buffer(new Uint8Array(response)));
	    break
	  case 'moz-chunked-arraybuffer': // take whole
	    response = xhr.response;
	    if (xhr.readyState !== rStates.LOADING || !response)
	      break
	    self.push(new Buffer(new Uint8Array(response)));
	    break
	  case 'ms-stream':
	    response = xhr.response;
	    if (xhr.readyState !== rStates.LOADING)
	      break
	    var reader = new global$1.MSStreamReader();
	    reader.onprogress = function() {
	      if (reader.result.byteLength > self._pos) {
	        self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
	        self._pos = reader.result.byteLength;
	      }
	    };
	    reader.onload = function() {
	      self.push(null);
	    };
	      // reader.onerror = ??? // TODO: this
	    reader.readAsArrayBuffer(response);
	    break
	  }

	  // The ms-stream case handles end separately in reader.onload()
	  if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
	    self.push(null);
	  }
	};

	// from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
	function toArrayBuffer (buf) {
	  // If the buffer is backed by a Uint8Array, a faster version will work
	  if (buf instanceof Uint8Array) {
	    // If the buffer isn't a subarray, return the underlying ArrayBuffer
	    if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
	      return buf.buffer
	    } else if (typeof buf.buffer.slice === 'function') {
	      // Otherwise we need to get a proper copy
	      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
	    }
	  }

	  if (isBuffer$1(buf)) {
	    // This is the slow version that will work with any Buffer
	    // implementation (even in old browsers)
	    var arrayCopy = new Uint8Array(buf.length);
	    var len = buf.length;
	    for (var i = 0; i < len; i++) {
	      arrayCopy[i] = buf[i];
	    }
	    return arrayCopy.buffer
	  } else {
	    throw new Error('Argument must be a Buffer')
	  }
	}

	function decideMode(preferBinary, useFetch) {
	  if (hasFetch && useFetch) {
	    return 'fetch'
	  } else if (mozchunkedarraybuffer) {
	    return 'moz-chunked-arraybuffer'
	  } else if (msstream) {
	    return 'ms-stream'
	  } else if (arraybuffer && preferBinary) {
	    return 'arraybuffer'
	  } else if (vbArray && preferBinary) {
	    return 'text:vbarray'
	  } else {
	    return 'text'
	  }
	}

	function ClientRequest(opts) {
	  var self = this;
	  Writable.call(self);

	  self._opts = opts;
	  self._body = [];
	  self._headers = {};
	  if (opts.auth)
	    self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
	  Object.keys(opts.headers).forEach(function(name) {
	    self.setHeader(name, opts.headers[name]);
	  });

	  var preferBinary;
	  var useFetch = true;
	  if (opts.mode === 'disable-fetch') {
	    // If the use of XHR should be preferred and includes preserving the 'content-type' header
	    useFetch = false;
	    preferBinary = true;
	  } else if (opts.mode === 'prefer-streaming') {
	    // If streaming is a high priority but binary compatibility and
	    // the accuracy of the 'content-type' header aren't
	    preferBinary = false;
	  } else if (opts.mode === 'allow-wrong-content-type') {
	    // If streaming is more important than preserving the 'content-type' header
	    preferBinary = !overrideMimeType;
	  } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
	    // Use binary if text streaming may corrupt data or the content-type header, or for speed
	    preferBinary = true;
	  } else {
	    throw new Error('Invalid value for opts.mode')
	  }
	  self._mode = decideMode(preferBinary, useFetch);

	  self.on('finish', function() {
	    self._onFinish();
	  });
	}

	inherits$1(ClientRequest, Writable);
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
	  'accept-charset',
	  'accept-encoding',
	  'access-control-request-headers',
	  'access-control-request-method',
	  'connection',
	  'content-length',
	  'cookie',
	  'cookie2',
	  'date',
	  'dnt',
	  'expect',
	  'host',
	  'keep-alive',
	  'origin',
	  'referer',
	  'te',
	  'trailer',
	  'transfer-encoding',
	  'upgrade',
	  'user-agent',
	  'via'
	];
	ClientRequest.prototype.setHeader = function(name, value) {
	  var self = this;
	  var lowerName = name.toLowerCase();
	    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
	    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	    // http-browserify did it, so I will too.
	  if (unsafeHeaders.indexOf(lowerName) !== -1)
	    return

	  self._headers[lowerName] = {
	    name: name,
	    value: value
	  };
	};

	ClientRequest.prototype.getHeader = function(name) {
	  var self = this;
	  return self._headers[name.toLowerCase()].value
	};

	ClientRequest.prototype.removeHeader = function(name) {
	  var self = this;
	  delete self._headers[name.toLowerCase()];
	};

	ClientRequest.prototype._onFinish = function() {
	  var self = this;

	  if (self._destroyed)
	    return
	  var opts = self._opts;

	  var headersObj = self._headers;
	  var body;
	  if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
	    if (blobConstructor()) {
	      body = new global$1.Blob(self._body.map(function(buffer) {
	        return toArrayBuffer(buffer)
	      }), {
	        type: (headersObj['content-type'] || {}).value || ''
	      });
	    } else {
	      // get utf8 string
	      body = Buffer.concat(self._body).toString();
	    }
	  }

	  if (self._mode === 'fetch') {
	    var headers = Object.keys(headersObj).map(function(name) {
	      return [headersObj[name].name, headersObj[name].value]
	    });

	    global$1.fetch(self._opts.url, {
	      method: self._opts.method,
	      headers: headers,
	      body: body,
	      mode: 'cors',
	      credentials: opts.withCredentials ? 'include' : 'same-origin'
	    }).then(function(response) {
	      self._fetchResponse = response;
	      self._connect();
	    }, function(reason) {
	      self.emit('error', reason);
	    });
	  } else {
	    var xhr = self._xhr = new global$1.XMLHttpRequest();
	    try {
	      xhr.open(self._opts.method, self._opts.url, true);
	    } catch (err) {
	      nextTick(function() {
	        self.emit('error', err);
	      });
	      return
	    }

	    // Can't set responseType on really old browsers
	    if ('responseType' in xhr)
	      xhr.responseType = self._mode.split(':')[0];

	    if ('withCredentials' in xhr)
	      xhr.withCredentials = !!opts.withCredentials;

	    if (self._mode === 'text' && 'overrideMimeType' in xhr)
	      xhr.overrideMimeType('text/plain; charset=x-user-defined');

	    Object.keys(headersObj).forEach(function(name) {
	      xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
	    });

	    self._response = null;
	    xhr.onreadystatechange = function() {
	      switch (xhr.readyState) {
	      case rStates.LOADING:
	      case rStates.DONE:
	        self._onXHRProgress();
	        break
	      }
	    };
	      // Necessary for streaming in Firefox, since xhr.response is ONLY defined
	      // in onprogress, not in onreadystatechange with xhr.readyState = 3
	    if (self._mode === 'moz-chunked-arraybuffer') {
	      xhr.onprogress = function() {
	        self._onXHRProgress();
	      };
	    }

	    xhr.onerror = function() {
	      if (self._destroyed)
	        return
	      self.emit('error', new Error('XHR error'));
	    };

	    try {
	      xhr.send(body);
	    } catch (err) {
	      nextTick(function() {
	        self.emit('error', err);
	      });
	      return
	    }
	  }
	};

	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid(xhr) {
	  try {
	    var status = xhr.status;
	    return (status !== null && status !== 0)
	  } catch (e) {
	    return false
	  }
	}

	ClientRequest.prototype._onXHRProgress = function() {
	  var self = this;

	  if (!statusValid(self._xhr) || self._destroyed)
	    return

	  if (!self._response)
	    self._connect();

	  self._response._onXHRProgress();
	};

	ClientRequest.prototype._connect = function() {
	  var self = this;

	  if (self._destroyed)
	    return

	  self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
	  self.emit('response', self._response);
	};

	ClientRequest.prototype._write = function(chunk, encoding, cb) {
	  var self = this;

	  self._body.push(chunk);
	  cb();
	};

	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
	  var self = this;
	  self._destroyed = true;
	  if (self._response)
	    self._response._destroyed = true;
	  if (self._xhr)
	    self._xhr.abort();
	    // Currently, there isn't a way to truly abort a fetch.
	    // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	};

	ClientRequest.prototype.end = function(data, encoding, cb) {
	  var self = this;
	  if (typeof data === 'function') {
	    cb = data;
	    data = undefined;
	  }

	  Writable.prototype.end.call(self, data, encoding, cb);
	};

	ClientRequest.prototype.flushHeaders = function() {};
	ClientRequest.prototype.setTimeout = function() {};
	ClientRequest.prototype.setNoDelay = function() {};
	ClientRequest.prototype.setSocketKeepAlive = function() {};

	/*! https://mths.be/punycode v1.4.1 by @mathias */


	/** Highest positive signed 32-bit float value */
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
	var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	/** Error messages */
	var errors = {
	  'overflow': 'Overflow: input needs wider integers to process',
	  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	  'invalid-input': 'Invalid input'
	};

	/** Convenience shortcuts */
	var baseMinusTMin = base - tMin;
	var floor = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
	  throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
	  var length = array.length;
	  var result = [];
	  while (length--) {
	    result[length] = fn(array[length]);
	  }
	  return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
	  var parts = string.split('@');
	  var result = '';
	  if (parts.length > 1) {
	    // In email addresses, only the domain name should be punycoded. Leave
	    // the local part (i.e. everything up to `@`) intact.
	    result = parts[0] + '@';
	    string = parts[1];
	  }
	  // Avoid `split(regex)` for IE8 compatibility. See #17.
	  string = string.replace(regexSeparators, '\x2E');
	  var labels = string.split('.');
	  var encoded = map(labels, fn).join('.');
	  return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
	  var output = [],
	    counter = 0,
	    length = string.length,
	    value,
	    extra;
	  while (counter < length) {
	    value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // high surrogate, and there is a next character
	      extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // low surrogate
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // unmatched surrogate; only append this code unit, in case the next
	        // code unit is the high surrogate of a surrogate pair
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor(delta / damp) : delta >> 1;
	  delta += floor(delta / numPoints);
	  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor(delta / baseMinusTMin);
	  }
	  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode$1(input) {
	  var n,
	    delta,
	    handledCPCount,
	    basicLength,
	    bias,
	    j,
	    m,
	    q,
	    k,
	    t,
	    currentValue,
	    output = [],
	    /** `inputLength` will hold the number of code points in `input`. */
	    inputLength,
	    /** Cached calculation results */
	    handledCPCountPlusOne,
	    baseMinusT,
	    qMinusT;

	  // Convert the input in UCS-2 to Unicode
	  input = ucs2decode(input);

	  // Cache the length
	  inputLength = input.length;

	  // Initialize the state
	  n = initialN;
	  delta = 0;
	  bias = initialBias;

	  // Handle the basic code points
	  for (j = 0; j < inputLength; ++j) {
	    currentValue = input[j];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  handledCPCount = basicLength = output.length;

	  // `handledCPCount` is the number of code points that have been handled;
	  // `basicLength` is the number of basic code points.

	  // Finish the basic string - if it is not empty - with a delimiter
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {

	    // All non-basic code points < n have been handled already. Find the next
	    // larger one:
	    for (m = maxInt, j = 0; j < inputLength; ++j) {
	      currentValue = input[j];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
	    // but guard against overflow
	    handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
	      error('overflow');
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (j = 0; j < inputLength; ++j) {
	      currentValue = input[j];

	      if (currentValue < n && ++delta > maxInt) {
	        error('overflow');
	      }

	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer
	        for (q = delta, k = base; /* no condition */ ; k += base) {
	          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) {
	            break;
	          }
	          qMinusT = q - t;
	          baseMinusT = base - t;
	          output.push(
	            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
	          );
	          q = floor(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q, 0)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;

	  }
	  return output.join('');
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
	  return mapDomain(input, function(string) {
	    return regexNonASCII.test(string) ?
	      'xn--' + encode$1(string) :
	      string;
	  });
	}

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty$2(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	var isArray$3 = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	function stringifyPrimitive(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	}

	function stringify (obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map$1(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray$3(obj[k])) {
	        return map$1(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	}
	function map$1 (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};

	function parse(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty$2(obj, k)) {
	      obj[k] = v;
	    } else if (isArray$3(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	}

	// Copyright Joyent, Inc. and other Node contributors.
	var url = {
	  parse: urlParse,
	  resolve: urlResolve,
	  resolveObject: urlResolveObject,
	  format: urlFormat,
	  Url: Url
	};
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	  portPattern = /:[0-9]*$/,

	  // Special case for a simple path URL
	  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	  // RFC 2396: characters reserved for delimiting URLs.
	  // We actually just auto-escape these.
	  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	  // RFC 2396: characters not allowed for various reasons.
	  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	  autoEscape = ['\''].concat(unwise),
	  // Characters that are never ever allowed in a hostname.
	  // Note that any invalid chars are also handled, but these
	  // are the ones that are *expected* to be seen, so we fast-path
	  // them.
	  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	  hostEndingChars = ['/', '?', '#'],
	  hostnameMaxLen = 255,
	  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	  // protocols that can allow "unsafe" and "unwise" chars.
	  unsafeProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that never have a hostname.
	  hostlessProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that always contain a // bit.
	  slashedProtocol = {
	    'http': true,
	    'https': true,
	    'ftp': true,
	    'gopher': true,
	    'file': true,
	    'http:': true,
	    'https:': true,
	    'ftp:': true,
	    'gopher:': true,
	    'file:': true
	  };

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject$1(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  return parse$1(this, url, parseQueryString, slashesDenoteHost);
	};

	function parse$1(self, url, parseQueryString, slashesDenoteHost) {
	  if (!isString$1(url)) {
	    throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	    splitter =
	    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	    uSplit = url.split(splitter),
	    slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      self.path = rest;
	      self.href = rest;
	      self.pathname = simplePath[1];
	      if (simplePath[2]) {
	        self.search = simplePath[2];
	        if (parseQueryString) {
	          self.query = parse(self.search.substr(1));
	        } else {
	          self.query = self.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        self.search = '';
	        self.query = {};
	      }
	      return self;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    self.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      self.slashes = true;
	    }
	  }
	  var i, hec, l, p;
	  if (!hostlessProtocol[proto] &&
	    (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (i = 0; i < hostEndingChars.length; i++) {
	      hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      self.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (i = 0; i < nonHostChars.length; i++) {
	      hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    self.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    parseHost(self);

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    self.hostname = self.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = self.hostname[0] === '[' &&
	      self.hostname[self.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = self.hostname.split(/\./);
	      for (i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            self.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (self.hostname.length > hostnameMaxLen) {
	      self.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      self.hostname = self.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      self.hostname = toASCII(self.hostname);
	    }

	    p = self.port ? ':' + self.port : '';
	    var h = self.hostname || '';
	    self.host = h + p;
	    self.href += self.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      self.hostname = self.hostname.substr(1, self.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    self.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    self.search = rest.substr(qm);
	    self.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      self.query = parse(self.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    self.search = '';
	    self.query = {};
	  }
	  if (rest) self.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	    self.hostname && !self.pathname) {
	    self.pathname = '/';
	  }

	  //to support http.request
	  if (self.pathname || self.search) {
	    p = self.pathname || '';
	    var s = self.search || '';
	    self.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  self.href = format$1(self);
	  return self;
	}

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString$1(obj)) obj = parse$1({}, obj);
	  return format$1(obj);
	}

	function format$1(self) {
	  var auth = self.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = self.protocol || '',
	    pathname = self.pathname || '',
	    hash = self.hash || '',
	    host = false,
	    query = '';

	  if (self.host) {
	    host = auth + self.host;
	  } else if (self.hostname) {
	    host = auth + (self.hostname.indexOf(':') === -1 ?
	      self.hostname :
	      '[' + this.hostname + ']');
	    if (self.port) {
	      host += ':' + self.port;
	    }
	  }

	  if (self.query &&
	    isObject$1(self.query) &&
	    Object.keys(self.query).length) {
	    query = stringify(self.query);
	  }

	  var search = self.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (self.slashes ||
	    (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	}

	Url.prototype.format = function() {
	  return format$1(this);
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString$1(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	      result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }
	  var relPath;
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	    isRelAbs = (
	      relative.host ||
	      relative.pathname && relative.pathname.charAt(0) === '/'
	    ),
	    mustEndAbs = (isRelAbs || isSourceAbs ||
	      (result.host && relative.pathname)),
	    removeAllDots = mustEndAbs,
	    srcPath = result.pathname && result.pathname.split('/') || [],
	    psychotic = result.protocol && !slashedProtocol[result.protocol];
	  relPath = relative.pathname && relative.pathname.split('/') || [];
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	  var authInHost;
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	      relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      authInHost = result.host && result.host.indexOf('@') > 0 ?
	        result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	        (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	    (result.host || relative.host || srcPath.length > 1) &&
	    (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	    (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	    (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	      srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    authInHost = result.host && result.host.indexOf('@') > 0 ?
	      result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	      (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  return parseHost(this);
	};

	function parseHost(self) {
	  var host = self.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      self.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) self.hostname = host;
	}

	function request(opts, cb) {
	  if (typeof opts === 'string')
	    opts = urlParse(opts);


	  // Normally, the page is loaded from http or https, so not specifying a protocol
	  // will result in a (valid) protocol-relative url. However, this won't work if
	  // the protocol is something else, like 'file:'
	  var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

	  var protocol = opts.protocol || defaultProtocol;
	  var host = opts.hostname || opts.host;
	  var port = opts.port;
	  var path = opts.path || '/';

	  // Necessary for IPv6 addresses
	  if (host && host.indexOf(':') !== -1)
	    host = '[' + host + ']';

	  // This may be a relative url. The browser should always be able to interpret it correctly.
	  opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
	  opts.method = (opts.method || 'GET').toUpperCase();
	  opts.headers = opts.headers || {};

	  // Also valid opts.auth, opts.mode

	  var req = new ClientRequest(opts);
	  if (cb)
	    req.on('response', cb);
	  return req
	}

	function get(opts, cb) {
	  var req = request(opts, cb);
	  req.end();
	  return req
	}

	function Agent() {}
	Agent.defaultMaxSockets = 4;

	var METHODS = [
	  'CHECKOUT',
	  'CONNECT',
	  'COPY',
	  'DELETE',
	  'GET',
	  'HEAD',
	  'LOCK',
	  'M-SEARCH',
	  'MERGE',
	  'MKACTIVITY',
	  'MKCOL',
	  'MOVE',
	  'NOTIFY',
	  'OPTIONS',
	  'PATCH',
	  'POST',
	  'PROPFIND',
	  'PROPPATCH',
	  'PURGE',
	  'PUT',
	  'REPORT',
	  'SEARCH',
	  'SUBSCRIBE',
	  'TRACE',
	  'UNLOCK',
	  'UNSUBSCRIBE'
	];
	var STATUS_CODES = {
	  100: 'Continue',
	  101: 'Switching Protocols',
	  102: 'Processing', // RFC 2518, obsoleted by RFC 4918
	  200: 'OK',
	  201: 'Created',
	  202: 'Accepted',
	  203: 'Non-Authoritative Information',
	  204: 'No Content',
	  205: 'Reset Content',
	  206: 'Partial Content',
	  207: 'Multi-Status', // RFC 4918
	  300: 'Multiple Choices',
	  301: 'Moved Permanently',
	  302: 'Moved Temporarily',
	  303: 'See Other',
	  304: 'Not Modified',
	  305: 'Use Proxy',
	  307: 'Temporary Redirect',
	  400: 'Bad Request',
	  401: 'Unauthorized',
	  402: 'Payment Required',
	  403: 'Forbidden',
	  404: 'Not Found',
	  405: 'Method Not Allowed',
	  406: 'Not Acceptable',
	  407: 'Proxy Authentication Required',
	  408: 'Request Time-out',
	  409: 'Conflict',
	  410: 'Gone',
	  411: 'Length Required',
	  412: 'Precondition Failed',
	  413: 'Request Entity Too Large',
	  414: 'Request-URI Too Large',
	  415: 'Unsupported Media Type',
	  416: 'Requested Range Not Satisfiable',
	  417: 'Expectation Failed',
	  418: 'I\'m a teapot', // RFC 2324
	  422: 'Unprocessable Entity', // RFC 4918
	  423: 'Locked', // RFC 4918
	  424: 'Failed Dependency', // RFC 4918
	  425: 'Unordered Collection', // RFC 4918
	  426: 'Upgrade Required', // RFC 2817
	  428: 'Precondition Required', // RFC 6585
	  429: 'Too Many Requests', // RFC 6585
	  431: 'Request Header Fields Too Large', // RFC 6585
	  500: 'Internal Server Error',
	  501: 'Not Implemented',
	  502: 'Bad Gateway',
	  503: 'Service Unavailable',
	  504: 'Gateway Time-out',
	  505: 'HTTP Version Not Supported',
	  506: 'Variant Also Negotiates', // RFC 2295
	  507: 'Insufficient Storage', // RFC 4918
	  509: 'Bandwidth Limit Exceeded',
	  510: 'Not Extended', // RFC 2774
	  511: 'Network Authentication Required' // RFC 6585
	};

	var http = {
	  request,
	  get,
	  Agent,
	  METHODS,
	  STATUS_CODES
	};

	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	var hasOwn = Object.prototype.hasOwnProperty;

	var objectKeys$1 = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	var pSlice = Array.prototype.slice;
	var _functionsHaveNames;
	function functionsHaveNames() {
	  if (typeof _functionsHaveNames !== 'undefined') {
	    return _functionsHaveNames;
	  }
	  return _functionsHaveNames = (function () {
	    return function foo() {}.name === 'foo';
	  }());
	}
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer$1(arrbuf)) {
	    return false;
	  }
	  if (typeof global$1.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	function assert(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!isFunction$2(func)) {
	    return;
	  }
	  if (functionsHaveNames()) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = AssertionError;
	function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	}

	// assert.AssertionError instanceof Error
	inherits$1(AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect$1(something) {
	  if (functionsHaveNames() || !isFunction$2(something)) {
	    return inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect$1(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect$1(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	assert.equal = equal;
	function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', equal);
	}

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	assert.notEqual = notEqual;
	function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', notEqual);
	  }
	}

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	assert.deepEqual = deepEqual;
	function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', deepEqual);
	  }
	}
	assert.deepStrictEqual = deepStrictEqual;
	function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
	  }
	}

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer$1(actual) && isBuffer$1(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (isDate$1(actual) && isDate$1(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (isRegExp(actual) && isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer$1(actual) !== isBuffer$1(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (isPrimitive(a) || isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys$1(a);
	  var kb = objectKeys$1(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	assert.notDeepEqual = notDeepEqual;
	function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
	  }
	}

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	assert.strictEqual = strictEqual;
	function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', strictEqual);
	  }
	}

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	assert.notStrictEqual = notStrictEqual;
	function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', notStrictEqual);
	  }
	}

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	assert.throws = throws;
	function throws(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	}

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = doesNotThrow;
	function doesNotThrow(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	}

	assert.ifError = ifError;
	function ifError(err) {
	  if (err) throw err;
	}

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y$1 = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse$2(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse$2(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y$1;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	var debug$1 = createCommonjsModule(function (module, exports) {
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = ms;

	/**
	 * Active `debug` instances.
	 */
	exports.instances = [];

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  var prevTime;

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	  debug.destroy = destroy;

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  exports.instances.push(debug);

	  return debug;
	}

	function destroy () {
	  var index = exports.instances.indexOf(this);
	  if (index !== -1) {
	    exports.instances.splice(index, 1);
	    return true;
	  } else {
	    return false;
	  }
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var i;
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }

	  for (i = 0; i < exports.instances.length; i++) {
	    var instance = exports.instances[i];
	    instance.enabled = exports.enabled(instance.namespace);
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  if (name[name.length - 1] === '*') {
	    return true;
	  }
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}
	});
	var debug_1 = debug$1.coerce;
	var debug_2 = debug$1.disable;
	var debug_3 = debug$1.enable;
	var debug_4 = debug$1.enabled;
	var debug_5 = debug$1.humanize;
	var debug_6 = debug$1.instances;
	var debug_7 = debug$1.names;
	var debug_8 = debug$1.skips;
	var debug_9 = debug$1.formatters;

	var browser$1 = createCommonjsModule(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug$1;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
	  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
	  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
	  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
	  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
	  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
	  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
	  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
	  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
	  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
	  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // Internet Explorer and Edge do not support colors.
	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit');

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	});
	var browser_1 = browser$1.log;
	var browser_2 = browser$1.formatArgs;
	var browser_3 = browser$1.save;
	var browser_4 = browser$1.load;
	var browser_5 = browser$1.useColors;
	var browser_6 = browser$1.storage;
	var browser_7 = browser$1.colors;

	// MIT lisence
	// from https://github.com/substack/tty-browserify/blob/1ba769a6429d242f36226538835b4034bf6b7886/index.js

	function isatty() {
	  return false;
	}

	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}

	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}

	var tty = {
	  isatty: isatty,
	  ReadStream: ReadStream,
	  WriteStream: WriteStream
	};

	/*
	The MIT License (MIT)

	Copyright (c) 2016 CoderPuppy

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	*/
	var _endianness;
	function endianness() {
	  if (typeof _endianness === 'undefined') {
	    var a = new ArrayBuffer(2);
	    var b = new Uint8Array(a);
	    var c = new Uint16Array(a);
	    b[0] = 1;
	    b[1] = 2;
	    if (c[0] === 258) {
	      _endianness = 'BE';
	    } else if (c[0] === 513){
	      _endianness = 'LE';
	    } else {
	      throw new Error('unable to figure out endianess');
	    }
	  }
	  return _endianness;
	}

	function hostname() {
	  if (typeof global$1.location !== 'undefined') {
	    return global$1.location.hostname
	  } else return '';
	}

	function loadavg() {
	  return [];
	}

	function uptime$1() {
	  return 0;
	}

	function freemem() {
	  return Number.MAX_VALUE;
	}

	function totalmem() {
	  return Number.MAX_VALUE;
	}

	function cpus() {
	  return [];
	}

	function type() {
	  return 'Browser';
	}

	function release$1 () {
	  if (typeof global$1.navigator !== 'undefined') {
	    return global$1.navigator.appVersion;
	  }
	  return '';
	}

	function networkInterfaces(){}
	function getNetworkInterfaces(){}

	function tmpDir() {
	  return '/tmp';
	}
	var tmpdir = tmpDir;

	var EOL = '\n';
	var os = {
	  EOL: EOL,
	  tmpdir: tmpdir,
	  tmpDir: tmpDir,
	  networkInterfaces:networkInterfaces,
	  getNetworkInterfaces: getNetworkInterfaces,
	  release: release$1,
	  type: type,
	  cpus: cpus,
	  totalmem: totalmem,
	  freemem: freemem,
	  uptime: uptime$1,
	  loadavg: loadavg,
	  hostname: hostname,
	  endianness: endianness,
	};

	var hasFlag = (flag, argv) => {
		argv = argv || process.argv;
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const pos = argv.indexOf(prefix + flag);
		const terminatorPos = argv.indexOf('--');
		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};

	const env$1 = process.env;

	let forceColor;
	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false')) {
		forceColor = false;
	} else if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		forceColor = true;
	}
	if ('FORCE_COLOR' in env$1) {
		forceColor = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor(stream) {
		if (forceColor === false) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (stream && !stream.isTTY && forceColor !== true) {
			return 0;
		}

		const min = forceColor ? 1 : 0;

		if (process.platform === 'win32') {
			// Node.js 7.5.0 is the first version of Node.js to include a patch to
			// libuv that enables 256 color output on Windows. Anything earlier and it
			// won't work. However, here we target Node.js 8 at minimum as it is an LTS
			// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
			// release that supports 256 colors. Windows 10 build 14931 is the first release
			// that supports 16m/TrueColor.
			const osRelease = os.release().split('.');
			if (
				Number(process.versions.node.split('.')[0]) >= 8 &&
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env$1) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env$1) || env$1.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env$1) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env$1.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env$1) {
			const version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env$1.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env$1.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env$1) {
			return 1;
		}

		if (env$1.TERM === 'dumb') {
			return min;
		}

		return min;
	}

	function getSupportLevel(stream) {
		const level = supportsColor(stream);
		return translateLevel(level);
	}

	var supportsColor_1 = {
		supportsColor: getSupportLevel,
		stdout: getSupportLevel(process.stdout),
		stderr: getSupportLevel(process.stderr)
	};

	var node = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */




	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug$1;
	exports.init = init;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [ 6, 2, 3, 4, 5, 1 ];

	try {
	  var supportsColor = supportsColor_1;
	  if (supportsColor && supportsColor.level >= 2) {
	    exports.colors = [
	      20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68,
	      69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134,
	      135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	      172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	      205, 206, 207, 208, 209, 214, 215, 220, 221
	    ];
	  }
	} catch (err) {
	  // swallow - we only care if `supports-color` is available; it doesn't have to be.
	}

	/**
	 * Build up the default `inspectOpts` object from the environment variables.
	 *
	 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
	 */

	exports.inspectOpts = Object.keys(process.env).filter(function (key) {
	  return /^debug_/i.test(key);
	}).reduce(function (obj, key) {
	  // camel-case
	  var prop = key
	    .substring(6)
	    .toLowerCase()
	    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

	  // coerce string value into JS value
	  var val = process.env[key];
	  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
	  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
	  else if (val === 'null') val = null;
	  else val = Number(val);

	  obj[prop] = val;
	  return obj;
	}, {});

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  return 'colors' in exports.inspectOpts
	    ? Boolean(exports.inspectOpts.colors)
	    : tty.isatty(false);
	}

	/**
	 * Map %o to `util.inspect()`, all on a single line.
	 */

	exports.formatters.o = function(v) {
	  this.inspectOpts.colors = this.useColors;
	  return util.inspect(v, this.inspectOpts)
	    .split('\n').map(function(str) {
	      return str.trim()
	    }).join(' ');
	};

	/**
	 * Map %o to `util.inspect()`, allowing multiple lines if needed.
	 */

	exports.formatters.O = function(v) {
	  this.inspectOpts.colors = this.useColors;
	  return util.inspect(v, this.inspectOpts);
	};

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var name = this.namespace;
	  var useColors = this.useColors;

	  if (useColors) {
	    var c = this.color;
	    var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
	    var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';

	    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
	    args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
	  } else {
	    args[0] = getDate() + name + ' ' + args[0];
	  }
	}

	function getDate() {
	  if (exports.inspectOpts.hideDate) {
	    return '';
	  } else {
	    return new Date().toISOString() + ' ';
	  }
	}

	/**
	 * Invokes `util.format()` with the specified arguments and writes to stderr.
	 */

	function log() {
	  return process.stderr.write(util.format.apply(util, arguments) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  return process.env.DEBUG;
	}

	/**
	 * Init logic for `debug` instances.
	 *
	 * Create a new `inspectOpts` object in case `useColors` is set
	 * differently for a particular `debug` instance.
	 */

	function init (debug) {
	  debug.inspectOpts = {};

	  var keys = Object.keys(exports.inspectOpts);
	  for (var i = 0; i < keys.length; i++) {
	    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	  }
	}

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	exports.enable(load());
	});
	var node_1 = node.init;
	var node_2 = node.log;
	var node_3 = node.formatArgs;
	var node_4 = node.save;
	var node_5 = node.load;
	var node_6 = node.useColors;
	var node_7 = node.colors;
	var node_8 = node.inspectOpts;

	var src = createCommonjsModule(function (module) {
	/**
	 * Detect Electron renderer process, which is node, but we should
	 * treat as a browser.
	 */

	if (typeof process === 'undefined' || process.type === 'renderer') {
	  module.exports = browser$1;
	} else {
	  module.exports = node;
	}
	});

	var Writable$1 = Stream.Writable;
	var debug$2 = src("follow-redirects");

	// RFC7231§4.2.1: Of the request methods defined by this specification,
	// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
	var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };

	// Create handlers that pass events from native requests
	var eventHandlers = Object.create(null);
	["abort", "aborted", "error", "socket", "timeout"].forEach(function (event) {
	  eventHandlers[event] = function (arg) {
	    this._redirectable.emit(event, arg);
	  };
	});

	// An HTTP(S) request that can be redirected
	function RedirectableRequest(options, responseCallback) {
	  // Initialize the request
	  Writable$1.call(this);
	  options.headers = options.headers || {};
	  this._options = options;
	  this._redirectCount = 0;
	  this._redirects = [];
	  this._requestBodyLength = 0;
	  this._requestBodyBuffers = [];

	  // Since http.request treats host as an alias of hostname,
	  // but the url module interprets host as hostname plus port,
	  // eliminate the host property to avoid confusion.
	  if (options.host) {
	    // Use hostname if set, because it has precedence
	    if (!options.hostname) {
	      options.hostname = options.host;
	    }
	    delete options.host;
	  }

	  // Attach a callback if passed
	  if (responseCallback) {
	    this.on("response", responseCallback);
	  }

	  // React to responses of native requests
	  var self = this;
	  this._onNativeResponse = function (response) {
	    self._processResponse(response);
	  };

	  // Complete the URL object when necessary
	  if (!options.pathname && options.path) {
	    var searchPos = options.path.indexOf("?");
	    if (searchPos < 0) {
	      options.pathname = options.path;
	    }
	    else {
	      options.pathname = options.path.substring(0, searchPos);
	      options.search = options.path.substring(searchPos);
	    }
	  }

	  // Perform the first request
	  this._performRequest();
	}
	RedirectableRequest.prototype = Object.create(Writable$1.prototype);

	// Writes buffered data to the current native request
	RedirectableRequest.prototype.write = function (data, encoding, callback) {
	  // Validate input and shift parameters if necessary
	  if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
	    throw new Error("data should be a string, Buffer or Uint8Array");
	  }
	  if (typeof encoding === "function") {
	    callback = encoding;
	    encoding = null;
	  }

	  // Ignore empty buffers, since writing them doesn't invoke the callback
	  // https://github.com/nodejs/node/issues/22066
	  if (data.length === 0) {
	    if (callback) {
	      callback();
	    }
	    return;
	  }
	  // Only write when we don't exceed the maximum body length
	  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
	    this._requestBodyLength += data.length;
	    this._requestBodyBuffers.push({ data: data, encoding: encoding });
	    this._currentRequest.write(data, encoding, callback);
	  }
	  // Error when we exceed the maximum body length
	  else {
	    this.emit("error", new Error("Request body larger than maxBodyLength limit"));
	    this.abort();
	  }
	};

	// Ends the current native request
	RedirectableRequest.prototype.end = function (data, encoding, callback) {
	  // Shift parameters if necessary
	  if (typeof data === "function") {
	    callback = data;
	    data = encoding = null;
	  }
	  else if (typeof encoding === "function") {
	    callback = encoding;
	    encoding = null;
	  }

	  // Write data and end
	  var currentRequest = this._currentRequest;
	  this.write(data || "", encoding, function () {
	    currentRequest.end(null, null, callback);
	  });
	};

	// Sets a header value on the current native request
	RedirectableRequest.prototype.setHeader = function (name, value) {
	  this._options.headers[name] = value;
	  this._currentRequest.setHeader(name, value);
	};

	// Clears a header value on the current native request
	RedirectableRequest.prototype.removeHeader = function (name) {
	  delete this._options.headers[name];
	  this._currentRequest.removeHeader(name);
	};

	// Proxy all other public ClientRequest methods
	[
	  "abort", "flushHeaders", "getHeader",
	  "setNoDelay", "setSocketKeepAlive", "setTimeout",
	].forEach(function (method) {
	  RedirectableRequest.prototype[method] = function (a, b) {
	    return this._currentRequest[method](a, b);
	  };
	});

	// Proxy all public ClientRequest properties
	["aborted", "connection", "socket"].forEach(function (property) {
	  Object.defineProperty(RedirectableRequest.prototype, property, {
	    get: function () { return this._currentRequest[property]; },
	  });
	});

	// Executes the next native request (initial or redirect)
	RedirectableRequest.prototype._performRequest = function () {
	  // Load the native protocol
	  var protocol = this._options.protocol;
	  var nativeProtocol = this._options.nativeProtocols[protocol];
	  if (!nativeProtocol) {
	    this.emit("error", new Error("Unsupported protocol " + protocol));
	    return;
	  }

	  // If specified, use the agent corresponding to the protocol
	  // (HTTP and HTTPS use different types of agents)
	  if (this._options.agents) {
	    var scheme = protocol.substr(0, protocol.length - 1);
	    this._options.agent = this._options.agents[scheme];
	  }

	  // Create the native request
	  var request = this._currentRequest =
	        nativeProtocol.request(this._options, this._onNativeResponse);
	  this._currentUrl = url.format(this._options);

	  // Set up event handlers
	  request._redirectable = this;
	  for (var event in eventHandlers) {
	    /* istanbul ignore else */
	    if (event) {
	      request.on(event, eventHandlers[event]);
	    }
	  }

	  // End a redirected request
	  // (The first request must be ended explicitly with RedirectableRequest#end)
	  if (this._isRedirect) {
	    // Write the request entity and end.
	    var i = 0;
	    var buffers = this._requestBodyBuffers;
	    (function writeNext() {
	      if (i < buffers.length) {
	        var buffer = buffers[i++];
	        request.write(buffer.data, buffer.encoding, writeNext);
	      }
	      else {
	        request.end();
	      }
	    }());
	  }
	};

	// Processes a response from the current native request
	RedirectableRequest.prototype._processResponse = function (response) {
	  // Store the redirected response
	  if (this._options.trackRedirects) {
	    this._redirects.push({
	      url: this._currentUrl,
	      headers: response.headers,
	      statusCode: response.statusCode,
	    });
	  }

	  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
	  // that further action needs to be taken by the user agent in order to
	  // fulfill the request. If a Location header field is provided,
	  // the user agent MAY automatically redirect its request to the URI
	  // referenced by the Location field value,
	  // even if the specific status code is not understood.
	  var location = response.headers.location;
	  if (location && this._options.followRedirects !== false &&
	      response.statusCode >= 300 && response.statusCode < 400) {
	    // RFC7231§6.4: A client SHOULD detect and intervene
	    // in cyclical redirections (i.e., "infinite" redirection loops).
	    if (++this._redirectCount > this._options.maxRedirects) {
	      this.emit("error", new Error("Max redirects exceeded."));
	      return;
	    }

	    // RFC7231§6.4: Automatic redirection needs to done with
	    // care for methods not known to be safe […],
	    // since the user might not wish to redirect an unsafe request.
	    // RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
	    // that the target resource resides temporarily under a different URI
	    // and the user agent MUST NOT change the request method
	    // if it performs an automatic redirection to that URI.
	    var header;
	    var headers = this._options.headers;
	    if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
	      this._options.method = "GET";
	      // Drop a possible entity and headers related to it
	      this._requestBodyBuffers = [];
	      for (header in headers) {
	        if (/^content-/i.test(header)) {
	          delete headers[header];
	        }
	      }
	    }

	    // Drop the Host header, as the redirect might lead to a different host
	    if (!this._isRedirect) {
	      for (header in headers) {
	        if (/^host$/i.test(header)) {
	          delete headers[header];
	        }
	      }
	    }

	    // Perform the redirected request
	    var redirectUrl = url.resolve(this._currentUrl, location);
	    debug$2("redirecting to", redirectUrl);
	    Object.assign(this._options, url.parse(redirectUrl));
	    this._isRedirect = true;
	    this._performRequest();

	    // Discard the remainder of the response to avoid waiting for data
	    response.destroy();
	  }
	  else {
	    // The response is not a redirect; return it as-is
	    response.responseUrl = this._currentUrl;
	    response.redirects = this._redirects;
	    this.emit("response", response);

	    // Clean up
	    this._requestBodyBuffers = [];
	  }
	};

	// Wraps the key/value object of protocols with redirect functionality
	function wrap(protocols) {
	  // Default settings
	  var exports = {
	    maxRedirects: 21,
	    maxBodyLength: 10 * 1024 * 1024,
	  };

	  // Wrap each protocol
	  var nativeProtocols = {};
	  Object.keys(protocols).forEach(function (scheme) {
	    var protocol = scheme + ":";
	    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
	    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

	    // Executes a request, following redirects
	    wrappedProtocol.request = function (options, callback) {
	      if (typeof options === "string") {
	        options = url.parse(options);
	        options.maxRedirects = exports.maxRedirects;
	      }
	      else {
	        options = Object.assign({
	          protocol: protocol,
	          maxRedirects: exports.maxRedirects,
	          maxBodyLength: exports.maxBodyLength,
	        }, options);
	      }
	      options.nativeProtocols = nativeProtocols;
	      assert.equal(options.protocol, protocol, "protocol mismatch");
	      debug$2("options", options);
	      return new RedirectableRequest(options, callback);
	    };

	    // Executes a GET request, following redirects
	    wrappedProtocol.get = function (options, callback) {
	      var request = wrappedProtocol.request(options, callback);
	      request.end();
	      return request;
	    };
	  });
	  return exports;
	}

	// Exports
	var followRedirects = wrap({ http: http, https: http });
	var wrap_1 = wrap;
	followRedirects.wrap = wrap_1;

	var msg = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	function arraySet(dest, src, src_offs, len, dest_offs) {
	  if (src.subarray && dest.subarray) {
	    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	    return;
	  }
	  // Fallback to ordinary array
	  for (var i = 0; i < len; i++) {
	    dest[dest_offs + i] = src[src_offs + i];
	  }
	}


	var Buf8 = Uint8Array;
	var Buf16 = Uint16Array;
	var Buf32 = Int32Array;
	// Enable/Disable typed arrays use, for testing
	//

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY = 0;
	var Z_TEXT = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN = 2;

	/*============================================================================*/


	function zero(buf) {
	  var len = buf.length;
	  while (--len >= 0) {
	    buf[len] = 0;
	  }
	}

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES = 2;
	/* The three kinds of block type */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS = 256;
	/* number of literal bytes 0..255 */

	var L_CODES = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES = 30;
	/* number of distance codes */

	var BL_CODES = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE = 2 * L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK = 256;
	/* end of block literal code */

	var REP_3_6 = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10 = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

	var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

	var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

	var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree = static_tree; /* static tree or NULL */
	  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
	  this.extra_base = extra_base; /* base index for extra_bits */
	  this.elems = elems; /* max number of elements in the tree */
	  this.max_length = max_length; /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree; /* the dynamic tree */
	  this.max_code = 0; /* largest code with non zero frequency */
	  this.stat_desc = stat_desc; /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	  //    put_byte(s, (uch)((w) & 0xff));
	  //    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc) {
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	  var tree = desc.dyn_tree;
	  var max_code = desc.max_code;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var extra = desc.stat_desc.extra_bits;
	  var base = desc.stat_desc.extra_base;
	  var max_length = desc.stat_desc.max_length;
	  var h; /* heap index */
	  var n, m; /* iterate over the tree elements */
	  var bits; /* bit length */
	  var xbits; /* extra bits */
	  var f; /* frequency */
	  var overflow = 0; /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1] /*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) {
	      continue;
	    } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2] /*.Freq*/ ;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) {
	    return;
	  }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) {
	      bits--;
	    }
	    s.bl_count[bits]--; /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) {
	        continue;
	      }
	      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
	        tree[m * 2 + 1] /*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count) {
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */

	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0; /* running code value */
	  var bits; /* bit index */
	  var n; /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0; n <= max_code; n++) {
	    var len = tree[n * 2 + 1] /*.Len*/ ;
	    if (len === 0) {
	      continue;
	    }
	    /* Now reverse the bits */
	    tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n; /* iterates over tree elements */
	  var bits; /* bit counter */
	  var length; /* length value */
	  var code; /* code value */
	  var dist; /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	  /*#ifdef NO_INIT_GLOBAL_POINTERS
	    static_l_desc.static_tree = static_ltree;
	    static_l_desc.extra_bits = extra_lbits;
	    static_d_desc.static_tree = static_dtree;
	    static_d_desc.extra_bits = extra_dbits;
	    static_bl_desc.extra_bits = extra_blbits;
	  #endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1] /*.Len*/ = 5;
	    static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES; n++) {
	    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < D_CODES; n++) {
	    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < BL_CODES; n++) {
	    s.bl_tree[n * 2] /*.Freq*/ = 0;
	  }

	  s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s) {
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header) {
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */

	  bi_windup(s); /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	  //  while (len--) {
	  //    put_byte(s, *buf++);
	  //  }
	  arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
	    (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1; /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) {
	      break;
	    }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist; /* distance of matched string */
	  var lc; /* match length or unmatched char (if dist == 0) */
	  var lx = 0; /* running index in l_buf */
	  var code; /* the code to send */
	  var extra; /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra); /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree); /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra); /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree = desc.dyn_tree;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems = desc.stat_desc.elems;
	  var n, m; /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node; /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2] /*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1] /*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2] /*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
	    pqdownheap(s, tree, n);
	  }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems; /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1 /*SMALLEST*/ ];
	    s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1 /*SMALLEST*/ );
	    /***/

	    m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1 /*SMALLEST*/ ] = node++;
	    pqdownheap(s, tree, 1 /*SMALLEST*/ );

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */

	  var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2] /*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) {
	        s.bl_tree[curlen * 2] /*.Freq*/ ++;
	      }
	      s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */

	  var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */

	  /* tree[max_code+1].Len = -1; */
	  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do {
	        send_code(s, curlen, s.bl_tree);
	      } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex; /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank; /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1, 5);
	  send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
	    s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s) {

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
	  var max_blindex = 0; /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) {
	      opt_lenb = static_lenb;
	    }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2] /*.Freq*/ ++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--; /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/ ++;
	    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
	  }

	  // (!) This block is disabled in zlib defailts,
	  // don't enable it for binary compatibility

	  //#ifdef TRUNCATE_BLOCK
	  //  /* Try to guess if it is profitable to stop the current block here */
	  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	  //    /* Compute an upper bound for the compressed length */
	  //    out_length = s.last_lit*8;
	  //    in_length = s.strstart - s.block_start;
	  //
	  //    for (dcode = 0; dcode < D_CODES; dcode++) {
	  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	  //    }
	  //    out_length >>>= 3;
	  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	  //    //       s->last_lit, in_length, out_length,
	  //    //       100L - out_length*100L/in_length));
	  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	  //      return true;
	  //    }
	  //  }
	  //#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH = 3;
	var Z_FINISH = 4;
	var Z_BLOCK = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK = 0;
	var Z_STREAM_END = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR = -2;
	var Z_DATA_ERROR = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED = 1;
	var Z_HUFFMAN_ONLY = 2;
	var Z_RLE = 3;
	var Z_FIXED$1 = 4;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN$1 = 2;


	/* The deflate compression method */
	var Z_DEFLATED = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;


	var LENGTH_CODES$1 = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS$1 = 256;
	/* number of literal bytes 0..255 */
	var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES$1 = 30;
	/* number of distance codes */
	var BL_CODES$1 = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
	/* maximum heap size */
	var MAX_BITS$1 = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH$1 = 3;
	var MAX_MATCH$1 = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero$1(buf) {
	  var len = buf.length;
	  while (--len >= 0) {
	    buf[len] = 0;
	  }
	}


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) {
	    return;
	  }

	  arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	  //  put_byte(s, (Byte)(b >> 8));
	  //  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) {
	    len = size;
	  }
	  if (len === 0) {
	    return 0;
	  }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  } else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length; /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match; /* matched string */
	  var len; /* length of current match */
	  var best_len = s.prev_length; /* best match length so far */
	  var nice_match = s.nice_match; /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	    s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH$1;
	  var scan_end1 = _win[scan + best_len - 1];
	  var scan_end = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) {
	    nice_match = s.lookahead;
	  }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len] !== scan_end ||
	      _win[match + best_len - 1] !== scan_end1 ||
	      _win[match] !== _win[scan] ||
	      _win[++match] !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	      scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH$1 - (strend - scan);
	    scan = strend - MAX_MATCH$1;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1 = _win[scan + best_len - 1];
	      scan_end = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH$1) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	      //#if MIN_MATCH != 3
	      //        Call update_hash() MIN_MATCH-3 more times
	      //#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH$1 - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH$1) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	  //  if (s.high_water < s.window_size) {
	  //    var curr = s.strstart + s.lookahead;
	  //    var init = 0;
	  //
	  //    if (s.high_water < curr) {
	  //      /* Previous high water mark below current data -- zero WIN_INIT
	  //       * bytes or up to end of window, whichever is less.
	  //       */
	  //      init = s.window_size - curr;
	  //      if (init > WIN_INIT)
	  //        init = WIN_INIT;
	  //      zmemzero(s->window + curr, (unsigned)init);
	  //      s->high_water = curr + init;
	  //    }
	  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
	  //      /* High water mark at or above current data, but below current data
	  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	  //       * to end of window, whichever is less.
	  //       */
	  //      init = (ulg)curr + WIN_INIT - s->high_water;
	  //      if (init > s->window_size - s->high_water)
	  //        init = s->window_size - s->high_water;
	  //      zmemzero(s->window + s->high_water, (unsigned)init);
	  //      s->high_water += init;
	  //    }
	  //  }
	  //
	  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	  //    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	      //        s.block_start >= s.w_size)) {
	      //        throw  new Error("slide too late");
	      //      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	    //    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head; /* head of the hash chain */
	  var bflush; /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/ ;
	    if (s.lookahead >= MIN_MATCH$1) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH$1) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	        //#if MIN_MATCH != 3
	        //                Call UPDATE_HASH() MIN_MATCH-3 more times
	        //#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head; /* head of hash chain */
	  var bflush; /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/ ;
	    if (s.lookahead >= MIN_MATCH$1) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH$1 - 1;

	    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
	      s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	        (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH$1 - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH$1 - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush; /* set if current block must be flushed */
	  var prev; /* byte at distance one to match */
	  var scan, strend; /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH$1) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH$1;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          prev === _win[++scan] && prev === _win[++scan] &&
	          scan < strend);
	        s.match_length = MAX_MATCH$1 - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH$1) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH$1);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = _tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush; /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break; /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = _tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast), /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast), /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow), /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow), /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow), /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero$1(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null; /* pointer back to this zlib stream */
	  this.status = 0; /* as the name implies */
	  this.pending_buf = null; /* output still pending */
	  this.pending_buf_size = 0; /* size of pending_buf */
	  this.pending_out = 0; /* next pending byte to output to the stream */
	  this.pending = 0; /* nb of bytes in the pending buffer */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null; /* gzip header information to write */
	  this.gzindex = 0; /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1; /* value of flush param for previous deflate call */

	  this.w_size = 0; /* LZ77 window size (32K by default) */
	  this.w_bits = 0; /* log2(w_size)  (8..16) */
	  this.w_mask = 0; /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null; /* Heads of the hash chains or NIL. */

	  this.ins_h = 0; /* hash index of string to be inserted */
	  this.hash_size = 0; /* number of elements in hash table */
	  this.hash_bits = 0; /* log2(hash_size) */
	  this.hash_mask = 0; /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0; /* length of best match */
	  this.prev_match = 0; /* previous match */
	  this.match_available = 0; /* set if previous match exists */
	  this.strstart = 0; /* start of string to insert */
	  this.match_start = 0; /* start of matching string */
	  this.lookahead = 0; /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0; /* compression level (1..9) */
	  this.strategy = 0; /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	  /* used by c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree = new Buf16(HEAP_SIZE$1 * 2);
	  this.dyn_dtree = new Buf16((2 * D_CODES$1 + 1) * 2);
	  this.bl_tree = new Buf16((2 * BL_CODES$1 + 1) * 2);
	  zero$1(this.dyn_ltree);
	  zero$1(this.dyn_dtree);
	  zero$1(this.bl_tree);

	  this.l_desc = null; /* desc. for literal tree */
	  this.d_desc = null; /* desc. for distance tree */
	  this.bl_desc = null; /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new Buf16(MAX_BITS$1 + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new Buf16(2 * L_CODES$1 + 1); /* heap used to build the Huffman trees */
	  zero$1(this.heap);

	  this.heap_len = 0; /* number of elements in the heap */
	  this.heap_max = 0; /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all
	   */

	  this.depth = new Buf16(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];
	  zero$1(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0; /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0; /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0; /* bit length of current block with optimal trees */
	  this.static_len = 0; /* bit length of current block with static trees */
	  this.matches = 0; /* number of string matches in current block */
	  this.insert = 0; /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN$1;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0 // crc32(0, Z_NULL, 0)
	    :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  _tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  } else if (windowBits > 15) {
	    wrap = 2; /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED$1) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);

	  s.window = new Buf8(s.w_size * 2);
	  s.head = new Buf16(s.hash_size);
	  s.prev = new Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	    (!strm.input && strm.avail_in !== 0) ||
	    (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {
	    if (s.wrap === 2) {
	      // GZIP header
	      strm.adler = 0; //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	          (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	            4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      } else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	          (s.gzhead.hcrc ? 2 : 0) +
	          (!s.gzhead.extra ? 0 : 4) +
	          (!s.gzhead.name ? 0 : 8) +
	          (!s.gzhead.comment ? 0 : 16)
	        );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	          (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	            4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    } else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) {
	        header |= PRESET_DICT;
	      }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	  //#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    } else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    } else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment /* != Z_NULL*/ ) {
	      beg = s.pending; /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    } else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    } else {
	      s.status = BUSY_STATE;
	    }
	  }
	  //#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        _tr_align(s);
	      } else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        _tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/
	          /* forget history */
	          zero$1(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) {
	    return Z_OK;
	  }
	  if (s.wrap <= 0) {
	    return Z_STREAM_END;
	  }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  } else {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) {
	    s.wrap = -s.wrap;
	  }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	}

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
	  var bits = opts.bits;
	  //here = opts.here; /* table entry for duplication */

	  var len = 0; /* a code's length in bits */
	  var sym = 0; /* index of code symbols */
	  var min = 0,
	    max = 0; /* minimum and maximum code lengths */
	  var root = 0; /* number of index bits for root table */
	  var curr = 0; /* number of index bits for current table */
	  var drop = 0; /* code bits to drop for sub-table */
	  var left = 0; /* number of prefix codes available */
	  var used = 0; /* code entries in table used */
	  var huff = 0; /* Huffman code */
	  var incr; /* for incrementing code, index */
	  var fill; /* index for replicating entries */
	  var low; /* low bits for current root entry */
	  var mask; /* mask for low root bits */
	  var next; /* next available space in table */
	  var base = null; /* base value table to use */
	  var base_index = 0;
	  //  var shoextra;    /* extra bits table to use */
	  var end; /* use base and extra for symbol > end */
	  var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) {
	      break;
	    }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) { /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0; /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) {
	      break;
	    }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    } /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1; /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work; /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else { /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0; /* starting code */
	  sym = 0; /* starting code symbol */
	  len = min; /* starting code length */
	  next = table_index; /* current table to fill in */
	  curr = root; /* current table index bits */
	  drop = 0; /* current bits to drop from code for index */
	  low = -1; /* trigger new sub-table when len > root */
	  used = 1 << root; /* use root table entries */
	  mask = used - 1; /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    } else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    } else {
	      here_op = 32 + 64; /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill; /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) {
	        break;
	      }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min; /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) {
	          break;
	        }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	}

	var CODES$1 = 0;
	var LENS$1 = 1;
	var DISTS$1 = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH$1 = 4;
	var Z_BLOCK$1 = 5;
	var Z_TREES = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK$1 = 0;
	var Z_STREAM_END$1 = 1;
	var Z_NEED_DICT = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR$1 = -2;
	var Z_DATA_ERROR$1 = -3;
	var Z_MEM_ERROR = -4;
	var Z_BUF_ERROR$1 = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED$1 = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var HEAD = 1; /* i: waiting for magic header */
	var FLAGS = 2; /* i: waiting for method and flags (gzip) */
	var TIME = 3; /* i: waiting for modification time (gzip) */
	var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
	var EXLEN = 5; /* i: waiting for extra length (gzip) */
	var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
	var NAME = 7; /* i: waiting for end of file name (gzip) */
	var COMMENT = 8; /* i: waiting for end of comment (gzip) */
	var HCRC = 9; /* i: waiting for header crc (gzip) */
	var DICTID = 10; /* i: waiting for dictionary check value */
	var DICT = 11; /* waiting for inflateSetDictionary() call */
	var TYPE$1 = 12; /* i: waiting for type bits, including last-flag bit */
	var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
	var STORED = 14; /* i: waiting for stored size (length and complement) */
	var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
	var COPY = 16; /* i/o: waiting for input or output to copy stored block */
	var TABLE = 17; /* i: waiting for dynamic block table lengths */
	var LENLENS = 18; /* i: waiting for code length code lengths */
	var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
	var LEN_ = 20; /* i: same as LEN below, but only first time in */
	var LEN = 21; /* i: waiting for length/lit/eob code */
	var LENEXT = 22; /* i: waiting for length extra bits */
	var DIST = 23; /* i: waiting for distance code */
	var DISTEXT = 24; /* i: waiting for distance extra bits */
	var MATCH = 25; /* o: waiting for output space to copy string */
	var LIT = 26; /* o: waiting for output space to write literal */
	var CHECK = 27; /* i: waiting for 32-bit check value */
	var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
	var DONE = 29; /* finished check, done -- remain here until reset */
	var BAD$1 = 30; /* got a data error -- remain here until reset */
	var MEM = 31; /* got an inflate() memory error -- remain here until reset */
	var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS$1 = 852;
	var ENOUGH_DISTS$1 = 592;


	function zswap32(q) {
	  return (((q >>> 24) & 0xff) +
	    ((q >>> 8) & 0xff00) +
	    ((q & 0xff00) << 8) +
	    ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0; /* current inflate mode */
	  this.last = false; /* true if processing last block */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false; /* true if dictionary provided */
	  this.flags = 0; /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0; /* protected copy of check value */
	  this.total = 0; /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null; /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0; /* log base 2 of requested window size */
	  this.wsize = 0; /* window size or zero if not using window */
	  this.whave = 0; /* valid bytes in the window */
	  this.wnext = 0; /* window write index */
	  this.window = null; /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0; /* input bit accumulator */
	  this.bits = 0; /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0; /* literal or length of data to copy */
	  this.offset = 0; /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0; /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null; /* starting table for length/literal codes */
	  this.distcode = null; /* starting table for distance codes */
	  this.lenbits = 0; /* index bits for lencode */
	  this.distbits = 0; /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0; /* number of code length code lengths */
	  this.nlen = 0; /* number of length code lengths */
	  this.ndist = 0; /* number of distance code lengths */
	  this.have = 0; /* number of code lengths in lens[] */
	  this.next = null; /* next available space in codes[] */

	  this.lens = new Buf16(320); /* temporary storage for code lengths */
	  this.work = new Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
	  this.sane = 0; /* if false, allow invalid distance too far */
	  this.back = 0; /* bits back of last unprocessed length/lit */
	  this.was = 0; /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) { /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null /*Z_NULL*/ ;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new Buf32(ENOUGH_LENS$1);
	  state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS$1);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK$1;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR$1;
	  }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  } else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR$1;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) {
	    return Z_STREAM_ERROR$1;
	  }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null /*Z_NULL*/ ;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK$1) {
	    strm.state = null /*Z_NULL*/ ;
	  }
	  return ret;
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new Buf32(512);
	    distfix = new Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) {
	      state.lens[sym++] = 8;
	    }
	    while (sym < 256) {
	      state.lens[sym++] = 9;
	    }
	    while (sym < 280) {
	      state.lens[sym++] = 7;
	    }
	    while (sym < 288) {
	      state.lens[sym++] = 8;
	    }

	    inflate_table(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, {
	      bits: 9
	    });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) {
	      state.lens[sym++] = 5;
	    }

	    inflate_table(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, {
	      bits: 5
	    });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  } else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    } else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) {
	        state.wnext = 0;
	      }
	      if (state.whave < state.wsize) {
	        state.whave += dist;
	      }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output; // input/output buffers
	  var next; /* next input INDEX */
	  var put; /* next output INDEX */
	  var have, left; /* available input and output */
	  var hold; /* bit buffer */
	  var bits; /* bits in bit buffer */
	  var _in, _out; /* save starting available input and output */
	  var copy; /* number of stored or match bytes to copy */
	  var from; /* where to copy match bytes from */
	  var from_source;
	  var here = 0; /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len; /* length to copy for repeats, bits to drop */
	  var ret; /* return code */
	  var hbuf = new Buf8(4); /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	  if (!strm || !strm.state || !strm.output ||
	    (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR$1;
	  }

	  state = strm.state;
	  if (state.mode === TYPE$1) {
	    state.mode = TYPEDO;
	  } /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK$1;

	  inf_leave: // goto emulation
	    for (;;) {
	      switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
	          state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//

	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0; /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) || /* check if zlib header allowed */
	          (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD$1;
	          break;
	        }
	        if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED$1) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD$1;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f) /*BITS(4)*/ + 8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        } else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD$1;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
	        state.mode = hold & 0x200 ? DICTID : TYPE$1;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED$1) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD$1;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD$1;
	          break;
	        }
	        if (state.head) {
	          state.head.text = ((hold >> 8) & 1);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	        /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          hbuf[2] = (hold >>> 16) & 0xff;
	          hbuf[3] = (hold >>> 24) & 0xff;
	          state.check = crc32(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	        /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = (hold & 0xff);
	          state.head.os = (hold >> 8);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	        /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = (hold >>> 8) & 0xff;
	            state.check = crc32(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        } else if (state.head) {
	          state.head.extra = null /*Z_NULL*/ ;
	        }
	        state.mode = EXTRA;
	        /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more conveniend processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              arraySet(
	                state.head.extra,
	                input,
	                next,
	                // extra field is limited to 65536 bytes
	                // - no need for additional size check
	                copy,
	                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                len
	              );
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) {
	            break inf_leave;
	          }
	        }
	        state.length = 0;
	        state.mode = NAME;
	        /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/ )) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);

	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	        /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/ )) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	        /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = ((state.flags >> 9) & 1);
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE$1;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	        /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
	        state.mode = TYPE$1;
	        /* falls through */
	      case TYPE$1:
	        if (flush === Z_BLOCK$1 || flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = (hold & 0x01) /*BITS(1)*/ ;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//

	        switch ((hold & 0x03) /*BITS(2)*/ ) {
	        case 0:
	          /* stored block */
	          //Tracev((stderr, "inflate:     stored block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = STORED;
	          break;
	        case 1:
	          /* fixed block */
	          fixedtables(state);
	          //Tracev((stderr, "inflate:     fixed codes block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = LEN_; /* decode codes */
	          if (flush === Z_TREES) {
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	            break inf_leave;
	          }
	          break;
	        case 2:
	          /* dynamic block */
	          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	          //        state.last ? " (last)" : ""));
	          state.mode = TABLE;
	          break;
	        case 3:
	          strm.msg = 'invalid block type';
	          state.mode = BAD$1;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD$1;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case COPY_:
	        state.mode = COPY;
	        /* falls through */
	      case COPY:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy > left) {
	            copy = left;
	          }
	          if (copy === 0) {
	            break inf_leave;
	          }
	          //--- zmemcpy(put, next, copy); ---
	          arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE$1;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        //#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD$1;
	          break;
	        }
	        //#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	        /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;

	        opts = {
	          bits: state.lenbits
	        };
	        ret = inflate_table(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;

	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD$1;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	        /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          } else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD$1;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03); //BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            } else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07); //BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            } else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f); //BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD$1;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }

	        /* handle error breaks in while */
	        if (state.mode === BAD$1) {
	          break;
	        }

	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD$1;
	          break;
	        }

	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;

	        opts = {
	          bits: state.lenbits
	        };
	        ret = inflate_table(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;

	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD$1;
	          break;
	        }

	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = {
	          bits: state.distbits
	        };
	        ret = inflate_table(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;

	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD$1;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	        /* falls through */
	      case LEN_:
	        state.mode = LEN;
	        /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inflate_fast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---

	          if (state.mode === TYPE$1) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if (here_bits <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val +
	              ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE$1;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD$1;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	        /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	        /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val +
	              ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD$1;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = (here_op) & 15;
	        state.mode = DISTEXT;
	        /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD$1;
	          break;
	        }
	        //#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	        /* falls through */
	      case MATCH:
	        if (left === 0) {
	          break inf_leave;
	        }
	        copy = _out - left;
	        if (state.offset > copy) { /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD$1;
	              break;
	            }
	            // (!) This block is disabled in zlib defailts,
	            // don't enable it for binary compatibility
	            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	            //          Trace((stderr, "inflate.c too far\n"));
	            //          copy -= state.whave;
	            //          if (copy > state.length) { copy = state.length; }
	            //          if (copy > left) { copy = left; }
	            //          left -= copy;
	            //          state.length -= copy;
	            //          do {
	            //            output[put++] = 0;
	            //          } while (--copy);
	            //          if (state.length === 0) { state.mode = LEN; }
	            //          break;
	            //#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          } else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) {
	            copy = state.length;
	          }
	          from_source = state.window;
	        } else { /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) {
	          copy = left;
	        }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) {
	          state.mode = LEN;
	        }
	        break;
	      case LIT:
	        if (left === 0) {
	          break inf_leave;
	        }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            // Use '|' insdead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	        /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD$1;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	        /* falls through */
	      case DONE:
	        ret = Z_STREAM_END$1;
	        break inf_leave;
	      case BAD$1:
	        ret = Z_DATA_ERROR$1;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	        /* falls through */
	      default:
	        return Z_STREAM_ERROR$1;
	      }
	    }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&
	      (state.mode < CHECK || flush !== Z_FINISH$1))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	    (state.mode === TYPE$1 ? 128 : 0) +
	    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
	    ret = Z_BUF_ERROR$1;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
	    return Z_STREAM_ERROR$1;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK$1;
	}

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/

	// import constants from './constants';


	// zlib modes
	var NONE = 0;
	var DEFLATE = 1;
	var INFLATE = 2;
	var GZIP = 3;
	var GUNZIP = 4;
	var DEFLATERAW = 5;
	var INFLATERAW = 6;
	var UNZIP = 7;
	var Z_NO_FLUSH$1=         0,
	  Z_PARTIAL_FLUSH$1=    1,
	  Z_SYNC_FLUSH=    2,
	  Z_FULL_FLUSH$1=       3,
	  Z_FINISH$2=       4,
	  Z_BLOCK$2=           5,
	  Z_TREES$1=            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK$2=               0,
	  Z_STREAM_END$2=       1,
	  Z_NEED_DICT$1=      2,
	  Z_ERRNO=       -1,
	  Z_STREAM_ERROR$2=   -2,
	  Z_DATA_ERROR$2=    -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR$2=    -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION=         0,
	  Z_BEST_SPEED=             1,
	  Z_BEST_COMPRESSION=       9,
	  Z_DEFAULT_COMPRESSION$1=   -1,


	  Z_FILTERED$1=               1,
	  Z_HUFFMAN_ONLY$1=           2,
	  Z_RLE$1=                    3,
	  Z_FIXED$2=                  4,
	  Z_DEFAULT_STRATEGY=       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY$1=                 0,
	  Z_TEXT$1=                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN$2=                2,

	  /* The deflate compression method */
	  Z_DEFLATED$2=               8;
	function Zlib(mode) {
	  if (mode < DEFLATE || mode > UNZIP)
	    throw new TypeError('Bad argument');

	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}

	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.

	  if (this.mode === GZIP || this.mode === GUNZIP)
	    this.windowBits += 16;

	  if (this.mode === UNZIP)
	    this.windowBits += 32;

	  if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
	    this.windowBits = -this.windowBits;

	  this.strm = new ZStream();
	  var status;
	  switch (this.mode) {
	  case DEFLATE:
	  case GZIP:
	  case DEFLATERAW:
	    status = deflateInit2(
	      this.strm,
	      this.level,
	      Z_DEFLATED$2,
	      this.windowBits,
	      this.memLevel,
	      this.strategy
	    );
	    break;
	  case INFLATE:
	  case GUNZIP:
	  case INFLATERAW:
	  case UNZIP:
	    status  = inflateInit2(
	      this.strm,
	      this.windowBits
	    );
	    break;
	  default:
	    throw new Error('Unknown mode ' + this.mode);
	  }

	  if (status !== Z_OK$2) {
	    this._error(status);
	    return;
	  }

	  this.write_in_progress = false;
	  this.init_done = true;
	};

	Zlib.prototype.params = function() {
	  throw new Error('deflateParams Not supported');
	};

	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error('write before init');

	  if (this.mode === NONE)
	    throw new Error('already finalized');

	  if (this.write_in_progress)
	    throw new Error('write already in progress');

	  if (this.pending_close)
	    throw new Error('close is pending');
	};

	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  this.write_in_progress = true;

	  var self = this;
	  nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);

	    if (self.pending_close)
	      self.close();
	  });

	  return this;
	};

	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}

	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};

	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;

	  if (flush !== Z_NO_FLUSH$1 &&
	      flush !== Z_PARTIAL_FLUSH$1 &&
	      flush !== Z_SYNC_FLUSH &&
	      flush !== Z_FULL_FLUSH$1 &&
	      flush !== Z_FINISH$2 &&
	      flush !== Z_BLOCK$2) {
	    throw new Error('Invalid flush value');
	  }

	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }

	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;

	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  var status;
	  switch (this.mode) {
	  case DEFLATE:
	  case GZIP:
	  case DEFLATERAW:
	    status = deflate(strm, flush);
	    break;
	  case UNZIP:
	  case INFLATE:
	  case GUNZIP:
	  case INFLATERAW:
	    status = inflate(strm, flush);
	    break;
	  default:
	    throw new Error('Unknown mode ' + this.mode);
	  }

	  if (status !== Z_STREAM_END$2 && status !== Z_OK$2) {
	    this._error(status);
	  }

	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};

	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }

	  this.pending_close = false;

	  if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
	    deflateEnd(this.strm);
	  } else {
	    inflateEnd(this.strm);
	  }

	  this.mode = NONE;
	};
	var status;
	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	  case DEFLATE:
	  case DEFLATERAW:
	    status = deflateReset(this.strm);
	    break;
	  case INFLATE:
	  case INFLATERAW:
	    status = inflateReset(this.strm);
	    break;
	  }

	  if (status !== Z_OK$2) {
	    this._error(status);
	  }
	};

	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);

	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};

	var _binding = /*#__PURE__*/Object.freeze({
		__proto__: null,
		NONE: NONE,
		DEFLATE: DEFLATE,
		INFLATE: INFLATE,
		GZIP: GZIP,
		GUNZIP: GUNZIP,
		DEFLATERAW: DEFLATERAW,
		INFLATERAW: INFLATERAW,
		UNZIP: UNZIP,
		Z_NO_FLUSH: Z_NO_FLUSH$1,
		Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH$1,
		Z_SYNC_FLUSH: Z_SYNC_FLUSH,
		Z_FULL_FLUSH: Z_FULL_FLUSH$1,
		Z_FINISH: Z_FINISH$2,
		Z_BLOCK: Z_BLOCK$2,
		Z_TREES: Z_TREES$1,
		Z_OK: Z_OK$2,
		Z_STREAM_END: Z_STREAM_END$2,
		Z_NEED_DICT: Z_NEED_DICT$1,
		Z_ERRNO: Z_ERRNO,
		Z_STREAM_ERROR: Z_STREAM_ERROR$2,
		Z_DATA_ERROR: Z_DATA_ERROR$2,
		Z_BUF_ERROR: Z_BUF_ERROR$2,
		Z_NO_COMPRESSION: Z_NO_COMPRESSION,
		Z_BEST_SPEED: Z_BEST_SPEED,
		Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
		Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
		Z_FILTERED: Z_FILTERED$1,
		Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY$1,
		Z_RLE: Z_RLE$1,
		Z_FIXED: Z_FIXED$2,
		Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
		Z_BINARY: Z_BINARY$1,
		Z_TEXT: Z_TEXT$1,
		Z_UNKNOWN: Z_UNKNOWN$2,
		Z_DEFLATED: Z_DEFLATED$2,
		Zlib: Zlib
	});

	function assert$1 (a, msg) {
	  if (!a) {
	    throw new Error(msg);
	  }
	}
	var binding$1 = {};
	Object.keys(_binding).forEach(function (key) {
	  binding$1[key] = _binding[key];
	});
	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding$1.Z_MIN_WINDOWBITS = 8;
	binding$1.Z_MAX_WINDOWBITS = 15;
	binding$1.Z_DEFAULT_WINDOWBITS = 15;

	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding$1.Z_MIN_CHUNK = 64;
	binding$1.Z_MAX_CHUNK = Infinity;
	binding$1.Z_DEFAULT_CHUNK = (16 * 1024);

	binding$1.Z_MIN_MEMLEVEL = 1;
	binding$1.Z_MAX_MEMLEVEL = 9;
	binding$1.Z_DEFAULT_MEMLEVEL = 8;

	binding$1.Z_MIN_LEVEL = -1;
	binding$1.Z_MAX_LEVEL = 9;
	binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;


	// translation table for return codes.
	var codes = {
	  Z_OK: binding$1.Z_OK,
	  Z_STREAM_END: binding$1.Z_STREAM_END,
	  Z_NEED_DICT: binding$1.Z_NEED_DICT,
	  Z_ERRNO: binding$1.Z_ERRNO,
	  Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
	};

	Object.keys(codes).forEach(function(k) {
	  codes[codes[k]] = k;
	});

	function createDeflate(o) {
	  return new Deflate(o);
	}

	function createInflate(o) {
	  return new Inflate(o);
	}

	function createDeflateRaw(o) {
	  return new DeflateRaw(o);
	}

	function createInflateRaw(o) {
	  return new InflateRaw(o);
	}

	function createGzip(o) {
	  return new Gzip(o);
	}

	function createGunzip(o) {
	  return new Gunzip(o);
	}

	function createUnzip(o) {
	  return new Unzip(o);
	}


	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	function deflate$1(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	}

	function deflateSync(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	}

	function gzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	}

	function gzipSync(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	}

	function deflateRaw(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	}

	function deflateRawSync(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	}

	function unzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	}

	function unzipSync(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	}

	function inflate$1(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	}

	function inflateSync(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	}

	function gunzip(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	}

	function gunzipSync(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	}

	function inflateRaw(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	}

	function inflateRawSync(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	}

	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;

	  engine.on('error', onError);
	  engine.on('end', onEnd);

	  engine.end(buffer);
	  flow();

	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }

	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }

	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}

	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!isBuffer$1(buffer))
	    throw new TypeError('Not a string or buffer');

	  var flushFlag = binding$1.Z_FINISH;

	  return engine._processChunk(buffer, flushFlag);
	}

	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib$1.call(this, opts, binding$1.DEFLATE);
	}

	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib$1.call(this, opts, binding$1.INFLATE);
	}



	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib$1.call(this, opts, binding$1.GZIP);
	}

	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib$1.call(this, opts, binding$1.GUNZIP);
	}



	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib$1.call(this, opts, binding$1.DEFLATERAW);
	}

	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib$1.call(this, opts, binding$1.INFLATERAW);
	}


	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib$1.call(this, opts, binding$1.UNZIP);
	}


	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.

	function Zlib$1(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || binding$1.Z_DEFAULT_CHUNK;

	  Transform.call(this, opts);

	  if (opts.flush) {
	    if (opts.flush !== binding$1.Z_NO_FLUSH &&
	        opts.flush !== binding$1.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding$1.Z_SYNC_FLUSH &&
	        opts.flush !== binding$1.Z_FULL_FLUSH &&
	        opts.flush !== binding$1.Z_FINISH &&
	        opts.flush !== binding$1.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;

	  if (opts.chunkSize) {
	    if (opts.chunkSize < binding$1.Z_MIN_CHUNK ||
	        opts.chunkSize > binding$1.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }

	  if (opts.windowBits) {
	    if (opts.windowBits < binding$1.Z_MIN_WINDOWBITS ||
	        opts.windowBits > binding$1.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }

	  if (opts.level) {
	    if (opts.level < binding$1.Z_MIN_LEVEL ||
	        opts.level > binding$1.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }

	  if (opts.memLevel) {
	    if (opts.memLevel < binding$1.Z_MIN_MEMLEVEL ||
	        opts.memLevel > binding$1.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }

	  if (opts.strategy) {
	    if (opts.strategy != binding$1.Z_FILTERED &&
	        opts.strategy != binding$1.Z_HUFFMAN_ONLY &&
	        opts.strategy != binding$1.Z_RLE &&
	        opts.strategy != binding$1.Z_FIXED &&
	        opts.strategy != binding$1.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }

	  if (opts.dictionary) {
	    if (!isBuffer$1(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }

	  this._binding = new binding$1.Zlib(mode);

	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;

	    var error = new Error(message);
	    error.errno = errno;
	    error.code = binding$1.codes[errno];
	    self.emit('error', error);
	  };

	  var level = binding$1.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;

	  var strategy = binding$1.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;

	  this._binding.init(opts.windowBits || binding$1.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || binding$1.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);

	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;

	  this.once('end', this.close);
	}

	inherits$1(Zlib$1, Transform);

	Zlib$1.prototype.params = function(level, strategy, callback) {
	  if (level < binding$1.Z_MIN_LEVEL ||
	      level > binding$1.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != binding$1.Z_FILTERED &&
	      strategy != binding$1.Z_HUFFMAN_ONLY &&
	      strategy != binding$1.Z_RLE &&
	      strategy != binding$1.Z_FIXED &&
	      strategy != binding$1.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }

	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding$1.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    nextTick(callback);
	  }
	};

	Zlib$1.prototype.reset = function() {
	  return this._binding.reset();
	};

	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib$1.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};

	Zlib$1.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;

	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding$1.Z_FULL_FLUSH;
	  }

	  if (ws.ended) {
	    if (callback)
	      nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};

	Zlib$1.prototype.close = function(callback) {
	  if (callback)
	    nextTick(callback);

	  if (this._closed)
	    return;

	  this._closed = true;

	  this._binding.close();

	  var self = this;
	  nextTick(function() {
	    self.emit('close');
	  });
	};

	Zlib$1.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);

	  if (!chunk === null && !isBuffer$1(chunk))
	    return cb(new Error('invalid input'));

	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding$1.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
	    }
	  }

	  this._processChunk(chunk, flushFlag, cb);
	};

	Zlib$1.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;

	  var self = this;

	  var async = typeof cb === 'function';

	  if (!async) {
	    var buffers = [];
	    var nread = 0;

	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });

	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));

	    if (this._hadError) {
	      throw error;
	    }

	    var buf = Buffer.concat(buffers, nread);
	    this.close();

	    return buf;
	  }

	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len

	  req.buffer = chunk;
	  req.callback = callback;

	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;

	    var have = availOutBefore - availOutAfter;
	    assert$1(have >= 0, 'have should not go down');

	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }

	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }

	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;

	      if (!async)
	        return true;

	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }

	    if (!async)
	      return false;

	    // finished with the chunk.
	    cb();
	  }
	};

	inherits$1(Deflate, Zlib$1);
	inherits$1(Inflate, Zlib$1);
	inherits$1(Gzip, Zlib$1);
	inherits$1(Gunzip, Zlib$1);
	inherits$1(DeflateRaw, Zlib$1);
	inherits$1(InflateRaw, Zlib$1);
	inherits$1(Unzip, Zlib$1);
	var zlib = {
	  codes: codes,
	  createDeflate: createDeflate,
	  createInflate: createInflate,
	  createDeflateRaw: createDeflateRaw,
	  createInflateRaw: createInflateRaw,
	  createGzip: createGzip,
	  createGunzip: createGunzip,
	  createUnzip: createUnzip,
	  deflate: deflate$1,
	  deflateSync: deflateSync,
	  gzip: gzip,
	  gzipSync: gzipSync,
	  deflateRaw: deflateRaw,
	  deflateRawSync: deflateRawSync,
	  unzip: unzip,
	  unzipSync: unzipSync,
	  inflate: inflate$1,
	  inflateSync: inflateSync,
	  gunzip: gunzip,
	  gunzipSync: gunzipSync,
	  inflateRaw: inflateRaw,
	  inflateRawSync: inflateRawSync,
	  Deflate: Deflate,
	  Inflate: Inflate,
	  Gzip: Gzip,
	  Gunzip: Gunzip,
	  DeflateRaw: DeflateRaw,
	  InflateRaw: InflateRaw,
	  Unzip: Unzip,
	  Zlib: Zlib$1
	};

	var name = "axios";
	var version$1 = "0.18.1";
	var description = "Promise based HTTP client for the browser and node.js";
	var main = "index.js";
	var scripts = {
		test: "grunt test && bundlesize",
		start: "node ./sandbox/server.js",
		build: "NODE_ENV=production grunt build",
		preversion: "npm test",
		version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
		postversion: "git push && git push --tags",
		examples: "node ./examples/server.js",
		coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"
	};
	var repository = {
		type: "git",
		url: "https://github.com/axios/axios.git"
	};
	var keywords = [
		"xhr",
		"http",
		"ajax",
		"promise",
		"node"
	];
	var author = "Matt Zabriskie";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/axios/axios/issues"
	};
	var homepage = "https://github.com/axios/axios";
	var devDependencies = {
		bundlesize: "^0.5.7",
		coveralls: "^2.11.9",
		"es6-promise": "^4.0.5",
		grunt: "^1.0.1",
		"grunt-banner": "^0.6.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-clean": "^1.0.0",
		"grunt-contrib-nodeunit": "^1.0.0",
		"grunt-contrib-watch": "^1.0.0",
		"grunt-eslint": "^19.0.0",
		"grunt-karma": "^2.0.0",
		"grunt-ts": "^6.0.0-beta.3",
		"grunt-webpack": "^1.0.18",
		"istanbul-instrumenter-loader": "^1.0.0",
		"jasmine-core": "^2.4.1",
		karma: "^1.3.0",
		"karma-chrome-launcher": "^2.0.0",
		"karma-coverage": "^1.0.0",
		"karma-firefox-launcher": "^1.0.0",
		"karma-jasmine": "^1.0.2",
		"karma-jasmine-ajax": "^0.1.13",
		"karma-opera-launcher": "^1.0.0",
		"karma-safari-launcher": "^1.0.0",
		"karma-sauce-launcher": "^1.1.0",
		"karma-sinon": "^1.0.5",
		"karma-sourcemap-loader": "^0.3.7",
		"karma-webpack": "^1.7.0",
		"load-grunt-tasks": "^3.5.2",
		minimist: "^1.2.0",
		sinon: "^1.17.4",
		webpack: "^1.13.1",
		"webpack-dev-server": "^1.14.1",
		"url-search-params": "^0.6.1",
		typescript: "^2.0.3"
	};
	var browser$2 = {
		"./lib/adapters/http.js": "./lib/adapters/xhr.js"
	};
	var typings = "./index.d.ts";
	var dependencies = {
		"follow-redirects": "1.5.10",
		"is-buffer": "^2.0.2"
	};
	var bundlesize = [
		{
			path: "./dist/axios.min.js",
			threshold: "5kB"
		}
	];
	var _package = {
		name: name,
		version: version$1,
		description: description,
		main: main,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		browser: browser$2,
		typings: typings,
		dependencies: dependencies,
		bundlesize: bundlesize
	};

	var _package$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name,
		version: version$1,
		description: description,
		main: main,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		browser: browser$2,
		typings: typings,
		dependencies: dependencies,
		bundlesize: bundlesize,
		'default': _package
	});

	var pkg = getCjsExportFromNamespace(_package$1);

	var httpFollow = followRedirects.http;
	var httpsFollow = followRedirects.https;






	/*eslint consistent-return:0*/
	var http_1 = function httpAdapter(config) {
	  return new Promise(function dispatchHttpRequest(resolve, reject) {
	    var data = config.data;
	    var headers = config.headers;
	    var timer;

	    // Set User-Agent (required by some servers)
	    // Only set header if it hasn't been set in config
	    // See https://github.com/axios/axios/issues/69
	    if (!headers['User-Agent'] && !headers['user-agent']) {
	      headers['User-Agent'] = 'axios/' + pkg.version;
	    }

	    if (data && !utils.isStream(data)) {
	      if (isBuffer$1(data)) ; else if (utils.isArrayBuffer(data)) {
	        data = new Buffer(new Uint8Array(data));
	      } else if (utils.isString(data)) {
	        data = new Buffer(data, 'utf-8');
	      } else {
	        return reject(createError(
	          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
	          config
	        ));
	      }

	      // Add Content-Length header if data exists
	      headers['Content-Length'] = data.length;
	    }

	    // HTTP basic authentication
	    var auth = undefined;
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      auth = username + ':' + password;
	    }

	    // Parse url
	    var parsed = url.parse(config.url);
	    var protocol = parsed.protocol || 'http:';

	    if (!auth && parsed.auth) {
	      var urlAuth = parsed.auth.split(':');
	      var urlUsername = urlAuth[0] || '';
	      var urlPassword = urlAuth[1] || '';
	      auth = urlUsername + ':' + urlPassword;
	    }

	    if (auth) {
	      delete headers.Authorization;
	    }

	    var isHttps = protocol === 'https:';
	    var agent = isHttps ? config.httpsAgent : config.httpAgent;

	    var options = {
	      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
	      method: config.method,
	      headers: headers,
	      agent: agent,
	      auth: auth
	    };

	    if (config.socketPath) {
	      options.socketPath = config.socketPath;
	    } else {
	      options.hostname = parsed.hostname;
	      options.port = parsed.port;
	    }

	    var proxy = config.proxy;
	    if (!proxy && proxy !== false) {
	      var proxyEnv = protocol.slice(0, -1) + '_proxy';
	      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
	      if (proxyUrl) {
	        var parsedProxyUrl = url.parse(proxyUrl);
	        proxy = {
	          host: parsedProxyUrl.hostname,
	          port: parsedProxyUrl.port
	        };

	        if (parsedProxyUrl.auth) {
	          var proxyUrlAuth = parsedProxyUrl.auth.split(':');
	          proxy.auth = {
	            username: proxyUrlAuth[0],
	            password: proxyUrlAuth[1]
	          };
	        }
	      }
	    }

	    if (proxy) {
	      options.hostname = proxy.host;
	      options.host = proxy.host;
	      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
	      options.port = proxy.port;
	      options.path = protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path;

	      // Basic proxy authorization
	      if (proxy.auth) {
	        var base64 = new Buffer(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
	        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
	      }
	    }

	    var transport;
	    if (config.transport) {
	      transport = config.transport;
	    } else if (config.maxRedirects === 0) {
	      transport = isHttps ? http : http;
	    } else {
	      if (config.maxRedirects) {
	        options.maxRedirects = config.maxRedirects;
	      }
	      transport = isHttps ? httpsFollow : httpFollow;
	    }

	    if (config.maxContentLength && config.maxContentLength > -1) {
	      options.maxBodyLength = config.maxContentLength;
	    }

	    // Create the request
	    var req = transport.request(options, function handleResponse(res) {
	      if (req.aborted) return;

	      // Response has been received so kill timer that handles request timeout
	      clearTimeout(timer);
	      timer = null;

	      // uncompress the response body transparently if required
	      var stream = res;
	      switch (res.headers['content-encoding']) {
	      /*eslint default-case:0*/
	      case 'gzip':
	      case 'compress':
	      case 'deflate':
	        // add the unzipper to the body stream processing pipeline
	        stream = stream.pipe(zlib.createUnzip());

	        // remove the content-encoding in order to not confuse downstream operations
	        delete res.headers['content-encoding'];
	        break;
	      }

	      // return the last request in case of redirects
	      var lastRequest = res.req || req;

	      var response = {
	        status: res.statusCode,
	        statusText: res.statusMessage,
	        headers: res.headers,
	        config: config,
	        request: lastRequest
	      };

	      if (config.responseType === 'stream') {
	        response.data = stream;
	        settle(resolve, reject, response);
	      } else {
	        var responseBuffer = [];
	        stream.on('data', function handleStreamData(chunk) {
	          responseBuffer.push(chunk);

	          // make sure the content length is not over the maxContentLength if specified
	          if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
	            stream.destroy();
	            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
	              config, null, lastRequest));
	          }
	        });

	        stream.on('error', function handleStreamError(err) {
	          if (req.aborted) return;
	          reject(enhanceError(err, config, null, lastRequest));
	        });

	        stream.on('end', function handleStreamEnd() {
	          var responseData = Buffer.concat(responseBuffer);
	          if (config.responseType !== 'arraybuffer') {
	            responseData = responseData.toString('utf8');
	          }

	          response.data = responseData;
	          settle(resolve, reject, response);
	        });
	      }
	    });

	    // Handle errors
	    req.on('error', function handleRequestError(err) {
	      if (req.aborted) return;
	      reject(enhanceError(err, config, null, req));
	    });

	    // Handle request timeout
	    if (config.timeout && !timer) {
	      timer = setTimeout(function handleRequestTimeout() {
	        req.abort();
	        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
	      }, config.timeout);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (req.aborted) return;

	        req.abort();
	        reject(cancel);
	      });
	    }

	    // Send the request
	    if (utils.isStream(data)) {
	      data.pipe(req);
	    } else {
	      req.end(data);
	    }
	  });
	};

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = xhr;
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = http_1;
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	var defaults_1 = defaults;

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	var transformData = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};

	var isCancel = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	var isAbsoluteURL = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	var combineURLs = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	var dispatchRequest = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults_1.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager_1(),
	    response: new InterceptorManager_1()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults_1, {method: 'get'}, this.defaults, config);
	  config.method = config.method.toLowerCase();

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	var Axios_1 = Axios;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	var Cancel_1 = Cancel;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel_1(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios_1(defaultConfig);
	  var instance = bind(Axios_1.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios_1.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults_1);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios_1;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults_1, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = Cancel_1;
	axios.CancelToken = CancelToken_1;
	axios.isCancel = isCancel;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = spread;

	var axios_1 = axios;

	// Allow use of default import syntax in TypeScript
	var default_1 = axios;
	axios_1.default = default_1;

	var axios$1 = axios_1;

	var scheduler_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	var enableSchedulerDebugging = false;
	var enableProfiling = true;

	var requestHostCallback;

	var requestHostTimeout;
	var cancelHostTimeout;
	var shouldYieldToHost;
	var requestPaint;



	if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' || // Check if MessageChannel is supported, too.
	typeof MessageChannel !== 'function') {
	  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
	  // fallback to a naive implementation.
	  var _callback = null;
	  var _timeoutID = null;

	  var _flushCallback = function () {
	    if (_callback !== null) {
	      try {
	        var currentTime = exports.unstable_now();
	        var hasRemainingTime = true;

	        _callback(hasRemainingTime, currentTime);

	        _callback = null;
	      } catch (e) {
	        setTimeout(_flushCallback, 0);
	        throw e;
	      }
	    }
	  };

	  var initialTime = Date.now();

	  exports.unstable_now = function () {
	    return Date.now() - initialTime;
	  };

	  requestHostCallback = function (cb) {
	    if (_callback !== null) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, 0);
	    }
	  };

	  requestHostTimeout = function (cb, ms) {
	    _timeoutID = setTimeout(cb, ms);
	  };

	  cancelHostTimeout = function () {
	    clearTimeout(_timeoutID);
	  };

	  shouldYieldToHost = function () {
	    return false;
	  };

	  requestPaint = exports.unstable_forceFrameRate = function () {};
	} else {
	  // Capture local references to native APIs, in case a polyfill overrides them.
	  var performance = window.performance;
	  var _Date = window.Date;
	  var _setTimeout = window.setTimeout;
	  var _clearTimeout = window.clearTimeout;

	  if (typeof console !== 'undefined') {
	    // TODO: Scheduler no longer requires these methods to be polyfilled. But
	    // maybe we want to continue warning if they don't exist, to preserve the
	    // option to rely on it in the future?
	    var requestAnimationFrame = window.requestAnimationFrame;
	    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

	    if (typeof requestAnimationFrame !== 'function') {
	      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }

	    if (typeof cancelAnimationFrame !== 'function') {
	      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  if (typeof performance === 'object' && typeof performance.now === 'function') {
	    exports.unstable_now = function () {
	      return performance.now();
	    };
	  } else {
	    var _initialTime = _Date.now();

	    exports.unstable_now = function () {
	      return _Date.now() - _initialTime;
	    };
	  }

	  var isMessageLoopRunning = false;
	  var scheduledHostCallback = null;
	  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	  // thread, like user events. By default, it yields multiple times per frame.
	  // It does not attempt to align with frame boundaries, since most tasks don't
	  // need to be frame aligned; for those that do, use requestAnimationFrame.

	  var yieldInterval = 5;
	  var deadline = 0; // TODO: Make this configurable

	  {
	    // `isInputPending` is not available. Since we have no way of knowing if
	    // there's pending input, always yield at the end of the frame.
	    shouldYieldToHost = function () {
	      return exports.unstable_now() >= deadline;
	    }; // Since we yield every frame regardless, `requestPaint` has no effect.


	    requestPaint = function () {};
	  }

	  exports.unstable_forceFrameRate = function (fps) {
	    if (fps < 0 || fps > 125) {
	      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
	      return;
	    }

	    if (fps > 0) {
	      yieldInterval = Math.floor(1000 / fps);
	    } else {
	      // reset the framerate
	      yieldInterval = 5;
	    }
	  };

	  var performWorkUntilDeadline = function () {
	    if (scheduledHostCallback !== null) {
	      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
	      // cycle. This means there's always time remaining at the beginning of
	      // the message event.

	      deadline = currentTime + yieldInterval;
	      var hasTimeRemaining = true;

	      try {
	        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

	        if (!hasMoreWork) {
	          isMessageLoopRunning = false;
	          scheduledHostCallback = null;
	        } else {
	          // If there's more work, schedule the next message event at the end
	          // of the preceding one.
	          port.postMessage(null);
	        }
	      } catch (error) {
	        // If a scheduler task throws, exit the current browser task so the
	        // error can be observed.
	        port.postMessage(null);
	        throw error;
	      }
	    } else {
	      isMessageLoopRunning = false;
	    } // Yielding to the browser will give it a chance to paint, so we can
	  };

	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = performWorkUntilDeadline;

	  requestHostCallback = function (callback) {
	    scheduledHostCallback = callback;

	    if (!isMessageLoopRunning) {
	      isMessageLoopRunning = true;
	      port.postMessage(null);
	    }
	  };

	  requestHostTimeout = function (callback, ms) {
	    taskTimeoutID = _setTimeout(function () {
	      callback(exports.unstable_now());
	    }, ms);
	  };

	  cancelHostTimeout = function () {
	    _clearTimeout(taskTimeoutID);

	    taskTimeoutID = -1;
	  };
	}

	function push(heap, node) {
	  var index = heap.length;
	  heap.push(node);
	  siftUp(heap, node, index);
	}
	function peek(heap) {
	  var first = heap[0];
	  return first === undefined ? null : first;
	}
	function pop(heap) {
	  var first = heap[0];

	  if (first !== undefined) {
	    var last = heap.pop();

	    if (last !== first) {
	      heap[0] = last;
	      siftDown(heap, last, 0);
	    }

	    return first;
	  } else {
	    return null;
	  }
	}

	function siftUp(heap, node, i) {
	  var index = i;

	  while (true) {
	    var parentIndex = Math.floor((index - 1) / 2);
	    var parent = heap[parentIndex];

	    if (parent !== undefined && compare(parent, node) > 0) {
	      // The parent is larger. Swap positions.
	      heap[parentIndex] = node;
	      heap[index] = parent;
	      index = parentIndex;
	    } else {
	      // The parent is smaller. Exit.
	      return;
	    }
	  }
	}

	function siftDown(heap, node, i) {
	  var index = i;
	  var length = heap.length;

	  while (index < length) {
	    var leftIndex = (index + 1) * 2 - 1;
	    var left = heap[leftIndex];
	    var rightIndex = leftIndex + 1;
	    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	    if (left !== undefined && compare(left, node) < 0) {
	      if (right !== undefined && compare(right, left) < 0) {
	        heap[index] = right;
	        heap[rightIndex] = node;
	        index = rightIndex;
	      } else {
	        heap[index] = left;
	        heap[leftIndex] = node;
	        index = leftIndex;
	      }
	    } else if (right !== undefined && compare(right, node) < 0) {
	      heap[index] = right;
	      heap[rightIndex] = node;
	      index = rightIndex;
	    } else {
	      // Neither child is smaller. Exit.
	      return;
	    }
	  }
	}

	function compare(a, b) {
	  // Compare sort index first, then task id.
	  var diff = a.sortIndex - b.sortIndex;
	  return diff !== 0 ? diff : a.id - b.id;
	}

	// TODO: Use symbols?
	var NoPriority = 0;
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	var runIdCounter = 0;
	var mainThreadIdCounter = 0;
	var profilingStateSize = 4;
	var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
	typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
	typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
	;
	var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

	var PRIORITY = 0;
	var CURRENT_TASK_ID = 1;
	var CURRENT_RUN_ID = 2;
	var QUEUE_SIZE = 3;

	{
	  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
	  // array might include canceled tasks.

	  profilingState[QUEUE_SIZE] = 0;
	  profilingState[CURRENT_TASK_ID] = 0;
	} // Bytes per element is 4


	var INITIAL_EVENT_LOG_SIZE = 131072;
	var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

	var eventLogSize = 0;
	var eventLogBuffer = null;
	var eventLog = null;
	var eventLogIndex = 0;
	var TaskStartEvent = 1;
	var TaskCompleteEvent = 2;
	var TaskErrorEvent = 3;
	var TaskCancelEvent = 4;
	var TaskRunEvent = 5;
	var TaskYieldEvent = 6;
	var SchedulerSuspendEvent = 7;
	var SchedulerResumeEvent = 8;

	function logEvent(entries) {
	  if (eventLog !== null) {
	    var offset = eventLogIndex;
	    eventLogIndex += entries.length;

	    if (eventLogIndex + 1 > eventLogSize) {
	      eventLogSize *= 2;

	      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
	        console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
	        stopLoggingProfilingEvents();
	        return;
	      }

	      var newEventLog = new Int32Array(eventLogSize * 4);
	      newEventLog.set(eventLog);
	      eventLogBuffer = newEventLog.buffer;
	      eventLog = newEventLog;
	    }

	    eventLog.set(entries, offset);
	  }
	}

	function startLoggingProfilingEvents() {
	  eventLogSize = INITIAL_EVENT_LOG_SIZE;
	  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
	  eventLog = new Int32Array(eventLogBuffer);
	  eventLogIndex = 0;
	}
	function stopLoggingProfilingEvents() {
	  var buffer = eventLogBuffer;
	  eventLogSize = 0;
	  eventLogBuffer = null;
	  eventLog = null;
	  eventLogIndex = 0;
	  return buffer;
	}
	function markTaskStart(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]++;

	    if (eventLog !== null) {
	      // performance.now returns a float, representing milliseconds. When the
	      // event is logged, it's coerced to an int. Convert to microseconds to
	      // maintain extra degrees of precision.
	      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
	    }
	  }
	}
	function markTaskCompleted(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskCanceled(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCancelEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskErrored(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskErrorEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskRun(task, ms) {
	  {
	    runIdCounter++;
	    profilingState[PRIORITY] = task.priorityLevel;
	    profilingState[CURRENT_TASK_ID] = task.id;
	    profilingState[CURRENT_RUN_ID] = runIdCounter;

	    if (eventLog !== null) {
	      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markTaskYield(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[CURRENT_RUN_ID] = 0;

	    if (eventLog !== null) {
	      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markSchedulerSuspended(ms) {
	  {
	    mainThreadIdCounter++;

	    if (eventLog !== null) {
	      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}
	function markSchedulerUnsuspended(ms) {
	  {
	    if (eventLog !== null) {
	      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}

	/* eslint-disable no-var */
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111

	var maxSigned31BitInt = 1073741823; // Times out immediately

	var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

	var taskQueue = [];
	var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
	var currentTask = null;
	var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

	var isPerformingWork = false;
	var isHostCallbackScheduled = false;
	var isHostTimeoutScheduled = false;

	function advanceTimers(currentTime) {
	  // Check for tasks that are no longer delayed and add them to the queue.
	  var timer = peek(timerQueue);

	  while (timer !== null) {
	    if (timer.callback === null) {
	      // Timer was cancelled.
	      pop(timerQueue);
	    } else if (timer.startTime <= currentTime) {
	      // Timer fired. Transfer to the task queue.
	      pop(timerQueue);
	      timer.sortIndex = timer.expirationTime;
	      push(taskQueue, timer);

	      {
	        markTaskStart(timer, currentTime);
	        timer.isQueued = true;
	      }
	    } else {
	      // Remaining timers are pending.
	      return;
	    }

	    timer = peek(timerQueue);
	  }
	}

	function handleTimeout(currentTime) {
	  isHostTimeoutScheduled = false;
	  advanceTimers(currentTime);

	  if (!isHostCallbackScheduled) {
	    if (peek(taskQueue) !== null) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    } else {
	      var firstTimer = peek(timerQueue);

	      if (firstTimer !== null) {
	        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	      }
	    }
	  }
	}

	function flushWork(hasTimeRemaining, initialTime) {
	  {
	    markSchedulerUnsuspended(initialTime);
	  } // We'll need a host callback the next time work is scheduled.


	  isHostCallbackScheduled = false;

	  if (isHostTimeoutScheduled) {
	    // We scheduled a timeout but it's no longer needed. Cancel it.
	    isHostTimeoutScheduled = false;
	    cancelHostTimeout();
	  }

	  isPerformingWork = true;
	  var previousPriorityLevel = currentPriorityLevel;

	  try {
	    if (enableProfiling) {
	      try {
	        return workLoop(hasTimeRemaining, initialTime);
	      } catch (error) {
	        if (currentTask !== null) {
	          var currentTime = exports.unstable_now();
	          markTaskErrored(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        throw error;
	      }
	    } else {
	      // No catch in prod codepath.
	      return workLoop(hasTimeRemaining, initialTime);
	    }
	  } finally {
	    currentTask = null;
	    currentPriorityLevel = previousPriorityLevel;
	    isPerformingWork = false;

	    {
	      var _currentTime = exports.unstable_now();

	      markSchedulerSuspended(_currentTime);
	    }
	  }
	}

	function workLoop(hasTimeRemaining, initialTime) {
	  var currentTime = initialTime;
	  advanceTimers(currentTime);
	  currentTask = peek(taskQueue);

	  while (currentTask !== null && !(enableSchedulerDebugging )) {
	    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	      // This currentTask hasn't expired, and we've reached the deadline.
	      break;
	    }

	    var callback = currentTask.callback;

	    if (callback !== null) {
	      currentTask.callback = null;
	      currentPriorityLevel = currentTask.priorityLevel;
	      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
	      markTaskRun(currentTask, currentTime);
	      var continuationCallback = callback(didUserCallbackTimeout);
	      currentTime = exports.unstable_now();

	      if (typeof continuationCallback === 'function') {
	        currentTask.callback = continuationCallback;
	        markTaskYield(currentTask, currentTime);
	      } else {
	        {
	          markTaskCompleted(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        if (currentTask === peek(taskQueue)) {
	          pop(taskQueue);
	        }
	      }

	      advanceTimers(currentTime);
	    } else {
	      pop(taskQueue);
	    }

	    currentTask = peek(taskQueue);
	  } // Return whether there's additional work


	  if (currentTask !== null) {
	    return true;
	  } else {
	    var firstTimer = peek(timerQueue);

	    if (firstTimer !== null) {
	      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	    }

	    return false;
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;

	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel;

	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;

	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    currentPriorityLevel = parentPriorityLevel;

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	    }
	  };
	}

	function timeoutForPriorityLevel(priorityLevel) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	      return IMMEDIATE_PRIORITY_TIMEOUT;

	    case UserBlockingPriority:
	      return USER_BLOCKING_PRIORITY;

	    case IdlePriority:
	      return IDLE_PRIORITY;

	    case LowPriority:
	      return LOW_PRIORITY_TIMEOUT;

	    case NormalPriority:
	    default:
	      return NORMAL_PRIORITY_TIMEOUT;
	  }
	}

	function unstable_scheduleCallback(priorityLevel, callback, options) {
	  var currentTime = exports.unstable_now();
	  var startTime;
	  var timeout;

	  if (typeof options === 'object' && options !== null) {
	    var delay = options.delay;

	    if (typeof delay === 'number' && delay > 0) {
	      startTime = currentTime + delay;
	    } else {
	      startTime = currentTime;
	    }

	    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
	  } else {
	    timeout = timeoutForPriorityLevel(priorityLevel);
	    startTime = currentTime;
	  }

	  var expirationTime = startTime + timeout;
	  var newTask = {
	    id: taskIdCounter++,
	    callback: callback,
	    priorityLevel: priorityLevel,
	    startTime: startTime,
	    expirationTime: expirationTime,
	    sortIndex: -1
	  };

	  {
	    newTask.isQueued = false;
	  }

	  if (startTime > currentTime) {
	    // This is a delayed task.
	    newTask.sortIndex = startTime;
	    push(timerQueue, newTask);

	    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	      // All tasks are delayed, and this is the task with the earliest delay.
	      if (isHostTimeoutScheduled) {
	        // Cancel an existing timeout.
	        cancelHostTimeout();
	      } else {
	        isHostTimeoutScheduled = true;
	      } // Schedule a timeout.


	      requestHostTimeout(handleTimeout, startTime - currentTime);
	    }
	  } else {
	    newTask.sortIndex = expirationTime;
	    push(taskQueue, newTask);

	    {
	      markTaskStart(newTask, currentTime);
	      newTask.isQueued = true;
	    } // Schedule a host callback, if needed. If we're already performing work,
	    // wait until the next time we yield.


	    if (!isHostCallbackScheduled && !isPerformingWork) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    }
	  }

	  return newTask;
	}

	function unstable_pauseExecution() {
	}

	function unstable_continueExecution() {

	  if (!isHostCallbackScheduled && !isPerformingWork) {
	    isHostCallbackScheduled = true;
	    requestHostCallback(flushWork);
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return peek(taskQueue);
	}

	function unstable_cancelCallback(task) {
	  {
	    if (task.isQueued) {
	      var currentTime = exports.unstable_now();
	      markTaskCanceled(task, currentTime);
	      task.isQueued = false;
	    }
	  } // Null out the callback to indicate the task has been canceled. (Can't
	  // remove from the queue because you can't remove arbitrary nodes from an
	  // array based heap, only the first one.)


	  task.callback = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  var currentTime = exports.unstable_now();
	  advanceTimers(currentTime);
	  var firstTask = peek(taskQueue);
	  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
	}

	var unstable_requestPaint = requestPaint;
	var unstable_Profiling =  {
	  startLoggingProfilingEvents: startLoggingProfilingEvents,
	  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
	  sharedProfilingBuffer: sharedProfilingBuffer
	} ;

	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_next = unstable_next;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_shouldYield = unstable_shouldYield;
	exports.unstable_requestPaint = unstable_requestPaint;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	exports.unstable_Profiling = unstable_Profiling;
	  })();
	}
	});

	unwrapExports(scheduler_development);
	var scheduler_development_1 = scheduler_development.unstable_now;
	var scheduler_development_2 = scheduler_development.unstable_forceFrameRate;
	var scheduler_development_3 = scheduler_development.unstable_ImmediatePriority;
	var scheduler_development_4 = scheduler_development.unstable_UserBlockingPriority;
	var scheduler_development_5 = scheduler_development.unstable_NormalPriority;
	var scheduler_development_6 = scheduler_development.unstable_IdlePriority;
	var scheduler_development_7 = scheduler_development.unstable_LowPriority;
	var scheduler_development_8 = scheduler_development.unstable_runWithPriority;
	var scheduler_development_9 = scheduler_development.unstable_next;
	var scheduler_development_10 = scheduler_development.unstable_scheduleCallback;
	var scheduler_development_11 = scheduler_development.unstable_cancelCallback;
	var scheduler_development_12 = scheduler_development.unstable_wrapCallback;
	var scheduler_development_13 = scheduler_development.unstable_getCurrentPriorityLevel;
	var scheduler_development_14 = scheduler_development.unstable_shouldYield;
	var scheduler_development_15 = scheduler_development.unstable_requestPaint;
	var scheduler_development_16 = scheduler_development.unstable_continueExecution;
	var scheduler_development_17 = scheduler_development.unstable_pauseExecution;
	var scheduler_development_18 = scheduler_development.unstable_getFirstCallbackNode;
	var scheduler_development_19 = scheduler_development.unstable_Profiling;

	var scheduler = createCommonjsModule(function (module) {

	{
	  module.exports = scheduler_development;
	}
	});

	var schedulerTracing_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });


	 // Only used in www builds.

	 // Only used in www builds.

	 // Disable javascript: URL strings in href for XSS protection.

	 // React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties

	 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


	 // Experimental React Flare event system and event components support.

	 // Experimental Host Component support.

	 // Experimental Scope support.

	 // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

	 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
	// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

	 // For tests, we flush suspense fallbacks in an act scope;
	// *except* in some of our own tests, where we test incremental loading states.

	 // Add a callback property to suspense to notify which promises are currently
	// in the update queue. This allows reporting and tracing of what is causing
	// the user to see a loading state.
	// Also allows hydration callbacks to fire when a dehydrated boundary gets
	// hydrated or deleted.

	 // Part of the simplification of React.createElement so we can eventually move
	// from React.createElement to React.jsx
	// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md





	 // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

	var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

	var interactionIDCounter = 0;
	var threadIDCounter = 0; // Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.

	exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

	exports.__subscriberRef = null;

	{
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}

	function unstable_clear(callback) {

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}
	function unstable_getCurrent() {
	  {
	    return exports.__interactionsRef.current;
	  }
	}
	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}
	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };
	  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.

	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;
	  var subscriber = exports.__subscriberRef.current;
	  var returnValue;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--; // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}
	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  var wrappedInteractions = exports.__interactionsRef.current;
	  var subscriber = exports.__subscriberRef.current;

	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  } // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.


	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });
	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;
	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true; // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.

	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;

	{
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}
	function unstable_unsubscribe(subscriber) {
	  {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_trace = unstable_trace;
	exports.unstable_wrap = unstable_wrap;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	  })();
	}
	});

	unwrapExports(schedulerTracing_development);
	var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
	var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
	var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
	var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
	var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
	var schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;
	var schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;
	var schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;
	var schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;

	var tracing = createCommonjsModule(function (module) {

	{
	  module.exports = schedulerTracing_development;
	}
	});

	var reactDom_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var React = react;
	var _assign = objectAssign;
	var Scheduler = scheduler;
	var checkPropTypes = checkPropTypes_1;
	var tracing$1 = tracing;

	// Do not require this module directly! Use normal `invariant` calls with
	// template literal strings. The messages will be replaced with error codes
	// during build.

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	if (!React) {
	  {
	    throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
	  }
	}

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	/**
	 * Injectable mapping from names to event plugin modules.
	 */

	var namesToPlugins = {};
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */

	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }

	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);

	    if (!(pluginIndex > -1)) {
	      {
	        throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
	      }
	    }

	    if (plugins[pluginIndex]) {
	      continue;
	    }

	    if (!pluginModule.extractEvents) {
	      {
	        throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
	      }
	    }

	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;

	    for (var eventName in publishedEvents) {
	      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
	        {
	          throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
	        }
	      }
	    }
	  }
	}
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */


	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	    {
	      throw Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
	    }
	  }

	  eventNameDispatchConfigs[eventName] = dispatchConfig;
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }

	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }

	  return false;
	}
	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */


	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  if (!!registrationNameModules[registrationName]) {
	    {
	      throw Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
	    }
	  }

	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */

	/**
	 * Ordered list of injected plugins.
	 */


	var plugins = [];
	/**
	 * Mapping from event name to dispatch config
	 */

	var eventNameDispatchConfigs = {};
	/**
	 * Mapping from registration name to plugin module
	 */

	var registrationNameModules = {};
	/**
	 * Mapping from registration name to event name
	 */

	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginOrder}
	 */

	function injectEventPluginOrder(injectedEventPluginOrder) {
	  if (!!eventPluginOrder) {
	    {
	      throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
	    }
	  } // Clone the ordering so it cannot be dynamically mutated.


	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}
	/**
	 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginsByName}
	 */

	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;

	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }

	    var pluginModule = injectedNamesToPlugins[pluginName];

	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      if (!!namesToPlugins[pluginName]) {
	        {
	          throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
	        }
	      }

	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }

	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (!(typeof document !== 'undefined')) {
	        {
	          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
	        }
	      }

	      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.

	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    {
	      {
	        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }

	    if (condition) {
	      return;
	    }

	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610

	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;
	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;

	  {
	    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	  }
	}
	var validateEventDispatches;

	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */


	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */

	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;

	  {
	    validateEventDispatches(event);
	  }

	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      } // Listeners and Instances are two parallel arrays that are always in sync.


	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }

	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */



	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */


	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  if (!(next != null)) {
	    {
	      throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
	    }
	  }

	  if (current == null) {
	    return next;
	  } // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).


	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }

	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */

	var eventQueue = null;
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */

	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  } // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.


	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

	  if (!!eventQueue) {
	    {
	      throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
	    }
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */

	/**
	 * Methods for injecting dependencies.
	 */


	var injection = {
	  /**
	   * @param {array} InjectedEventPluginOrder
	   * @public
	   */
	  injectEventPluginOrder: injectEventPluginOrder,

	  /**
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   */
	  injectEventPluginsByName: injectEventPluginsByName
	};
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */

	function getListener(inst, registrationName) {
	  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon

	  var stateNode = inst.stateNode;

	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (!props) {
	    // Work in progress.
	    return null;
	  }

	  listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (!(!listener || typeof listener === 'function')) {
	    {
	      throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
	    }
	  }

	  return listener;
	}
	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */

	function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = null;

	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];

	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }

	  return events;
	}

	function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  runEventsInBatch(events);
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var FundamentalComponent = 20;
	var ScopeComponent = 21;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
	// Current owner and dispatcher used to share the same ref,
	// but PR #14548 split them out to better support the react-debug-tools package.

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
	  ReactSharedInternals.ReactCurrentDispatcher = {
	    current: null
	  };
	}

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
	  ReactSharedInternals.ReactCurrentBatchConfig = {
	    suspense: null
	  };
	}

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?


	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }

	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}
	function initializeLazyComponentType(lazyComponent) {
	  if (lazyComponent._status === Uninitialized) {
	    lazyComponent._status = Pending;
	    var ctor = lazyComponent._ctor;
	    var thenable = ctor();
	    lazyComponent._result = thenable;
	    thenable.then(function (moduleObject) {
	      if (lazyComponent._status === Pending) {
	        var defaultExport = moduleObject.default;

	        {
	          if (defaultExport === undefined) {
	            warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	          }
	        }

	        lazyComponent._status = Resolved;
	        lazyComponent._result = defaultExport;
	      }
	    }, function (error) {
	      if (lazyComponent._status === Pending) {
	        lazyComponent._status = Rejected;
	        lazyComponent._result = error;
	      }
	    });
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostPortal:
	    case HostText:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	      return '';

	    default:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;

	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }

	      return describeComponentFrame(name, source, ownerName);
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;

	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);

	  return info;
	}
	var current = null;
	var phase = null;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }

	  return null;
	}
	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}
	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    phase = null;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    phase = null;
	  }
	}
	function setCurrentPhase(lifeCyclePhase) {
	  {
	    phase = lifeCyclePhase;
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var PLUGIN_EVENT_SYSTEM = 1;
	var IS_REPLAYED = 1 << 5;

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (!(typeof restoreImpl === 'function')) {
	    {
	      throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }

	  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
	  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	var enableProfilerTimer = true; // Trace which interactions trigger each commit.

	var enableFlareAPI = false; // Experimental Host Component support.

	var enableFundamentalAPI = false; // Experimental Scope support.
	var warnAboutStringRefs = false;

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var discreteUpdatesImpl = function (fn, a, b, c) {
	  return fn(a, b, c);
	};

	var flushDiscreteUpdatesImpl = function () {};

	var batchedEventUpdatesImpl = batchedUpdatesImpl;
	var isInsideEventHandler = false;
	var isBatchingEventUpdates = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    flushDiscreteUpdatesImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, bookkeeping) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	}
	function batchedEventUpdates(fn, a, b) {
	  if (isBatchingEventUpdates) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isBatchingEventUpdates = true;

	  try {
	    return batchedEventUpdatesImpl(fn, a, b);
	  } finally {
	    isBatchingEventUpdates = false;
	    finishEventHandler();
	  }
	} // This is for the React Flare event system
	function discreteUpdates(fn, a, b, c) {
	  var prevIsInsideEventHandler = isInsideEventHandler;
	  isInsideEventHandler = true;

	  try {
	    return discreteUpdatesImpl(fn, a, b, c);
	  } finally {
	    isInsideEventHandler = prevIsInsideEventHandler;

	    if (!isInsideEventHandler) {
	      finishEventHandler();
	    }
	  }
	}
	function flushDiscreteUpdatesIfNeeded(timeStamp) {
	  // event.timeStamp isn't overly reliable due to inconsistencies in
	  // how different browsers have historically provided the time stamp.
	  // Some browsers provide high-resolution time stamps for all events,
	  // some provide low-resolution time stamps for all events. FF < 52
	  // even mixes both time stamps together. Some browsers even report
	  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
	  // Given we are only comparing two time stamps with equality (!==),
	  // we are safe from the resolution differences. If the time stamp is 0
	  // we bail-out of preventing the flush, which can affect semantics,
	  // such as if an earlier flush removes or adds event listeners that
	  // are fired in the subsequent flush. However, this is the same
	  // behaviour as we had before this change, so the risks are low.
	  if (!isInsideEventHandler && (!enableFlareAPI  )) {
	    flushDiscreteUpdatesImpl();
	  }
	}
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  discreteUpdatesImpl = _discreteUpdatesImpl;
	  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
	  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
	}

	var DiscreteEvent = 0;
	var UserBlockingEvent = 1;
	var ContinuousEvent = 2;

	// CommonJS interop named imports.

	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var runWithPriority = Scheduler.unstable_runWithPriority;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";

	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scrapping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true);
	});

	var ReactDebugCurrentFrame$1 = null;

	{
	  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
	} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */


	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  if ( !didWarn && isJavaScriptProtocol.test(url)) {
	    didWarn = true;
	    warning$1(false, 'A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}
	/** Trusted value is a wrapper for "safe" values which can be assigned to DOM execution sinks. */

	/**
	 * We allow passing objects with toString method as element attributes or in dangerouslySetInnerHTML
	 * and we do validations that the value is safe. Once we do validation we want to use the validated
	 * value instead of the object (because object.toString may return something else on next call).
	 *
	 * If application uses Trusted Types we don't stringify trusted values, but preserve them as objects.
	 */
	var toStringOrTrustedType = toString;

	/**
	 * Set attribute for a node. The attribute value can be either string or
	 * Trusted value (if application uses Trusted Types).
	 */
	function setAttribute(node, attributeName, attributeValue) {
	  node.setAttribute(attributeName, attributeValue);
	}
	/**
	 * Set attribute with namespace for a node. The attribute value can be either string or
	 * Trusted value (if application uses Trusted Types).
	 */

	function setAttributeNS(node, attributeNamespace, attributeName, attributeValue) {
	  node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }

	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  } // If the prop isn't in the special list, treat it as a simple attribute.


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        setAttribute(node, _attributeName, toStringOrTrustedType(value));
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      attributeValue = toStringOrTrustedType(value);

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      setAttributeNS(node, attributeNamespace, attributeName, attributeValue);
	    } else {
	      setAttribute(node, attributeName, attributeValue);
	    }
	  }
	}

	var ReactDebugCurrentFrame$2 = null;
	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };
	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
	        return null;
	      }

	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
	        return null;
	      }

	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };
	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */

	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
	  };
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

	      if (!otherProps) {
	        {
	          throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
	        }
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = ''; // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).

	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }

	    content += child; // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });
	  return content;
	}
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */


	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }

	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }

	        if (typeof child.type !== 'string') {
	          return;
	        }

	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;
	          warning$1(false, 'Only strings and numbers are supported as <option> children.');
	        }
	      });
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}
	function getHostProps$1(element, props) {
	  var hostProps = _assign({
	    children: undefined
	  }, props);

	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  ReactControlledValuePropTypes.checkPropTypes('select', props);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];

	    if (props[propName] == null) {
	      continue;
	    }

	    var isArray = Array.isArray(props[propName]);

	    if (props.multiple && !isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	    } else if (!props.multiple && isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$3(element, props) {
	  var node = element;

	  if (!(props.dangerouslySetInnerHTML == null)) {
	    {
	      throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
	    }
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

	    var children = props.children;

	    if (children != null) {
	      {
	        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      if (!(defaultValue == null)) {
	        {
	          throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
	        }
	      }

	      if (Array.isArray(children)) {
	        if (!(children.length <= 1)) {
	          {
	            throw Error("<textarea> can only have at most one child.");
	          }
	        }

	        children = children[0];
	      }

	      defaultValue = children;
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$3(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var Namespaces = {
	  html: HTML_NAMESPACE$1,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	}; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE$1;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE$1;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === Namespaces.svg) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// Do not use the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)
	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}
	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */

	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */

	/**
	 * This API should be called `delete` but we'd have to make sure to always
	 * transform these to strings for IE support. When this transform is fully
	 * supported we can rename it.
	 */

	function get(key) {
	  return key._reactInternalFiber;
	}
	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}
	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect =
	/*              */
	0;
	var PerformedWork =
	/*         */
	1; // You can change the rest (and add more).

	var Placement =
	/*             */
	2;
	var Update =
	/*                */
	4;
	var PlacementAndUpdate =
	/*    */
	6;
	var Deletion =
	/*              */
	8;
	var ContentReset =
	/*          */
	16;
	var Callback =
	/*              */
	32;
	var DidCapture =
	/*            */
	64;
	var Ref =
	/*                   */
	128;
	var Snapshot =
	/*              */
	256;
	var Passive =
	/*               */
	512;
	var Hydrating =
	/*             */
	1024;
	var HydratingAndUpdate =
	/*    */
	1028; // Passive & Update & Callback & Ref & Snapshot

	var LifecycleEffectMask =
	/*   */
	932; // Union of all host effects

	var HostEffectMask =
	/*        */
	2047;
	var Incomplete =
	/*            */
	2048;
	var ShouldCapture =
	/*         */
	4096;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;
	      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (!(getNearestMountedFiber(fiber) === fiber)) {
	    {
	      throw Error("Unable to find node on an unmounted component.");
	    }
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (!(nearestMounted !== null)) {
	      {
	        throw Error("Unable to find node on an unmounted component.");
	      }
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      {
	        {
	          throw Error("Unable to find node on an unmounted component.");
	        }
	      }
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          {
	            throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
	          }
	        }
	      }
	    }

	    if (!(a.alternate === b)) {
	      {
	        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (!(a.tag === HostRoot)) {
	    {
	      throw Error("Unable to find node on an unmounted component.");
	    }
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	var attemptUserBlockingHydration;
	function setAttemptUserBlockingHydration(fn) {
	  attemptUserBlockingHydration = fn;
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	// has this definition built-in.

	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.

	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	function hasQueuedDiscreteEvents() {
	  return queuedDiscreteEvents.length > 0;
	}

	var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
	var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
	function isReplayableDiscreteEvent(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function trapReplayableEvent(topLevelType, document, listeningSet) {
	  listenToTopLevel(topLevelType, document, listeningSet);
	}

	function eagerlyTrapReplayableEvents(document) {
	  var listeningSet = getListeningSetForElement(document); // Discrete

	  discreteReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEvent(topLevelType, document, listeningSet);
	  }); // Continuous

	  continuousReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEvent(topLevelType, document, listeningSet);
	  });
	}

	function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
	    nativeEvent: nativeEvent
	  };
	}

	function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
	  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
	  queuedDiscreteEvents.push(queuedEvent);
	} // Resets the replaying for this type of continuous event to no event.

	function clearIfContinuousEvent(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_FOCUS:
	    case TOP_BLUR:
	      queuedFocus = null;
	      break;

	    case TOP_DRAG_ENTER:
	    case TOP_DRAG_LEAVE:
	      queuedDrag = null;
	      break;

	    case TOP_MOUSE_OVER:
	    case TOP_MOUSE_OUT:
	      queuedMouse = null;
	      break;

	    case TOP_POINTER_OVER:
	    case TOP_POINTER_OUT:
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	    case TOP_LOST_POINTER_CAPTURE:
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode$1(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags and store a single event to be
	  // replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (topLevelType) {
	    case TOP_FOCUS:
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, focusEvent);
	        return true;
	      }

	    case TOP_DRAG_ENTER:
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, dragEvent);
	        return true;
	      }

	    case TOP_MOUSE_OVER:
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, mouseEvent);
	        return true;
	      }

	    case TOP_POINTER_OVER:
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, pointerEvent));
	        return true;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.nativeEvent);

	  if (nextBlockedOn !== null) {
	    // We're still blocked. Try again later.
	    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

	    if (_fiber3 !== null) {
	      attemptContinuousHydration(_fiber3);
	    }

	    queuedEvent.blockedOn = nextBlockedOn;
	    return false;
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false; // First replay discrete events.

	  while (queuedDiscreteEvents.length > 0) {
	    var nextDiscreteEvent = queuedDiscreteEvents[0];

	    if (nextDiscreteEvent.blockedOn !== null) {
	      // We're still blocked.
	      // Increase the priority of this boundary to unblock
	      // the next discrete event.
	      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

	      if (_fiber4 !== null) {
	        attemptUserBlockingHydration(_fiber4);
	      }

	      break;
	    }

	    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.nativeEvent);

	    if (nextBlockedOn !== null) {
	      // We're still blocked. Try again later.
	      nextDiscreteEvent.blockedOn = nextBlockedOn;
	    } else {
	      // We've successfully replayed the first event. Let's try the next one.
	      queuedDiscreteEvents.shift();
	    }
	  } // Next replay any continuous events.


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}
	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;

	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }

	    instA = getParent(instA);
	    instB = getParent(instB);
	  }

	  return null;
	}
	/**
	 * Return if A is an ancestor of B.
	 */


	/**
	 * Return the parent instance of the passed-in instance.
	 */


	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */

	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];

	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }

	  var i;

	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }

	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */

	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];

	  while (true) {
	    if (!from) {
	      break;
	    }

	    if (from === common) {
	      break;
	    }

	    var alternate = from.alternate;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    pathFrom.push(from);
	    from = getParent(from);
	  }

	  var pathTo = [];

	  while (true) {
	    if (!to) {
	      break;
	    }

	    if (to === common) {
	      break;
	    }

	    var _alternate = to.alternate;

	    if (_alternate !== null && _alternate === common) {
	      break;
	    }

	    pathTo.push(to);
	    to = getParent(to);
	  }

	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }

	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */


	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
	  }

	  var listener = listenerAtPhase(inst, event, phase);

	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */


	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */


	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);

	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */


	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/* eslint valid-typeof: 0 */
	var EVENT_POOL_SIZE = 10;
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */


	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	  var Interface = this.constructor.Interface;

	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }

	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }

	    var normalize = Interface[propName];

	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }

	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }

	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },
	  stopPropagation: function () {
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;

	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }

	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;

	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */

	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};

	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }

	  _assign(prototype, Class.prototype);

	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);
	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);
	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */

	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	     warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) ;
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;

	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }

	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;

	  if (!(event instanceof EventConstructor)) {
	    {
	      throw Error("Trying to release an event instance into a pool of a different type.");
	    }
	  }

	  event.destructor();

	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	var previousScreenX = 0;
	var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

	var isMovementXSet = false;
	var isMovementYSet = false;
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	var eventTuples = [// Discrete events
	[TOP_BLUR, 'blur', DiscreteEvent], [TOP_CANCEL, 'cancel', DiscreteEvent], [TOP_CLICK, 'click', DiscreteEvent], [TOP_CLOSE, 'close', DiscreteEvent], [TOP_CONTEXT_MENU, 'contextMenu', DiscreteEvent], [TOP_COPY, 'copy', DiscreteEvent], [TOP_CUT, 'cut', DiscreteEvent], [TOP_AUX_CLICK, 'auxClick', DiscreteEvent], [TOP_DOUBLE_CLICK, 'doubleClick', DiscreteEvent], [TOP_DRAG_END, 'dragEnd', DiscreteEvent], [TOP_DRAG_START, 'dragStart', DiscreteEvent], [TOP_DROP, 'drop', DiscreteEvent], [TOP_FOCUS, 'focus', DiscreteEvent], [TOP_INPUT, 'input', DiscreteEvent], [TOP_INVALID, 'invalid', DiscreteEvent], [TOP_KEY_DOWN, 'keyDown', DiscreteEvent], [TOP_KEY_PRESS, 'keyPress', DiscreteEvent], [TOP_KEY_UP, 'keyUp', DiscreteEvent], [TOP_MOUSE_DOWN, 'mouseDown', DiscreteEvent], [TOP_MOUSE_UP, 'mouseUp', DiscreteEvent], [TOP_PASTE, 'paste', DiscreteEvent], [TOP_PAUSE, 'pause', DiscreteEvent], [TOP_PLAY, 'play', DiscreteEvent], [TOP_POINTER_CANCEL, 'pointerCancel', DiscreteEvent], [TOP_POINTER_DOWN, 'pointerDown', DiscreteEvent], [TOP_POINTER_UP, 'pointerUp', DiscreteEvent], [TOP_RATE_CHANGE, 'rateChange', DiscreteEvent], [TOP_RESET, 'reset', DiscreteEvent], [TOP_SEEKED, 'seeked', DiscreteEvent], [TOP_SUBMIT, 'submit', DiscreteEvent], [TOP_TOUCH_CANCEL, 'touchCancel', DiscreteEvent], [TOP_TOUCH_END, 'touchEnd', DiscreteEvent], [TOP_TOUCH_START, 'touchStart', DiscreteEvent], [TOP_VOLUME_CHANGE, 'volumeChange', DiscreteEvent], // User-blocking events
	[TOP_DRAG, 'drag', UserBlockingEvent], [TOP_DRAG_ENTER, 'dragEnter', UserBlockingEvent], [TOP_DRAG_EXIT, 'dragExit', UserBlockingEvent], [TOP_DRAG_LEAVE, 'dragLeave', UserBlockingEvent], [TOP_DRAG_OVER, 'dragOver', UserBlockingEvent], [TOP_MOUSE_MOVE, 'mouseMove', UserBlockingEvent], [TOP_MOUSE_OUT, 'mouseOut', UserBlockingEvent], [TOP_MOUSE_OVER, 'mouseOver', UserBlockingEvent], [TOP_POINTER_MOVE, 'pointerMove', UserBlockingEvent], [TOP_POINTER_OUT, 'pointerOut', UserBlockingEvent], [TOP_POINTER_OVER, 'pointerOver', UserBlockingEvent], [TOP_SCROLL, 'scroll', UserBlockingEvent], [TOP_TOGGLE, 'toggle', UserBlockingEvent], [TOP_TOUCH_MOVE, 'touchMove', UserBlockingEvent], [TOP_WHEEL, 'wheel', UserBlockingEvent], // Continuous events
	[TOP_ABORT, 'abort', ContinuousEvent], [TOP_ANIMATION_END, 'animationEnd', ContinuousEvent], [TOP_ANIMATION_ITERATION, 'animationIteration', ContinuousEvent], [TOP_ANIMATION_START, 'animationStart', ContinuousEvent], [TOP_CAN_PLAY, 'canPlay', ContinuousEvent], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough', ContinuousEvent], [TOP_DURATION_CHANGE, 'durationChange', ContinuousEvent], [TOP_EMPTIED, 'emptied', ContinuousEvent], [TOP_ENCRYPTED, 'encrypted', ContinuousEvent], [TOP_ENDED, 'ended', ContinuousEvent], [TOP_ERROR, 'error', ContinuousEvent], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', ContinuousEvent], [TOP_LOAD, 'load', ContinuousEvent], [TOP_LOADED_DATA, 'loadedData', ContinuousEvent], [TOP_LOADED_METADATA, 'loadedMetadata', ContinuousEvent], [TOP_LOAD_START, 'loadStart', ContinuousEvent], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', ContinuousEvent], [TOP_PLAYING, 'playing', ContinuousEvent], [TOP_PROGRESS, 'progress', ContinuousEvent], [TOP_SEEKING, 'seeking', ContinuousEvent], [TOP_STALLED, 'stalled', ContinuousEvent], [TOP_SUSPEND, 'suspend', ContinuousEvent], [TOP_TIME_UPDATE, 'timeUpdate', ContinuousEvent], [TOP_TRANSITION_END, 'transitionEnd', ContinuousEvent], [TOP_WAITING, 'waiting', ContinuousEvent]];
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};

	for (var i = 0; i < eventTuples.length; i++) {
	  var eventTuple = eventTuples[i];
	  var topEvent = eventTuple[0];
	  var event = eventTuple[1];
	  var eventPriority = eventTuple[2];
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var config = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent],
	    eventPriority: eventPriority
	  };
	  eventTypes[event] = config;
	  topLevelEventsToDispatchConfig[topEvent] = config;
	} // Only used in DEV for exhaustiveness validation.


	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
	var SimpleEventPlugin = {
	  eventTypes: eventTypes,
	  getEventPriority: function (topLevelType) {
	    var config = topLevelEventsToDispatchConfig[topLevelType];
	    return config !== undefined ? config.eventPriority : ContinuousEvent;
	  },
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

	    if (!dispatchConfig) {
	      return null;
	    }

	    var EventConstructor;

	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }

	      /* falls through */

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;

	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;

	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }

	      /* falls through */

	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

	      /* falls through */

	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;

	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;

	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;

	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;

	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;

	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;

	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;

	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;

	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;

	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        } // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0


	        EventConstructor = SyntheticEvent;
	        break;
	    }

	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	// CommonJS interop named imports.
	var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
	var runWithPriority$1 = Scheduler.unstable_runWithPriority;
	var getEventPriority = SimpleEventPlugin.getEventPriority;
	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findRootContainerNode(inst) {
	  if (inst.tag === HostRoot) {
	    return inst.stateNode.containerInfo;
	  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.


	  while (inst.return) {
	    inst = inst.return;
	  }

	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }

	  return inst.stateNode.containerInfo;
	} // Used to store ancestor hierarchy in top level callback


	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.eventSystemFlags = eventSystemFlags;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }

	  return {
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;

	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.

	  var ancestor = targetInst;

	  do {
	    if (!ancestor) {
	      var ancestors = bookKeeping.ancestors;
	      ancestors.push(ancestor);
	      break;
	    }

	    var root = findRootContainerNode(ancestor);

	    if (!root) {
	      break;
	    }

	    var tag = ancestor.tag;

	    if (tag === HostComponent || tag === HostText) {
	      bookKeeping.ancestors.push(ancestor);
	    }

	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
	    var topLevelType = bookKeeping.topLevelType;
	    var nativeEvent = bookKeeping.nativeEvent;
	    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, bookKeeping.eventSystemFlags);
	  }
	} // TODO: can we stop exporting these?


	var _enabled = true;
	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function trapBubbledEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, false);
	}
	function trapCapturedEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, true);
	}

	function trapEventForPluginEventSystem(element, topLevelType, capture) {
	  var listener;

	  switch (getEventPriority(topLevelType)) {
	    case DiscreteEvent:
	      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
	      break;

	    case UserBlockingEvent:
	      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
	      break;

	    case ContinuousEvent:
	    default:
	      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
	      break;
	  }

	  var rawEventName = getRawEventName(topLevelType);

	  if (capture) {
	    addEventCaptureListener(element, rawEventName, listener);
	  } else {
	    addEventBubbleListener(element, rawEventName, listener);
	  }
	}

	function dispatchDiscreteEvent(topLevelType, eventSystemFlags, nativeEvent) {
	  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
	  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);
	}

	function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, nativeEvent) {
	  runWithPriority$1(UserBlockingPriority$1, dispatchEvent.bind(null, topLevelType, eventSystemFlags, nativeEvent));
	}

	function dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedEventUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}

	function dispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
	    // If we already have a queue of discrete events, and this is another discrete
	    // event, then we can't dispatch it regardless of its target, since they
	    // need to dispatch in order.
	    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
	    topLevelType, eventSystemFlags, nativeEvent);
	    return;
	  }

	  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent);

	  if (blockedOn === null) {
	    // We successfully dispatched this event.
	    clearIfContinuousEvent(topLevelType, nativeEvent);
	    return;
	  }

	  if (isReplayableDiscreteEvent(topLevelType)) {
	    // This this to be replayed later once the target is available.
	    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent)) {
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accummulative.


	  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.

	  {
	    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
	  }
	} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

	function attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  {
	    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
	  } // We're not blocked on anything.


	  return null;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	var elementListeningSets = new PossiblyWeakMap();
	function getListeningSetForElement(element) {
	  var listeningSet = elementListeningSets.get(element);

	  if (listeningSet === undefined) {
	    listeningSet = new Set();
	    elementListeningSets.set(element, listeningSet);
	  }

	  return listeningSet;
	}
	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */

	function listenTo(registrationName, mountAt) {
	  var listeningSet = getListeningSetForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    listenToTopLevel(dependency, mountAt, listeningSet);
	  }
	}
	function listenToTopLevel(topLevelType, mountAt, listeningSet) {
	  if (!listeningSet.has(topLevelType)) {
	    switch (topLevelType) {
	      case TOP_SCROLL:
	        trapCapturedEvent(TOP_SCROLL, mountAt);
	        break;

	      case TOP_FOCUS:
	      case TOP_BLUR:
	        trapCapturedEvent(TOP_FOCUS, mountAt);
	        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
	        // but this ensures we mark both as attached rather than just one.

	        listeningSet.add(TOP_BLUR);
	        listeningSet.add(TOP_FOCUS);
	        break;

	      case TOP_CANCEL:
	      case TOP_CLOSE:
	        if (isEventSupported(getRawEventName(topLevelType))) {
	          trapCapturedEvent(topLevelType, mountAt);
	        }

	        break;

	      case TOP_INVALID:
	      case TOP_SUBMIT:
	      case TOP_RESET:
	        // We listen to them on the target DOM elements.
	        // Some of them bubble so we don't want them to fire twice.
	        break;

	      default:
	        // By default, listen on the top level to all non-media events.
	        // Media events don't bubble so adding the listener wouldn't do anything.
	        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

	        if (!isMediaEvent) {
	          trapBubbledEvent(topLevelType, mountAt);
	        }

	        break;
	    }

	    listeningSet.add(topLevelType);
	  }
	}
	function isListeningToAllDependencies(registrationName, mountAt) {
	  var listeningSet = getListeningSetForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];

	    if (!listeningSet.has(dependency)) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;
	    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {
	    return;
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// or add stack by default to invariants where possible.

	var HTML$1 = '__html';
	var ReactDebugCurrentFrame$3 = null;

	{
	  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
	      {
	        throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + (ReactDebugCurrentFrame$3.getStackAddendum()));
	      }
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (!(props.children == null)) {
	      {
	        throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
	      }
	    }

	    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML)) {
	      {
	        throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
	      }
	    }
	  }

	  {
	    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	  }

	  if (!(props.style == null || typeof props.style === 'object')) {
	    {
	      throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + (ReactDebugCurrentFrame$3.getStackAddendum()));
	    }
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIACamel.test(name)) {
	    var ariaName = 'aria-' + name.slice(4).toLowerCase();
	    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.

	    if (correctName == null) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
	      warnedProperties[name] = true;
	      return true;
	    } // aria-* attributes should be lowercase; suggest the lowercase version.


	    if (name !== correctName) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.

	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    } // aria-* attributes should be lowercase; suggest the lowercase version.


	    if (name !== standardName) {
	      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  var invalidProps = [];

	  for (var key in props) {
	    var isValid = validateProperty(type, key);

	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  } else if (invalidProps.length > 1) {
	    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	    return;
	  }

	  if (props != null && props.value === null && !didWarnValueNull) {
	    didWarnValueNull = true;

	    if (type === 'select' && props.multiple) {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	    } else {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  var unknownProps = [];

	  for (var key in props) {
	    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  } else if (unknownProps.length > 1) {
	    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnInvalidHydration = false;
	var didWarnShadyDOM = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE$1 = 'style';
	var HTML = '__html';
	var HTML_NAMESPACE = Namespaces.html;
	var warnedUnknownTags;
	var suppressHydrationWarning;
	var validatePropertiesInDevelopment;
	var warnForTextDifference;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeMarkupForTextOrAttribute;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props,
	    /* canUseEventSystem */
	    true);
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.

	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });
	    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  listenTo(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE$1) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;
	        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);

	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE$1) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, toStringOrTrustedType(nextHtml));
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);

	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.

	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);

	      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE$1) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$$1(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState$1(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$3(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$2(domElement, props);
	      return;
	  }
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
	    } else {
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING;

	{
	  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }

	  return false;
	}

	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  selectionInformation = null;
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1; // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	} // This is a specific event for the React Flare

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}
	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }

	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}
	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}

	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type);
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}
	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING] !== true) ;
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
	var internalContainerInstanceKey = '__reactContainere$' + randomKey;
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  {
	    {
	      throw Error("getNodeFromInstance: Invalid argument.");
	    }
	  }
	}
	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */

	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

	var eventTypes$1 = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	}; // Track whether we've ever handled a keypress on the space key.

	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */


	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes$1.compositionStart;

	    case TOP_COMPOSITION_END:
	      return eventTypes$1.compositionEnd;

	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes$1.compositionUpdate;
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes$1.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes$1.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes$1.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes$1.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);

	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */


	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);

	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */


	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes$1.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes$1,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	var eventTypes$2 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$2.change, inst, nativeEvent, target);
	  event.type = 'change'; // Flag this event loop as needing state restore.

	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	var ChangeEventPlugin = {
	  eventTypes: eventTypes$2,
	  _isInputEventSupported: isInputEventSupported,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
	    var getTargetInstFunc, handleEventFunc;

	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);

	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    } // When blurring, set the value attribute for number inputs


	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	var eventTypes$3 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	}; // We track the lastNativeEvent to ensure that when we encounter
	// cases where we process the same nativeEvent multiple times,
	// which can happen when have multiple ancestors, that we don't
	// duplicate enter

	var lastNativeEvent;
	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$3,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      // If this is an over event with a target, then we've already dispatched
	      // the event in the out event of the other target. If this is replayed,
	      // then it's because we couldn't dispatch against this target previously
	      // so we have to do it now instead.
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win;

	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;

	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;

	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;

	      if (to !== null) {
	        var nearestMounted = getNearestMountedFiber(to);

	        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	          to = null;
	        }
	      }
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$3.mouseLeave;
	      enterEventType = eventTypes$3.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$3.pointerLeave;
	      enterEventType = eventTypes$3.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);
	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	    accumulateEnterLeaveDispatches(leave, enter, from, to);

	    if (nativeEvent === lastNativeEvent) {
	      lastNativeEvent = null;
	      return [leave];
	    }

	    lastNativeEvent = nativeEvent;
	    return [leave, enter];
	  }
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var is$1 = typeof Object.is === 'function' ? Object.is : is;

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (is$1(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$2.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	var eventTypes$4 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};
	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$4.select, activeElementInst$1, nativeEvent, nativeEventTarget);
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;
	    accumulateTwoPhaseDispatches(syntheticEvent);
	    return syntheticEvent;
	  }

	  return null;
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	var SelectEventPlugin = {
	  eventTypes: eventTypes$4,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.

	    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }

	        break;

	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.

	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;

	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.

	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }

	      // falls through

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */

	injection.injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */

	injection.injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = "\u269B";
	var warningEmoji = "\u26D4";
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

	var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).

	var currentPhase = null;
	var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.

	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	// to avoid stretch the commit phase with measurement overhead.

	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + " " + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
	  var suffix = warning ? " Warning: " + warning : '';
	  return "" + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);

	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {} // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.
	  // Clear marks immediately to avoid growing buffer.


	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + " (#" + debugID + ")";
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
	  } else {
	    // Composite component methods.
	    return componentName + "." + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }

	  labelsInCurrentCommit.add(label);
	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;

	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }

	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;

	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }

	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }

	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  {
	    effectCountInCurrentCommit++;
	  }
	}
	function recordScheduleUpdate() {
	  {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }

	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}


	function startWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, this is the fiber to unwind from.


	    currentFiber = fiber;

	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = true;
	  }
	}
	function cancelWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.


	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}
	function stopWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}
	function stopFailedWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}
	function startPhaseTimer(fiber, phase) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    clearPendingPhaseMeasurement();

	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }

	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}
	function stopPhaseTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }

	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}
	function startWorkLoopTimer(nextUnitOfWork) {
	  {
	    currentFiber = nextUnitOfWork;

	    if (!supportsUserTiming) {
	      return;
	    }

	    commitCountInCurrentWorkLoop = 0; // This is top level call.
	    // Any other measurements are performed within.

	    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

	    resumeTimers();
	  }
	}
	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = "An update to " + componentName + " interrupted the previous render";
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }

	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}
	function startCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}
	function stopCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }

	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();
	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}
	function startCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}
	function stopCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
	  }
	}
	function startCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}
	function stopCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
	  }
	}
	function startCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}
	function stopCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      warningWithoutStack$1(false, 'Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (!(contextStackCursor.current === emptyContextObject)) {
	      {
	        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentName(type) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;
	          warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext;

	    {
	      setCurrentPhase('getChildContext');
	    }

	    startPhaseTimer(fiber, 'getChildContext');
	    childContext = instance.getChildContext();
	    stopPhaseTimer();

	    {
	      setCurrentPhase(null);
	    }

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        {
	          throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
	        }
	      }
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
	      // somebody calls unstable_renderSubtreeIntoContainer() and we process
	      // context from the parent component instance. The stack will be missing
	      // because it's outside of the reconciliation, and so the pointer has not
	      // been set. This is rare and doesn't matter. We'll also remove that API.
	      getCurrentFiberStackInDev);
	    }

	    return _assign({}, parentContext, {}, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      {
	        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
	      {
	        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    {
	      {
	        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }
	  }
	}

	var LegacyRoot = 0;
	var BlockingRoot = 1;
	var ConcurrentRoot = 2;

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	// CommonJS interop named imports.
	var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
	var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
	var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
	var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
	var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
	var Scheduler_now = Scheduler.unstable_now;
	var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
	var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
	var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
	var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
	var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
	    {
	      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
	    }
	  }
	}

	var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority = 99;
	var UserBlockingPriority$2 = 98;
	var NormalPriority = 97;
	var LowPriority = 96;
	var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority = 90;
	var shouldYield = Scheduler_shouldYield;
	var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
	Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
	var syncQueue = null;
	var immediateQueueCallbackNode = null;
	var isFlushingSyncQueue = false;
	var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
	// This will be the case for modern browsers that support `performance.now`. In
	// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
	// timestamp. In that case, subtract the module initialization time to simulate
	// the behavior of performance.now and keep our times small enough to fit
	// within 32 bits.
	// TODO: Consider lifting this into Scheduler.

	var now = initialTimeMs < 10000 ? Scheduler_now : function () {
	  return Scheduler_now() - initialTimeMs;
	};
	function getCurrentPriorityLevel() {
	  switch (Scheduler_getCurrentPriorityLevel()) {
	    case Scheduler_ImmediatePriority:
	      return ImmediatePriority;

	    case Scheduler_UserBlockingPriority:
	      return UserBlockingPriority$2;

	    case Scheduler_NormalPriority:
	      return NormalPriority;

	    case Scheduler_LowPriority:
	      return LowPriority;

	    case Scheduler_IdlePriority:
	      return IdlePriority;

	    default:
	      {
	        {
	          throw Error("Unknown priority level.");
	        }
	      }

	  }
	}

	function reactPriorityToSchedulerPriority(reactPriorityLevel) {
	  switch (reactPriorityLevel) {
	    case ImmediatePriority:
	      return Scheduler_ImmediatePriority;

	    case UserBlockingPriority$2:
	      return Scheduler_UserBlockingPriority;

	    case NormalPriority:
	      return Scheduler_NormalPriority;

	    case LowPriority:
	      return Scheduler_LowPriority;

	    case IdlePriority:
	      return Scheduler_IdlePriority;

	    default:
	      {
	        {
	          throw Error("Unknown priority level.");
	        }
	      }

	  }
	}

	function runWithPriority$2(reactPriorityLevel, fn) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_runWithPriority(priorityLevel, fn);
	}
	function scheduleCallback(reactPriorityLevel, callback, options) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_scheduleCallback(priorityLevel, callback, options);
	}
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

	    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }

	  return fakeCallbackNode;
	}
	function cancelCallback(callbackNode) {
	  if (callbackNode !== fakeCallbackNode) {
	    Scheduler_cancelCallback(callbackNode);
	  }
	}
	function flushSyncCallbackQueue() {
	  if (immediateQueueCallbackNode !== null) {
	    var node = immediateQueueCallbackNode;
	    immediateQueueCallbackNode = null;
	    Scheduler_cancelCallback(node);
	  }

	  flushSyncCallbackQueueImpl();
	}

	function flushSyncCallbackQueueImpl() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrancy.
	    isFlushingSyncQueue = true;
	    var i = 0;

	    try {
	      var _isSync = true;
	      var queue = syncQueue;
	      runWithPriority$2(ImmediatePriority, function () {
	        for (; i < queue.length; i++) {
	          var callback = queue[i];

	          do {
	            callback = callback(_isSync);
	          } while (callback !== null);
	        }
	      });
	      syncQueue = null;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
	      throw error;
	    } finally {
	      isFlushingSyncQueue = false;
	    }
	  }
	}

	var NoMode = 0;
	var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	// tag instead

	var BlockingMode = 2;
	var ConcurrentMode = 4;
	var ProfileMode = 8;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var MAX_SIGNED_31_BIT_INT = 1073741823;

	var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
	// Never work can be committed in an inconsistent state without tearing the UI.
	// The main example is offscreen content, like a hidden subtree. So one possible
	// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
	// which are inconsistent in the sense that they haven't finished yet, but
	// aren't visibly inconsistent because the server rendered HTML matches what the
	// hydrated tree would look like.

	var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
	// order to be consistent.

	var Idle = 2; // Continuous Hydration is a moving priority. It is slightly higher than Idle
	// and is used to increase priority of hover targets. It is increasing with
	// each usage so that last always wins.

	var ContinuousHydration = 3;
	var Sync = MAX_SIGNED_31_BIT_INT;
	var Batched = Sync - 1;
	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

	function msToExpirationTime(ms) {
	  // Always add an offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}
	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
	// the names to reflect.


	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;
	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}
	function computeSuspenseExpiration(currentTime, timeoutMs) {
	  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
	  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
	} // We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.

	var HIGH_PRIORITY_EXPIRATION = 500;
	var HIGH_PRIORITY_BATCH_SIZE = 100;
	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}
	function computeContinuousHydrationExpiration(currentTime) {
	  // Each time we ask for a new one of these we increase the priority.
	  // This ensures that the last one always wins since we can't deprioritize
	  // once we've scheduled work already.
	  return ContinuousHydration++;
	}
	function inferPriorityFromExpirationTime(currentTime, expirationTime) {
	  if (expirationTime === Sync) {
	    return ImmediatePriority;
	  }

	  if (expirationTime === Never || expirationTime === Idle) {
	    return IdlePriority;
	  }

	  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

	  if (msUntil <= 0) {
	    return ImmediatePriority;
	  }

	  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
	    return UserBlockingPriority$2;
	  }

	  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
	    return NormalPriority;
	  } // TODO: Handle LowPriority
	  // Assume anything lower has idle priority


	  return IdlePriority;
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var lowPriorityWarningWithoutStack = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });

	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarningWithoutStack = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(void 0, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
	      warningWithoutStack$1(false, 'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      warningWithoutStack$1(false, 'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      warningWithoutStack$1(false, 'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      lowPriorityWarningWithoutStack$1(false, 'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      lowPriorityWarningWithoutStack$1(false, 'componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      lowPriorityWarningWithoutStack$1(false, 'componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);
	      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
	      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, strictRootComponentStack);
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    syncUpdates(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      scheduleWork(fiber, Sync);
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);

	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}
	function readLazyComponentType(lazyComponent) {
	  initializeLazyComponentType(lazyComponent);

	  if (lazyComponent._status !== Resolved) {
	    throw lazyComponent._result;
	  }

	  return lazyComponent._result;
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);
	  var context = providerFiber.type._context;

	  {
	    context._currentValue = currentValue;
	  }
	}
	function calculateChangedBits(context, newValue, oldValue) {
	  if (is$1(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	    {
	      !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
	    }

	    return changedBits | 0;
	  }
	}
	function scheduleWorkOnParentPath(parent, renderExpirationTime) {
	  // Update the child expiration time of all the ancestors, including
	  // the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (node.childExpirationTime < renderExpirationTime) {
	      node.childExpirationTime = renderExpirationTime;

	      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	        alternate.childExpirationTime = renderExpirationTime;
	      }
	    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	      alternate.childExpirationTime = renderExpirationTime;
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }

	    node = node.return;
	  }
	}
	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime, null);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.

	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }

	          var alternate = fiber.alternate;

	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }

	          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

	          if (list.expirationTime < renderExpirationTime) {
	            list.expirationTime = renderExpirationTime;
	          } // Since we already found a match, we can stop traversing the
	          // dependency list.


	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    var firstContext = dependencies.firstContext;

	    if (firstContext !== null) {
	      if (dependencies.expirationTime >= renderExpirationTime) {
	        // Context list has a pending update. Mark that this fiber performed work.
	        markWorkInProgressReceivedUpdate();
	      } // Reset the work-in-progress list


	      dependencies.firstContext = null;
	    }
	  }
	}
	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
	  }

	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

	    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (!(currentlyRenderingFiber !== null)) {
	        {
	          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
	        }
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        expirationTime: NoWork,
	        firstContext: contextItem,
	        responders: null
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return  context._currentValue ;
	}

	// UpdateQueue is a linked list of prioritized updates.
	//
	// Like fibers, update queues come in pairs: a current queue, which represents
	// the visible state of the screen, and a work-in-progress queue, which can be
	// mutated and processed asynchronously before it is committed — a form of
	// double buffering. If a work-in-progress render is discarded before finishing,
	// we create a new work-in-progress by cloning the current queue.
	//
	// Both queues share a persistent, singly-linked list structure. To schedule an
	// update, we append it to the end of both queues. Each queue maintains a
	// pointer to first update in the persistent list that hasn't been processed.
	// The work-in-progress pointer always has a position equal to or greater than
	// the current queue, since we always work on that one. The current queue's
	// pointer is only updated during the commit phase, when we swap in the
	// work-in-progress.
	//
	// For example:
	//
	//   Current pointer:           A - B - C - D - E - F
	//   Work-in-progress pointer:              D - E - F
	//                                          ^
	//                                          The work-in-progress queue has
	//                                          processed more updates than current.
	//
	// The reason we append to both queues is because otherwise we might drop
	// updates without ever processing them. For example, if we only add updates to
	// the work-in-progress queue, some updates could be lost whenever a work-in
	// -progress render restarts by cloning from current. Similarly, if we only add
	// updates to the current queue, the updates will be lost whenever an already
	// in-progress queue commits and swaps with the current queue. However, by
	// adding to both queues, we guarantee that the update will be part of the next
	// work-in-progress. (And because the work-in-progress queue becomes the
	// current queue once it commits, there's no danger of applying the same
	// update twice.)
	//
	// Prioritization
	// --------------
	//
	// Updates are not sorted by priority, but by insertion; new updates are always
	// appended to the end of the list.
	//
	// The priority is still important, though. When processing the update queue
	// during the render phase, only the updates with sufficient priority are
	// included in the result. If we skip an update because it has insufficient
	// priority, it remains in the queue to be processed later, during a lower
	// priority render. Crucially, all updates subsequent to a skipped update also
	// remain in the queue *regardless of their priority*. That means high priority
	// updates are sometimes processed twice, at two separate priorities. We also
	// keep track of a base state, that represents the state before the first
	// update in the queue is applied.
	//
	// For example:
	//
	//   Given a base state of '', and the following queue of updates
	//
	//     A1 - B2 - C1 - D2
	//
	//   where the number indicates the priority, and the update is applied to the
	//   previous state by appending a letter, React will process these updates as
	//   two separate renders, one per distinct priority level:
	//
	//   First render, at priority 1:
	//     Base state: ''
	//     Updates: [A1, C1]
	//     Result state: 'AC'
	//
	//   Second render, at priority 2:
	//     Base state: 'A'            <-  The base state does not include C1,
	//                                    because B2 was skipped.
	//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
	//     Result state: 'ABCD'
	//
	// Because we process updates in insertion order, and rebase high priority
	// updates when preceding updates are skipped, the final result is deterministic
	// regardless of priority. Intermediate state may vary according to system
	// resources, but the final state is always the same.
	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;


	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;

	  
	}

	function createUpdateQueue(baseState) {
	  var queue = {
	    baseState: baseState,
	    firstUpdate: null,
	    lastUpdate: null,
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,
	    firstEffect: null,
	    lastEffect: null,
	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function cloneUpdateQueue(currentQueue) {
	  var queue = {
	    baseState: currentQueue.baseState,
	    firstUpdate: currentQueue.firstUpdate,
	    lastUpdate: currentQueue.lastUpdate,
	    // TODO: With resuming, if we bail out and resuse the child tree, we should
	    // keep these effects.
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,
	    firstEffect: null,
	    lastEffect: null,
	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function createUpdate(expirationTime, suspenseConfig) {
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null,
	    nextEffect: null
	  };

	  {
	    update.priority = getCurrentPriorityLevel();
	  }

	  return update;
	}

	function appendUpdateToQueue(queue, update) {
	  // Append the update to the end of the list.
	  if (queue.lastUpdate === null) {
	    // Queue is empty
	    queue.firstUpdate = queue.lastUpdate = update;
	  } else {
	    queue.lastUpdate.next = update;
	    queue.lastUpdate = update;
	  }
	}

	function enqueueUpdate(fiber, update) {
	  // Update queues are created lazily.
	  var alternate = fiber.alternate;
	  var queue1;
	  var queue2;

	  if (alternate === null) {
	    // There's only one fiber.
	    queue1 = fiber.updateQueue;
	    queue2 = null;

	    if (queue1 === null) {
	      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	    }
	  } else {
	    // There are two owners.
	    queue1 = fiber.updateQueue;
	    queue2 = alternate.updateQueue;

	    if (queue1 === null) {
	      if (queue2 === null) {
	        // Neither fiber has an update queue. Create new ones.
	        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
	      } else {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
	      }
	    } else {
	      if (queue2 === null) {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
	      }
	    }
	  }

	  if (queue2 === null || queue1 === queue2) {
	    // There's only a single queue.
	    appendUpdateToQueue(queue1, update);
	  } else {
	    // There are two queues. We need to append the update to both queues,
	    // while accounting for the persistent structure of the list — we don't
	    // want the same update to be added multiple times.
	    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
	      // One of the queues is not empty. We must add the update to both queues.
	      appendUpdateToQueue(queue1, update);
	      appendUpdateToQueue(queue2, update);
	    } else {
	      // Both queues are non-empty. The last update is the same in both lists,
	      // because of structural sharing. So, only append to one of the lists.
	      appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

	      queue2.lastUpdate = update;
	    }
	  }

	  {
	    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
	      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}
	function enqueueCapturedUpdate(workInProgress, update) {
	  // Captured updates go into a separate list, and only on the work-in-
	  // progress queue.
	  var workInProgressQueue = workInProgress.updateQueue;

	  if (workInProgressQueue === null) {
	    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
	  } else {
	    // TODO: I put this here rather than createWorkInProgress so that we don't
	    // clone the queue unnecessarily. There's probably a better way to
	    // structure this.
	    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
	  } // Append the update to the end of the list.


	  if (workInProgressQueue.lastCapturedUpdate === null) {
	    // This is the first render phase update
	    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
	  } else {
	    workInProgressQueue.lastCapturedUpdate.next = update;
	    workInProgressQueue.lastCapturedUpdate = update;
	  }
	}

	function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
	  var current = workInProgress.alternate;

	  if (current !== null) {
	    // If the work-in-progress queue is equal to the current queue,
	    // we need to clone it first.
	    if (queue === current.updateQueue) {
	      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
	    }
	  }

	  return queue;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              payload.call(instance, prevState, nextProps);
	            }
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return _assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
	  hasForceUpdate = false;
	  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

	  {
	    currentlyProcessingQueue = queue;
	  } // These values may change as we process the queue.


	  var newBaseState = queue.baseState;
	  var newFirstUpdate = null;
	  var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

	  var update = queue.firstUpdate;
	  var resultState = newBaseState;

	  while (update !== null) {
	    var updateExpirationTime = update.expirationTime;

	    if (updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstUpdate === null) {
	        // This is the first skipped update. It will be the first update in
	        // the new list.
	        newFirstUpdate = update; // Since this is the first update that was skipped, the current result
	        // is the new base state.

	        newBaseState = resultState;
	      } // Since this update will remain in the list, update the remaining
	      // expiration time.


	      if (newExpirationTime < updateExpirationTime) {
	        newExpirationTime = updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority.
	      // Mark the event time of this update as relevant to this render pass.
	      // TODO: This should ideally use the true event time of this update rather than
	      // its priority which is a derived and not reverseable value.
	      // TODO: We should skip this update if it was already committed but currently
	      // we have no way of detecting the difference between a committed and suspended
	      // update here.
	      markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process it and compute a new result.

	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var callback = update.callback;

	      if (callback !== null) {
	        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

	        update.nextEffect = null;

	        if (queue.lastEffect === null) {
	          queue.firstEffect = queue.lastEffect = update;
	        } else {
	          queue.lastEffect.nextEffect = update;
	          queue.lastEffect = update;
	        }
	      }
	    } // Continue to the next update.


	    update = update.next;
	  } // Separately, iterate though the list of captured updates.


	  var newFirstCapturedUpdate = null;
	  update = queue.firstCapturedUpdate;

	  while (update !== null) {
	    var _updateExpirationTime = update.expirationTime;

	    if (_updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstCapturedUpdate === null) {
	        // This is the first skipped captured update. It will be the first
	        // update in the new list.
	        newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
	        // the new base state.

	        if (newFirstUpdate === null) {
	          newBaseState = resultState;
	        }
	      } // Since this update will remain in the list, update the remaining
	      // expiration time.


	      if (newExpirationTime < _updateExpirationTime) {
	        newExpirationTime = _updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback = update.callback;

	      if (_callback !== null) {
	        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

	        update.nextEffect = null;

	        if (queue.lastCapturedEffect === null) {
	          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
	        } else {
	          queue.lastCapturedEffect.nextEffect = update;
	          queue.lastCapturedEffect = update;
	        }
	      }
	    }

	    update = update.next;
	  }

	  if (newFirstUpdate === null) {
	    queue.lastUpdate = null;
	  }

	  if (newFirstCapturedUpdate === null) {
	    queue.lastCapturedUpdate = null;
	  } else {
	    workInProgress.effectTag |= Callback;
	  }

	  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
	    // We processed every update, without skipping. That means the new base
	    // state is the same as the result state.
	    newBaseState = resultState;
	  }

	  queue.baseState = newBaseState;
	  queue.firstUpdate = newFirstUpdate;
	  queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
	  // This should be fine because the only two other things that contribute to
	  // expiration time are props and context. We're already in the middle of the
	  // begin phase by the time we start processing the queue, so we've already
	  // dealt with the props. Context in components that specify
	  // shouldComponentUpdate is tricky; but we'll have to account for
	  // that regardless.

	  markUnprocessedUpdateTime(newExpirationTime);
	  workInProgress.expirationTime = newExpirationTime;
	  workInProgress.memoizedState = resultState;

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (!(typeof callback === 'function')) {
	    {
	      throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
	    }
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
	  // If the finished render included captured updates, and there are still
	  // lower priority updates left over, we need to keep the captured updates
	  // in the queue so that they are rebased and not dropped once we process the
	  // queue again at the lower priority.
	  if (finishedQueue.firstCapturedUpdate !== null) {
	    // Join the captured update list to the end of the normal list.
	    if (finishedQueue.lastUpdate !== null) {
	      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
	      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
	    } // Clear the list of captured updates.


	    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
	  } // Commit the effects


	  commitUpdateEffects(finishedQueue.firstEffect, instance);
	  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
	  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
	  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
	}

	function commitUpdateEffects(effect, instance) {
	  while (effect !== null) {
	    var callback = effect.callback;

	    if (callback !== null) {
	      effect.callback = null;
	      callCallback(callback, instance);
	    }

	    effect = effect.nextEffect;
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	function requestCurrentSuspenseConfig() {
	  return ReactCurrentBatchConfig.suspense;
	}

	var fakeInternalInstance = {};
	var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback$1;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback$1 = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + "_" + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);
	      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);
	        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      {
	        {
	          throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
	        }
	      }
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if ( workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  var updateQueue = workInProgress.updateQueue;

	  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
	    updateQueue.baseState = memoizedState;
	  }
	}
	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
	    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
	    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
	    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
	    var noInstancePropTypes = !instance.propTypes;
	    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
	    var noInstanceContextType = !instance.contextType;
	    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;

	    {
	      var noInstanceContextTypes = !instance.contextTypes;
	      !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);
	        warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
	    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }

	    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
	    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
	    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
	    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
	    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
	    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
	    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
	    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
	    var hasMutatedProps = instance.props !== newProps;
	    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
	    var noInstanceDefaultProps = !instance.defaultProps;
	    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
	      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
	    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
	    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
	    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
	      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function') {
	      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  } // Instantiate twice to help detect side-effects.


	  {
	    if ( workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);
	        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
	          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);
	        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
	        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  var updateQueue = workInProgress.updateQueue;

	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    updateQueue = workInProgress.updateQueue;

	    if (updateQueue !== null) {
	      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	      instance.state = workInProgress.memoizedState;
	    }
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;

	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');

	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;

	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');

	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (!(typeof child._store === 'object')) {
	      {
	        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }

	    child._store.validated = true;
	    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
	    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray = Array.isArray;

	function coerceRef(returnFiber, current$$1, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (!(ownerFiber.tag === ClassComponent)) {
	          {
	            throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
	          }
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        {
	          throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
	        }
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
	        return current$$1.ref;
	      }

	      var ref = function (value) {
	        var refs = inst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (!(typeof mixedRef === 'string')) {
	        {
	          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
	        }
	      }

	      if (!element._owner) {
	        {
	          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
	        }
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';

	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }

	    {
	      {
	        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
	      }
	    }
	  }
	}

	function warnOnFunctionType() {
	  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
	  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    } // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }

	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps, expirationTime) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }

	    var current$$1 = newFiber.alternate;

	    if (current$$1 !== null) {
	      var oldIndex = current$$1.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current$$1, element, expirationTime) {
	    if (current$$1 !== null && (current$$1.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	    isCompatibleFamilyForHotReloading(current$$1, element)))) {
	      // Move based on index
	      var existing = useFiber(current$$1, element.props);
	      existing.ref = coerceRef(returnFiber, current$$1, element);
	      existing.return = returnFiber;

	      {
	        existing._debugSource = element._source;
	        existing._debugOwner = element._owner;
	      }

	      return existing;
	    } else {
	      // Insert
	      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      created.ref = coerceRef(returnFiber, current$$1, element);
	      created.return = returnFiber;
	      return created;
	    }
	  }

	  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
	    if (current$$1 === null || current$$1.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }

	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }

	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (!(typeof iteratorFn === 'function')) {
	      {
	        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
	      }
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (!(newChildren != null)) {
	      {
	        throw Error("An iterable object provided no iterator.");
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	        isCompatibleFamilyForHotReloading(child, element))) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props);
	          existing.ref = coerceRef(returnFiber, child, element);
	          existing.return = returnFiber;

	          {
	            existing._debugSource = element._source;
	            existing._debugOwner = element._owner;
	          }

	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;

	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough

	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;

	            {
	              {
	                throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
	              }
	            }
	          }
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current$$1, workInProgress) {
	  if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
	    {
	      throw Error("Resuming work not yet implemented.");
	    }
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, renderExpirationTime) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, renderExpirationTime);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (!(c !== NO_CONTEXT)) {
	    {
	      throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

	  if (props.fallback === undefined) {
	    return false;
	  } // Regular boundaries always capture.


	  if (props.unstable_avoidThisFallback !== true) {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	  // parent boundary if it is currently invisible.


	  if (hasInvisibleParent) {
	    return false;
	  } // If the parent is not able to handle it, we must handle it.


	  return true;
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}
	function createResponderListener(responder, props) {
	  var eventResponderListener = {
	    responder: responder,
	    props: props
	  };

	  {
	    Object.freeze(eventResponderListener);
	  }

	  return eventResponderListener;
	}

	var NoEffect$1 =
	/*             */
	0;
	var UnmountSnapshot =
	/*      */
	2;
	var UnmountMutation =
	/*      */
	4;
	var MountMutation =
	/*        */
	8;
	var UnmountLayout =
	/*        */
	16;
	var MountLayout =
	/*          */
	32;
	var MountPassive =
	/*         */
	64;
	var UnmountPassive =
	/*       */
	128;

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
	var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderExpirationTime$1 = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var nextCurrentHook = null;
	var firstWorkInProgressHook = null;
	var workInProgressHook = null;
	var nextWorkInProgressHook = null;
	var remainingExpirationTime = NoWork;
	var componentUpdateQueue = null;
	var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
	// end of the current pass. We can't store these updates on the normal queue,
	// because if the work is aborted, they should be discarded. Because this is
	// a relatively rare case, we also don't want to add an additional field to
	// either the hook or queue object types. So we store them in a lazily create
	// map of queue -> render-phase updates, which are discarded once the component
	// completes without re-rendering.
	// Whether an update was scheduled during the currently executing render pass.

	var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

	var renderPhaseUpdates = null; // Counter to prevent infinite loops.

	var numberOfReRenders = 0;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      warning$1(false, '%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  {
	    {
	      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
	    }
	  }
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (is$1(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
	  renderExpirationTime$1 = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;
	  nextCurrentHook = current !== null ? current.memoizedState : null;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  } // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // remainingExpirationTime = NoWork;
	  // componentUpdateQueue = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;
	  // sideEffectTag = 0;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because nextCurrentHook === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so nextCurrentHook would be null during updates and mounts.


	  {
	    if (nextCurrentHook !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, refOrContext);

	  if (didScheduleRenderPhaseUpdate) {
	    do {
	      didScheduleRenderPhaseUpdate = false;
	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      nextCurrentHook = current !== null ? current.memoizedState : null;
	      nextWorkInProgressHook = firstWorkInProgressHook;
	      currentHook = null;
	      workInProgressHook = null;
	      componentUpdateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	      children = Component(props, refOrContext);
	    } while (didScheduleRenderPhaseUpdate);

	    renderPhaseUpdates = null;
	    numberOfReRenders = 0;
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
	  var renderedWork = currentlyRenderingFiber$1;
	  renderedWork.memoizedState = firstWorkInProgressHook;
	  renderedWork.expirationTime = remainingExpirationTime;
	  renderedWork.updateQueue = componentUpdateQueue;
	  renderedWork.effectTag |= sideEffectTag;

	  {
	    renderedWork._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderExpirationTime$1 = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  nextCurrentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;
	  nextWorkInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	  }

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;
	  sideEffectTag = 0; // These were reset above
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;

	  if (!!didRenderTooFewHooks) {
	    {
	      throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
	    }
	  }

	  return children;
	}
	function bailoutHooks(current, workInProgress, expirationTime) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.effectTag &= ~(Passive | Update);

	  if (current.expirationTime <= expirationTime) {
	    current.expirationTime = NoWork;
	  }
	}
	function resetHooks() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
	  // It's also called inside mountIndeterminateComponent if we determine the
	  // component is a module-style component.

	  renderExpirationTime$1 = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  nextCurrentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;
	  nextWorkInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	  }

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;
	  sideEffectTag = 0;
	  didScheduleRenderPhaseUpdate = false;
	  renderPhaseUpdates = null;
	  numberOfReRenders = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    queue: null,
	    baseUpdate: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    firstWorkInProgressHook = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	    nextCurrentHook = currentHook !== null ? currentHook.next : null;
	  } else {
	    // Clone from the current hook.
	    if (!(nextCurrentHook !== null)) {
	      {
	        throw Error("Rendered more hooks than during the previous render.");
	      }
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      queue: currentHook.queue,
	      baseUpdate: currentHook.baseUpdate,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      workInProgressHook = firstWorkInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }

	    nextCurrentHook = currentHook.next;
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    last: null,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
	  currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
	    }
	  }

	  queue.lastRenderedReducer = reducer;

	  if (numberOfReRenders > 0) {
	    // This is a re-render. Apply the new render phase updates to the previous
	    // work-in-progress hook.
	    var _dispatch = queue.dispatch;

	    if (renderPhaseUpdates !== null) {
	      // Render phase updates are stored in a map of queue -> linked list
	      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

	      if (firstRenderPhaseUpdate !== undefined) {
	        renderPhaseUpdates.delete(queue);
	        var newState = hook.memoizedState;
	        var update = firstRenderPhaseUpdate;

	        do {
	          // Process this render phase update. We don't have to check the
	          // priority because it will always be the same as the current
	          // render's.
	          var action = update.action;
	          newState = reducer(newState, action);
	          update = update.next;
	        } while (update !== null); // Mark that the fiber performed work, but only if the new state is
	        // different from the current state.


	        if (!is$1(newState, hook.memoizedState)) {
	          markWorkInProgressReceivedUpdate();
	        }

	        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	        // the base state unless the queue is empty.
	        // TODO: Not sure if this is the desired semantics, but it's what we
	        // do for gDSFP. I can't remember why.

	        if (hook.baseUpdate === queue.last) {
	          hook.baseState = newState;
	        }

	        queue.lastRenderedState = newState;
	        return [newState, _dispatch];
	      }
	    }

	    return [hook.memoizedState, _dispatch];
	  } // The last update in the entire queue


	  var last = queue.last; // The last update that is part of the base state.

	  var baseUpdate = hook.baseUpdate;
	  var baseState = hook.baseState; // Find the first unprocessed update.

	  var first;

	  if (baseUpdate !== null) {
	    if (last !== null) {
	      // For the first update, the queue is a circular linked list where
	      // `queue.last.next = queue.first`. Once the first update commits, and
	      // the `baseUpdate` is no longer empty, we can unravel the list.
	      last.next = null;
	    }

	    first = baseUpdate.next;
	  } else {
	    first = last !== null ? last.next : null;
	  }

	  if (first !== null) {
	    var _newState = baseState;
	    var newBaseState = null;
	    var newBaseUpdate = null;
	    var prevUpdate = baseUpdate;
	    var _update = first;
	    var didSkip = false;

	    do {
	      var updateExpirationTime = _update.expirationTime;

	      if (updateExpirationTime < renderExpirationTime$1) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        if (!didSkip) {
	          didSkip = true;
	          newBaseUpdate = prevUpdate;
	          newBaseState = _newState;
	        } // Update the remaining priority in the queue.


	        if (updateExpirationTime > remainingExpirationTime) {
	          remainingExpirationTime = updateExpirationTime;
	          markUnprocessedUpdateTime(remainingExpirationTime);
	        }
	      } else {
	        // This update does have sufficient priority.
	        // Mark the event time of this update as relevant to this render pass.
	        // TODO: This should ideally use the true event time of this update rather than
	        // its priority which is a derived and not reverseable value.
	        // TODO: We should skip this update if it was already committed but currently
	        // we have no way of detecting the difference between a committed and suspended
	        // update here.
	        markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig); // Process this update.

	        if (_update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          _newState = _update.eagerState;
	        } else {
	          var _action = _update.action;
	          _newState = reducer(_newState, _action);
	        }
	      }

	      prevUpdate = _update;
	      _update = _update.next;
	    } while (_update !== null && _update !== first);

	    if (!didSkip) {
	      newBaseUpdate = prevUpdate;
	      newBaseState = _newState;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!is$1(_newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = _newState;
	    hook.baseUpdate = newBaseUpdate;
	    hook.baseState = newBaseState;
	    queue.lastRenderedState = _newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    last: null,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
	  currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = {
	    current: initialValue
	  };

	  {
	    Object.seal(ref);
	  }

	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  sideEffectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(NoEffect$1, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  sideEffectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
	}

	function updateEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value, config) {
	  var _mountState = mountState(value),
	      prevValue = _mountState[0],
	      setValue = _mountState[1];

	  mountEffect(function () {
	    Scheduler.unstable_next(function () {
	      var previousConfig = ReactCurrentBatchConfig$1.suspense;
	      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	      try {
	        setValue(value);
	      } finally {
	        ReactCurrentBatchConfig$1.suspense = previousConfig;
	      }
	    });
	  }, [value, config]);
	  return prevValue;
	}

	function updateDeferredValue(value, config) {
	  var _updateState = updateState(),
	      prevValue = _updateState[0],
	      setValue = _updateState[1];

	  updateEffect(function () {
	    Scheduler.unstable_next(function () {
	      var previousConfig = ReactCurrentBatchConfig$1.suspense;
	      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	      try {
	        setValue(value);
	      } finally {
	        ReactCurrentBatchConfig$1.suspense = previousConfig;
	      }
	    });
	  }, [value, config]);
	  return prevValue;
	}

	function mountTransition(config) {
	  var _mountState2 = mountState(false),
	      isPending = _mountState2[0],
	      setPending = _mountState2[1];

	  var startTransition = mountCallback(function (callback) {
	    setPending(true);
	    Scheduler.unstable_next(function () {
	      var previousConfig = ReactCurrentBatchConfig$1.suspense;
	      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	      try {
	        setPending(false);
	        callback();
	      } finally {
	        ReactCurrentBatchConfig$1.suspense = previousConfig;
	      }
	    });
	  }, [config, isPending]);
	  return [startTransition, isPending];
	}

	function updateTransition(config) {
	  var _updateState2 = updateState(),
	      isPending = _updateState2[0],
	      setPending = _updateState2[1];

	  var startTransition = updateCallback(function (callback) {
	    setPending(true);
	    Scheduler.unstable_next(function () {
	      var previousConfig = ReactCurrentBatchConfig$1.suspense;
	      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	      try {
	        setPending(false);
	        callback();
	      } finally {
	        ReactCurrentBatchConfig$1.suspense = previousConfig;
	      }
	    });
	  }, [config, isPending]);
	  return [startTransition, isPending];
	}

	function dispatchAction(fiber, queue, action) {
	  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
	    {
	      throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
	    }
	  }

	  {
	    !(typeof arguments[3] !== 'function') ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
	  }

	  var alternate = fiber.alternate;

	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    var update = {
	      expirationTime: renderExpirationTime$1,
	      suspenseConfig: null,
	      action: action,
	      eagerReducer: null,
	      eagerState: null,
	      next: null
	    };

	    {
	      update.priority = getCurrentPriorityLevel();
	    }

	    if (renderPhaseUpdates === null) {
	      renderPhaseUpdates = new Map();
	    }

	    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

	    if (firstRenderPhaseUpdate === undefined) {
	      renderPhaseUpdates.set(queue, update);
	    } else {
	      // Append the update to the end of the list.
	      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

	      while (lastRenderPhaseUpdate.next !== null) {
	        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	      }

	      lastRenderPhaseUpdate.next = update;
	    }
	  } else {
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var _update2 = {
	      expirationTime: expirationTime,
	      suspenseConfig: suspenseConfig,
	      action: action,
	      eagerReducer: null,
	      eagerState: null,
	      next: null
	    };

	    {
	      _update2.priority = getCurrentPriorityLevel();
	    } // Append the update to the end of the list.


	    var last = queue.last;

	    if (last === null) {
	      // This is the first update. Create a circular list.
	      _update2.next = _update2;
	    } else {
	      var first = last.next;

	      if (first !== null) {
	        // Still circular.
	        _update2.next = first;
	      }

	      last.next = _update2;
	    }

	    queue.last = _update2;

	    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          _update2.eagerReducer = lastRenderedReducer;
	          _update2.eagerState = eagerState;

	          if (is$1(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    {
	      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	      if ('undefined' !== typeof jest) {
	        warnIfNotScopedWithMatchingAct(fiber);
	        warnIfNotCurrentlyActingUpdatesInDev(fiber);
	      }
	    }

	    scheduleWork(fiber, expirationTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useResponder: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError
	};
	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      mountHookTypesDev();
	      return createResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return createResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	}

	// CommonJS interop named imports.

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;

	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.

	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
	              break;

	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps);
	              break;
	          }

	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }

	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;

	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }

	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    {
	      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.

	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;

	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutMaxDuration;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutMaxDuration = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  if (current$$1 === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their their
	  // identity matches.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
	      }
	    }

	    setCurrentPhase(null);
	  }

	  if (current$$1 !== null && !didReceiveUpdate) {
	    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current$$1, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type), getCurrentFiberStackInDev);
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type), getCurrentFiberStackInDev);
	    }
	  }

	  var currentChild = current$$1.child; // This is always exactly one child

	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        outerMemoType = refineResolvedLazyComponent(outerMemoType);
	      }

	      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	      if (outerPropTypes) {
	        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
	      } // Inner propTypes will be validated in the function component path.

	    }
	  }

	  if (current$$1 !== null) {
	    var prevProps = current$$1.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload:
	    workInProgress.type === current$$1.type)) {
	      didReceiveUpdate = false;

	      if (updateExpirationTime < renderExpirationTime) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    }
	  }

	  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
	  {
	    workInProgress.effectTag |= Update;
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current$$1, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
	      }
	    }

	    setCurrentPhase(null);
	  }

	  if (current$$1 !== null && !didReceiveUpdate) {
	    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    if (current$$1 !== null) {
	      // An class component without an instance only mounts if it suspended
	      // inside a non- concurrent tree, in an inconsistent state. We want to
	      // tree it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current$$1.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.effectTag |= Placement;
	    } // In the initial pass we might need to construct the instance.


	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current$$1 === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	  }

	  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

	  {
	    var inst = workInProgress.stateNode;

	    if (inst.props !== nextProps) {
	      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current$$1, workInProgress);
	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$3.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFrom catch is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      setCurrentPhase('render');
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictMode) {
	        instance.render();
	      }

	      setCurrentPhase(null);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (current$$1 !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;

	  if (!(updateQueue !== null)) {
	    {
	      throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  var nextChildren = nextState.element;

	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  var root = workInProgress.stateNode;

	  if (root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.
	    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    workInProgress.child = child;
	    var node = child;

	    while (node) {
	      // Mark each child as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.
	      node.effectTag = node.effectTag & ~Placement | Hydrating;
	      node = node.sibling;
	    }
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }

	  return workInProgress.child;
	}

	function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also have access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

	  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
	    {
	      markSpawnedWork(Never);
	    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current$$1, workInProgress) {
	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // An lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.

	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        break;
	      }

	    default:
	      {
	        var hint = '';

	        {
	          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	            hint = ' Did you wrap a component in React.lazy() more than once?';
	          }
	        } // This message intentionally doesn't mention ForwardRef or MemoComponent
	        // because the fact that it's a separate type of work is an
	        // implementation detail.


	        {
	          {
	            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
	          }
	        }
	      }
	  }

	  return child;
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  } // Promote the fiber to a class and try rendering again.


	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var value;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    ReactCurrentOwner$3.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        warningWithoutStack$1(false, 'The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    resetHooks(); // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictMode) {
	        // Only double-render components with Hooks
	        if (workInProgress.memoizedState !== null) {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	        }
	      }
	    }

	    reconcileChildren(null, workInProgress, value, renderExpirationTime);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  if (Component) {
	    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
	  }

	  if (workInProgress.ref !== null) {
	    var info = '';
	    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	    if (ownerName) {
	      info += '\n\nCheck the render method of `' + ownerName + '`.';
	    }

	    var warningKey = ownerName || workInProgress._debugID || '';
	    var debugSource = workInProgress._debugSource;

	    if (debugSource) {
	      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	    }

	    if (!didWarnAboutFunctionRefs[warningKey]) {
	      didWarnAboutFunctionRefs[warningKey] = true;
	      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	    }
	  }

	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    var _componentName2 = getComponentName(Component) || 'Unknown';

	    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
	      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName2);
	      didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
	    }
	  }

	  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	    var _componentName3 = getComponentName(Component) || 'Unknown';

	    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
	      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName3);
	      didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  retryTime: NoWork
	};

	function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
	  // If the context is telling us that we should show a fallback, and we're not
	  // already showing content, then we should show the fallback instead.
	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
	}

	function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.effectTag |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var nextDidTimeout = false;
	  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current$$1 === null || current$$1.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Boundaries without fallbacks or should be avoided are not considered since
	      // they cannot handle preferred fallback states.
	      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext);

	  {
	    if ('maxDuration' in nextProps) {
	      if (!didWarnAboutMaxDuration) {
	        didWarnAboutMaxDuration = true;
	        warning$1(false, 'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
	      }
	    }
	  } // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.


	  if (current$$1 === null) {
	    // If we're currently hydrating, try to hydrate this boundary.
	    // But only if this has a fallback.
	    if (nextProps.fallback !== undefined) {
	      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
	    } // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.


	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
	      primaryChildFragment.return = workInProgress;

	      if ((workInProgress.mode & BlockingMode) === NoMode) {
	        // Outside of blocking mode, we commit the effects from the
	        // partially completed, timed-out tree, too.
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	        var progressedChild = progressedPrimaryChild;

	        while (progressedChild !== null) {
	          progressedChild.return = primaryChildFragment;
	          progressedChild = progressedChild.sibling;
	        }
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      fallbackChildFragment.return = workInProgress;
	      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
	      // fallback children.

	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      workInProgress.child = primaryChildFragment;
	      return fallbackChildFragment;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      workInProgress.memoizedState = null;
	      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current$$1.memoizedState;

	    if (prevState !== null) {
	      // wrapped in a fragment fiber.


	      var currentPrimaryChildFragment = current$$1.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren2 = nextProps.fallback;

	        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

	        _primaryChildFragment2.return = workInProgress;

	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState = workInProgress.memoizedState;

	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment2.child = _progressedPrimaryChild;
	            var _progressedChild2 = _progressedPrimaryChild;

	            while (_progressedChild2 !== null) {
	              _progressedChild2.return = _primaryChildFragment2;
	              _progressedChild2 = _progressedChild2.sibling;
	            }
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;

	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }

	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        } // Clone the fallback child fragment, too. These we'll continue
	        // working on.


	        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);

	        _fallbackChildFragment2.return = workInProgress;
	        _primaryChildFragment2.sibling = _fallbackChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment2;
	        return _fallbackChildFragment2;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?
	        // Continue rendering the children, like we normally do.

	        workInProgress.memoizedState = null;
	        return workInProgress.child = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current$$1.child;

	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren3 = nextProps.fallback;

	        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);

	        _primaryChildFragment3.return = workInProgress;
	        _primaryChildFragment3.child = _currentPrimaryChild;

	        if (_currentPrimaryChild !== null) {
	          _currentPrimaryChild.return = _primaryChildFragment3;
	        } // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;


	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState2 = workInProgress.memoizedState;

	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

	          _primaryChildFragment3.child = _progressedPrimaryChild2;
	          var _progressedChild3 = _progressedPrimaryChild2;

	          while (_progressedChild3 !== null) {
	            _progressedChild3.return = _primaryChildFragment3;
	            _progressedChild3 = _progressedChild3.sibling;
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration2 = 0;
	          var _hiddenChild2 = _primaryChildFragment3.child;

	          while (_hiddenChild2 !== null) {
	            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
	            _hiddenChild2 = _hiddenChild2.sibling;
	          }

	          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
	        } // Create a fragment from the fallback children, too.


	        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

	        _fallbackChildFragment3.return = workInProgress;
	        _primaryChildFragment3.sibling = _fallbackChildFragment3;
	        _fallbackChildFragment3.effectTag |= Placement;
	        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment3;
	        return _fallbackChildFragment3;
	      } else {
	        // Still haven't timed out.  Continue rendering the children, like we
	        // normally do.
	        workInProgress.memoizedState = null;
	        var _nextPrimaryChildren2 = nextProps.children;
	        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }
	}

	function scheduleWorkOnFiber(fiber, renderExpirationTime) {
	  if (fiber.expirationTime < renderExpirationTime) {
	    fiber.expirationTime = renderExpirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	    alternate.expirationTime = renderExpirationTime;
	  }

	  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleWorkOnFiber(node, renderExpirationTime);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleWorkOnFiber(node, renderExpirationTime);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
	              break;
	            }

	          default:
	            warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	            break;
	        }
	      } else {
	        warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;
	        warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;
	        warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isArray = Array.isArray(childSlot);
	    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isArray || isIterable) {
	      var type = isArray ? 'array' : 'iterable';
	      warning$1(false, 'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (Array.isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      last: lastContentRow,
	      tail: tail,
	      tailExpiration: 0,
	      tailMode: tailMode,
	      lastEffect: lastEffectBeforeRendering
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailExpiration = 0;
	    renderState.tailMode = tailMode;
	    renderState.lastEffect = lastEffectBeforeRendering;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.effectTag |= DidCapture;
	  } else {
	    var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    // Outside of blocking mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined, workInProgress.lastEffect);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current$$1 === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }

	  return workInProgress.child;
	}

	function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);

	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;
	          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren;

	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    newChildren = render(newValue);
	    setCurrentPhase(null);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current$$1 !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current$$1.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  var updateExpirationTime = workInProgress.expirationTime;

	  if (updateExpirationTime !== NoWork) {
	    markUnprocessedUpdateTime(updateExpirationTime);
	  } // Check if the children have any pending work.


	  var childExpirationTime = workInProgress.childExpirationTime;

	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current$$1, workInProgress);
	    return workInProgress.child;
	  }
	}

	function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current$$1.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = current$$1;
	      returnFiber.lastEffect = current$$1;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
	    }

	    current$$1.nextEffect = null;
	    current$$1.effectTag = Deletion;
	    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  {
	    if (workInProgress._debugNeedsRemount && current$$1 !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current$$1, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
	    }
	  }

	  if (current$$1 !== null) {
	    var oldProps = current$$1.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	    workInProgress.type !== current$$1.type)) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (updateExpirationTime < renderExpirationTime) {
	      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.

	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;

	        case HostComponent:
	          pushHostContext(workInProgress);

	          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
	            {
	              markSpawnedWork(Never);
	            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	            return null;
	          }

	          break;

	        case ClassComponent:
	          {
	            var Component = workInProgress.type;

	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }

	            break;
	          }

	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;

	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }

	        case Profiler:
	          {
	            // Profiler should only call onRender when one of its descendants actually rendered.
	            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (hasChildWork) {
	              workInProgress.effectTag |= Update;
	            }
	          }

	          break;

	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;

	            if (state !== null) {
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              // child fragment.


	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	              } else {
	                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	                // priority. Bailout.

	                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            } else {
	              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	            }

	            break;
	          }

	        case SuspenseListComponent:
	          {
	            var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;

	            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (didSuspendBefore) {
	              if (_hasChildWork) {
	                // If something was in fallback state last time, and we have all the
	                // same children then we're still in progressive loading state.
	                // Something might get unblocked by state updates or retries in the
	                // tree which will affect the tail. So we need to use the normal
	                // path to compute the correct tail.
	                return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
	              } // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.


	              workInProgress.effectTag |= DidCapture;
	            } // If nothing suspended before and we're rendering the same children,
	            // then the tail doesn't matter. Anything new that suspends will work
	            // in the "together" mode, so we can continue from the state we had.


	            var renderState = workInProgress.memoizedState;

	            if (renderState !== null) {
	              // Reset to the "together" mode in case we've started a different
	              // update in the past but didn't complete it.
	              renderState.rendering = null;
	              renderState.tail = null;
	            }

	            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	            if (_hasChildWork) {
	              break;
	            } else {
	              // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.
	              return null;
	            }
	          }
	      }

	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    } else {
	      // An update was scheduled on this fiber, but there are no new props
	      // nor legacy context. Set this to false. If an update queue or context
	      // consumer produces a changed value, it will set this to true. Otherwise,
	      // the component will assume the children have not changed and bail out.
	      didReceiveUpdate = false;
	    }
	  } else {
	    didReceiveUpdate = false;
	  } // Before entering the begin phase, clear the expiration time.


	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current$$1, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
	      }

	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }

	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

	        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }

	    case HostRoot:
	      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

	    case HostComponent:
	      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

	    case HostText:
	      return updateHostText(current$$1, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

	    case HostPortal:
	      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }

	    case Fragment:
	      return updateFragment(current$$1, workInProgress, renderExpirationTime);

	    case Mode:
	      return updateMode(current$$1, workInProgress, renderExpirationTime);

	    case Profiler:
	      return updateProfiler(current$$1, workInProgress, renderExpirationTime);

	    case ContextProvider:
	      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

	    case ContextConsumer:
	      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

	        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
	      }
	  }

	  {
	    {
	      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      break;

	    case LazyComponent:
	      break;

	    case SimpleMemoComponent:
	    case FunctionComponent:
	      break;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          }
	        }

	        updateHostContainer(workInProgress);
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
	              }
	            } // This can happen when we abort work.


	            break;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on we want to add then top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node needs to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

	            workInProgress.stateNode = instance;
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.


	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        break;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
	              }
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        break;
	      }

	    case ForwardRef:
	      break;

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState;

	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = false;

	        if (current === null) {
	          if (workInProgress.memoizedProps.fallback !== undefined) {
	            popHydrationState(workInProgress);
	          }
	        } else {
	          var prevState = current.memoizedState;
	          prevDidTimeout = prevState !== null;

	          if (!nextDidTimeout && prevState !== null) {
	            // We just switched from the fallback to the normal children.
	            // Delete the fallback.
	            // TODO: Would it be better to store the fallback fragment on
	            // the stateNode during the begin phase?
	            var currentFallbackChild = current.child.sibling;

	            if (currentFallbackChild !== null) {
	              // Deletions go at the beginning of the return fiber's effect list
	              var first = workInProgress.firstEffect;

	              if (first !== null) {
	                workInProgress.firstEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = first;
	              } else {
	                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = null;
	              }

	              currentFallbackChild.effectTag = Deletion;
	            }
	          }
	        }

	        if (nextDidTimeout && !prevDidTimeout) {
	          // If this subtreee is running in blocking mode we can suspend,
	          // otherwise we won't suspend.
	          // TODO: This will still suspend a synchronous tree if anything
	          // in the concurrent tree already suspended during this render.
	          // This is a known bug.
	          if ((workInProgress.mode & BlockingMode) !== NoMode) {
	            // TODO: Move this back to throwException because this is too late
	            // if this is a large tree which is common for initial loads. We
	            // don't know if we should restart a render or not until we get
	            // this marker, and this is too late.
	            // If this render already had a ping or lower pri updates,
	            // and this is the first time we know we're going to suspend we
	            // should be able to immediately restart from within throwException.
	            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

	            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	              // If this was in an invisible tree or a new render, then showing
	              // this boundary is ok.
	              renderDidSuspend();
	            } else {
	              // Otherwise, we're going to have to hide content so we should
	              // suspend for longer if possible.
	              renderDidSuspendDelayIfPossible();
	            }
	          }
	        }

	        {
	          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
	          if (nextDidTimeout || prevDidTimeout) {
	            // If this boundary just timed out, schedule an effect to attach a
	            // retry listener to the proimse. This flag is also used to hide the
	            // primary children. In mutation mode, we also need the flag to
	            // *unhide* children that were previously hidden, so check if the
	            // is currently timed out, too.
	            workInProgress.effectTag |= Update;
	          }
	        }

	        break;
	      }

	    case Fragment:
	      break;

	    case Mode:
	      break;

	    case Profiler:
	      break;

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      break;

	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      break;

	    case ContextConsumer:
	      break;

	    case MemoComponent:
	      break;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        break;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode. We don't do anything
	          // in this mode.
	          break;
	        }

	        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.effectTag |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thennables. Instead, we'll transfer its thennables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThennables = suspended.updateQueue;

	                  if (newThennables !== null) {
	                    workInProgress.updateQueue = newThennables;
	                    workInProgress.effectTag |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect list before doing the second pass since that's now invalid.


	                  if (renderState.lastEffect === null) {
	                    workInProgress.firstEffect = null;
	                  }

	                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

	                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThennables = _suspended.updateQueue;

	              if (_newThennables !== null) {
	                workInProgress.updateQueue = _newThennables;
	                workInProgress.effectTag |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
	                // We need to delete the row we just rendered.
	                // Reset the effect list to what it was before we rendered this
	                // child. The nested children have already appended themselves.
	                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

	                if (lastEffect !== null) {
	                  lastEffect.nextEffect = null;
	                } // We're done.


	                return null;
	              }
	            } else if (now() > renderState.tailExpiration && renderExpirationTime > Never) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. If we can show
	              // them, then they really have the same priority as this render.
	              // So we'll pick it back up the very next render pass once we've had
	              // an opportunity to yield for paint.

	              var nextPriority = renderExpirationTime - 1;
	              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

	              {
	                markSpawnedWork(nextPriority);
	              }
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          if (renderState.tailExpiration === 0) {
	            // Heuristic for how long we're willing to spend rendering rows
	            // until we just give up and show what we have so far.
	            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
	            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
	          } // Pop a row.


	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.lastEffect = workInProgress.lastEffect;
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

	          return next;
	        }

	        break;
	      }

	    case FundamentalComponent:
	      {

	        break;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    default:
	      {
	        {
	          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
	        }
	      }

	  }

	  return null;
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var effectTag = workInProgress.effectTag;

	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;

	        if (!((_effectTag & DidCapture) === NoEffect)) {
	          {
	            throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
	          }
	        }

	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);

	        var _effectTag2 = workInProgress.effectTag;

	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	function logCapturedError(capturedError) {

	  var error = capturedError.error;

	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      } // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.


	      console.error(error); // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      } else {
	        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }

	    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	    console.error(combinedMessage);
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;

	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current$$1, instance) {
	  startPhaseTimer(current$$1, 'componentWillUnmount');
	  instance.props = current$$1.memoizedProps;
	  instance.state = current$$1.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	}; // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current$$1, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current$$1, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current$$1) {
	  var ref = current$$1.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);

	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current$$1, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current$$1, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);

	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current$$1, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current$$1 !== null) {
	            var prevProps = current$$1.memoizedProps;
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);
	                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }

	        return;
	      }

	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;

	    default:
	      {
	        {
	          {
	            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }
	      }
	  }
	}

	function commitHookEffectList(unmountTag, mountTag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & unmountTag) !== NoEffect$1) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          destroy();
	        }
	      }

	      if ((effect.tag & mountTag) !== NoEffect$1) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var _destroy = effect.destroy;

	          if (_destroy !== undefined && typeof _destroy !== 'function') {
	            var addendum = void 0;

	            if (_destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof _destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + _destroy;
	            }

	            warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  if ((finishedWork.effectTag & Passive) !== NoEffect) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
	          commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
	          break;
	        }
	    }
	  }
	}

	function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
	        break;
	      }

	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (finishedWork.effectTag & Update) {
	          if (current$$1 === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }

	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }

	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }

	        var updateQueue = finishedWork.updateQueue;

	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	            }
	          } // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.


	          commitUpdateQueue(finishedWork, updateQueue, instance);
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;

	        if (_updateQueue !== null) {
	          var _instance = null;

	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;

	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }

	          commitUpdateQueue(finishedWork, _updateQueue, _instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.

	        if (current$$1 === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props);
	        }

	        return;
	      }

	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }

	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }

	    case Profiler:
	      {
	        {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (typeof onRender === 'function') {
	            {
	              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	    case IncompleteClassComponent:
	    case FundamentalComponent:
	    case ScopeComponent:
	      return;

	    default:
	      {
	        {
	          {
	            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;

	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        // primary child fragment, which should remain hidden.
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current$$1) {
	  var currentRef = current$$1.ref;

	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	} // User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay


	function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
	  onCommitUnmount(current$$1);

	  switch (current$$1.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        var updateQueue = current$$1.updateQueue;

	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;

	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next; // When the owner fiber is deleted, the destroy function of a passive
	            // effect hook is called during the synchronous commit phase. This is
	            // a concession to implementation complexity. Calling it in the
	            // passive effect phase (like they usually are, when dependencies
	            // change during an update) would require either traversing the
	            // children of the deleted fiber again, or including unmount effects
	            // as part of the fiber effect list.
	            //
	            // Because this is during the sync commit phase, we need to change
	            // the priority.
	            //
	            // TODO: Reconsider this implementation trade off.

	            var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
	            runWithPriority$2(priorityLevel, function () {
	              var effect = firstEffect;

	              do {
	                var destroy = effect.destroy;

	                if (destroy !== undefined) {
	                  safelyCallDestroy(current$$1, destroy);
	                }

	                effect = effect.next;
	              } while (effect !== firstEffect);
	            });
	          }
	        }

	        break;
	      }

	    case ClassComponent:
	      {
	        safelyDetachRef(current$$1);
	        var instance = current$$1.stateNode;

	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current$$1, instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {

	        safelyDetachRef(current$$1);
	        return;
	      }

	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
	        }

	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case DehydratedFragment:
	      {

	        return;
	      }
	  }
	}

	function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  // we do an inner loop while we're still inside the host node.
	  var node = root;

	  while (true) {
	    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.

	    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	     node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === root) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current$$1) {
	  var alternate = current$$1.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.

	  current$$1.return = null;
	  current$$1.child = null;
	  current$$1.memoizedState = null;
	  current$$1.updateQueue = null;
	  current$$1.dependencies = null;
	  current$$1.alternate = null;
	  current$$1.firstEffect = null;
	  current$$1.lastEffect = null;
	  current$$1.pendingProps = null;
	  current$$1.memoizedProps = null;

	  if (alternate !== null) {
	    detachFiber(alternate);
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  {
	    {
	      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  }
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  var parent;
	  var isContainer;
	  var parentStateNode = parentFiber.stateNode;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentStateNode;
	      isContainer = false;
	      break;

	    case HostRoot:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case HostPortal:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case FundamentalComponent:

	    // eslint-disable-next-line-no-fallthrough

	    default:
	      {
	        {
	          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
	        }
	      }

	  }

	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent); // Clear ContentReset from the effect tag

	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.

	  var node = finishedWork;

	  while (true) {
	    var isHost = node.tag === HostComponent || node.tag === HostText;

	    if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
	      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	      if (before) {
	        if (isContainer) {
	          insertInContainerBefore(parent, stateNode, before);
	        } else {
	          insertBefore(parent, stateNode, before);
	        }
	      } else {
	        if (isContainer) {
	          appendChildToContainer(parent, stateNode);
	        } else {
	          appendChild(parent, stateNode);
	        }
	      }
	    } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === finishedWork) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.

	  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

	  var currentParent;
	  var currentParentIsContainer;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;

	      findParent: while (true) {
	        if (!(parent !== null)) {
	          {
	            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }

	        var parentStateNode = parent.stateNode;

	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parentStateNode;
	            currentParentIsContainer = false;
	            break findParent;

	          case HostRoot:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	          case HostPortal:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	        }

	        parent = parent.return;
	      }

	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.

	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      } // Don't visit children because we already visited them.

	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true; // Visit children because portals might contain host components.

	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }

	    if (node === current$$1) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === current$$1) {
	        return;
	      }

	      node = node.return;

	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
	  }

	  detachFiber(current$$1);
	}

	function commitWork(current$$1, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        // Note: We currently never use MountMutation, but useLayout uses
	        // UnmountMutation.
	        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        return;
	      }

	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.

	          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
	          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;

	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps);
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        if (!(finishedWork.stateNode !== null)) {
	          {
	            throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }

	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.

	        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }

	    case HostRoot:
	      {
	        {
	          var _root = finishedWork.stateNode;

	          if (_root.hydrate) {
	            // We've just hydrated. No need to hydrate again.
	            _root.hydrate = false;
	            commitHydratedContainer(_root.containerInfo);
	          }
	        }

	        return;
	      }

	    case Profiler:
	      {
	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseComponent(finishedWork);
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	      {
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case IncompleteClassComponent:
	      {
	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }

	    default:
	      {
	        {
	          {
	            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }
	      }
	  }
	}

	function commitSuspenseComponent(finishedWork) {
	  var newState = finishedWork.memoizedState;
	  var newDidTimeout;
	  var primaryChildParent = finishedWork;

	  if (newState === null) {
	    newDidTimeout = false;
	  } else {
	    newDidTimeout = true;
	    primaryChildParent = finishedWork.child;
	    markCommitTimeOfFallback();
	  }

	  if ( primaryChildParent !== null) {
	    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	  }
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current$$1 = finishedWork.alternate;

	    if (current$$1 !== null) {
	      var prevState = current$$1.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of thenables.
	  // For each thenable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var thenables = finishedWork.updateQueue;

	  if (thenables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    thenables.forEach(function (thenable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

	      if (!retryCache.has(thenable)) {
	        {
	          if (thenable.__reactDoNotTraceInteractions !== true) {
	            retry = tracing$1.unstable_wrap(retry);
	          }
	        }

	        retryCache.add(thenable);
	        thenable.then(retry, retry);
	      }
	    });
	  }
	}

	function commitResetTextContent(current$$1) {

	  resetTextContent(current$$1.stateNode);
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error = errorInfo.value;

	    update.payload = function () {
	      logError(fiber, errorInfo);
	      return getDerivedStateFromError(error);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

	        logError(fiber, errorInfo);
	      }

	      var error = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
	        }
	      }
	    };
	  } else {
	    update.callback = function () {
	      markFailedErrorBoundaryForHotReloading(fiber);
	    };
	  }

	  return update;
	}

	function attachPingListener(root, renderExpirationTime, thenable) {
	  // Attach a listener to the promise to "ping" the root and retry. But
	  // only if one does not already exist for the current render expiration
	  // time (which acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(thenable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(thenable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(thenable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(renderExpirationTime)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(renderExpirationTime);
	    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
	    thenable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;
	    checkForWrongSuspensePriorityInDEV(sourceFiber);
	    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

	    var _workInProgress = returnFiber;

	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
	        // Found the nearest boundary.
	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        // attach another listener to flip the boundary back to its normal state.
	        var thenables = _workInProgress.updateQueue;

	        if (thenables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(thenable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          thenables.add(thenable);
	        } // If the boundary is outside of blocking mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a blocking mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.


	        if ((_workInProgress.mode & BlockingMode) === NoMode) {
	          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.

	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;

	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force update to
	              // prevent a bail out.
	              var update = createUpdate(Sync, null);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          } // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.


	          sourceFiber.expirationTime = Sync; // Exit without suspending.

	          return;
	        } // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.
	        //
	        // After this we'll use a set of heuristics to determine whether this
	        // render pass will run to completion or restart or "suspend" the commit.
	        // The actual logic for this is spread out in different places.
	        //
	        // This first principle is that if we're going to suspend when we complete
	        // a root, then we should also restart if we get an update or ping that
	        // might unsuspend it, and vice versa. The only reason to suspend is
	        // because you think you might want to restart before committing. However,
	        // it doesn't make sense to restart only while in the period we're suspended.
	        //
	        // Restarting too aggressively is also not good because it starves out any
	        // intermediate loading state. So we use heuristics to determine when.
	        // Suspense Heuristics
	        //
	        // If nothing threw a Promise or all the same fallbacks are already showing,
	        // then don't suspend/restart.
	        //
	        // If this is an initial render of a new tree of Suspense boundaries and
	        // those trigger a fallback, then don't suspend/restart. We want to ensure
	        // that we can show the initial loading state as quickly as possible.
	        //
	        // If we hit a "Delayed" case, such as when we'd switch from content back into
	        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
	        // this case. If none is defined, JND is used instead.
	        //
	        // If we're already showing a fallback and it gets "retried", allowing us to show
	        // another level, but there's still an inner boundary that would show a fallback,
	        // then we suspend/restart for 500ms since the last time we showed a fallback
	        // anywhere in the tree. This effectively throttles progressive loading into a
	        // consistent train of commits. This also gives us an opportunity to restart to
	        // get to the completed state slightly earlier.
	        //
	        // If there's ambiguity due to batching it's resolved in preference of:
	        // 1) "delayed", 2) "initial render", 3) "retry".
	        //
	        // We want to ensure that a "busy" state doesn't get force committed. We want to
	        // ensure that new initial loading states can commit as soon as possible.


	        attachPingListener(root, renderExpirationTime, thenable);
	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      } // This boundary already captured during this render. Continue to the next
	      // boundary.


	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?


	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  } // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.


	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;

	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
	var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
	var NoContext =
	/*                    */
	0;
	var BatchedContext =
	/*               */
	1;
	var EventContext =
	/*                 */
	2;
	var DiscreteEventContext =
	/*         */
	4;
	var LegacyUnbatchedContext =
	/*       */
	8;
	var RenderContext =
	/*                */
	16;
	var CommitContext =
	/*                */
	32;
	var RootIncomplete = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	// Describes where we are in the React execution stack
	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The expiration time we're rendering

	var renderExpirationTime = NoWork; // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
	// This is conceptually a time stamp but expressed in terms of an ExpirationTime
	// because we deal mostly with expiration times in the hot path, so this avoids
	// the conversion happening in the hot path.

	var workInProgressRootLatestProcessedExpirationTime = Sync;
	var workInProgressRootLatestSuspenseTimeout = Sync;
	var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
	// This flag determines if it might be worthwhile to restart if an opportunity
	// happens latere.

	var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500;
	var nextEffect = null;
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsRenderPriority = NoPriority;
	var pendingPassiveEffectsExpirationTime = NoWork;
	var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
	// during the commit phase. This enables them to be traced across components
	// that spawn new work during render. E.g. hidden boundaries, suspended SSR
	// hydration or SuspenseList.

	var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
	// time). However, if two updates are scheduled within the same event, we
	// should treat their start times as simultaneous, even if the actual clock
	// time has advanced between the first and second call.
	// In other words, because expiration times determine how updates are batched,
	// we want all updates of like priority that occur within the same event to
	// receive the same expiration time. Otherwise we get tearing.

	var currentEventTime = NoWork;
	function requestCurrentTimeForUpdate() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return msToExpirationTime(now());
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoWork) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = msToExpirationTime(now());
	  return currentEventTime;
	}
	function getCurrentTime() {
	  return msToExpirationTime(now());
	}
	function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return Sync;
	  }

	  var priorityLevel = getCurrentPriorityLevel();

	  if ((mode & ConcurrentMode) === NoMode) {
	    return priorityLevel === ImmediatePriority ? Sync : Batched;
	  }

	  if ((executionContext & RenderContext) !== NoContext) {
	    // Use whatever time we're already rendering
	    // TODO: Should there be a way to opt out, like with `runWithPriority`?
	    return renderExpirationTime;
	  }

	  var expirationTime;

	  if (suspenseConfig !== null) {
	    // Compute an expiration time based on the Suspense timeout.
	    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	  } else {
	    // Compute an expiration time based on the Scheduler priority.
	    switch (priorityLevel) {
	      case ImmediatePriority:
	        expirationTime = Sync;
	        break;

	      case UserBlockingPriority$2:
	        // TODO: Rename this to computeUserBlockingExpiration
	        expirationTime = computeInteractiveExpiration(currentTime);
	        break;

	      case NormalPriority:
	      case LowPriority:
	        // TODO: Handle LowPriority
	        // TODO: Rename this to... something better.
	        expirationTime = computeAsyncExpiration(currentTime);
	        break;

	      case IdlePriority:
	        expirationTime = Idle;
	        break;

	      default:
	        {
	          {
	            throw Error("Expected a valid priority level");
	          }
	        }

	    }
	  } // If we're in the middle of rendering a tree, do not update at the same
	  // expiration time that is already rendering.
	  // TODO: We shouldn't have to do this if the update is on a different root.
	  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
	  // the root when we check for this condition.


	  if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
	    // This is a trick to move this update into a separate batch
	    expirationTime -= 1;
	  }

	  return expirationTime;
	}
	function scheduleUpdateOnFiber(fiber, expirationTime) {
	  checkForNestedUpdates();
	  warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
	  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

	  if (root === null) {
	    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
	    return;
	  }

	  checkForInterruption(fiber, expirationTime);
	  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
	  // priority as an argument to that function and this one.

	  var priorityLevel = getCurrentPriorityLevel();

	  if (expirationTime === Sync) {
	    if ( // Check if we're inside unbatchedUpdates
	    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
	    (executionContext & (RenderContext | CommitContext)) === NoContext) {
	      // Register pending interactions on the root to avoid losing traced interaction data.
	      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
	      // root inside of batchedUpdates should be synchronous, but layout updates
	      // should be deferred until the end of the batch.

	      performSyncWorkOnRoot(root);
	    } else {
	      ensureRootIsScheduled(root);
	      schedulePendingInteractions(root, expirationTime);

	      if (executionContext === NoContext) {
	        // Flush the synchronous work now, unless we're already working or inside
	        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	        // scheduleCallbackForFiber to preserve the ability to schedule a callback
	        // without immediately flushing it. We only do this for user-initiated
	        // updates, to preserve historical behavior of legacy mode.
	        flushSyncCallbackQueue();
	      }
	    }
	  } else {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, expirationTime);
	  }

	  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
	  // discrete, even inside a discrete event.
	  priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority)) {
	    // This is the result of a discrete event. Track the lowest priority
	    // discrete update per root so we can flush them early, if needed.
	    if (rootsWithPendingDiscreteUpdates === null) {
	      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
	    } else {
	      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

	      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
	        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
	      }
	    }
	  }
	}
	var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
	// work without treating it as a typical update that originates from an event;
	// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
	// on a fiber.

	function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  } // Walk the parent path to the root and update the child expiration time.


	  var node = fiber.return;
	  var root = null;

	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;

	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;

	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }

	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }

	      node = node.return;
	    }
	  }

	  if (root !== null) {
	    if (workInProgressRoot === root) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that's unprocessed work on this root.
	      markUnprocessedUpdateTime(expirationTime);

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: This happens to work when receiving an update during the render
	        // phase, because of the trick inside computeExpirationForFiber to
	        // subtract 1 from `renderExpirationTime` to move it into a
	        // separate bucket. But we should probably model it with an exception,
	        // using the same mechanism we use to force hydration of a subtree.
	        // TODO: This does not account for low pri updates that were already
	        // scheduled before the root started rendering. Need to track the next
	        // pending expiration time (perhaps by backtracking the return path) and
	        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
	        markRootSuspendedAtTime(root, renderExpirationTime);
	      }
	    } // Mark that the root has a pending update.


	    markRootUpdatedAtTime(root, expirationTime);
	  }

	  return root;
	}

	function getNextRootExpirationTimeToWorkOn(root) {
	  // Determines the next expiration time that the root should render, taking
	  // into account levels that may be suspended, or levels that may have
	  // received a ping.
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    return lastExpiredTime;
	  } // "Pending" refers to any update that hasn't committed yet, including if it
	  // suspended. The "suspended" range is therefore a subset.


	  var firstPendingTime = root.firstPendingTime;

	  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
	    // The highest priority pending time is not suspended. Let's work on that.
	    return firstPendingTime;
	  } // If the first pending time is suspended, check if there's a lower priority
	  // pending level that we know about. Or check if we received a ping. Work
	  // on whichever is higher priority.


	  var lastPingedTime = root.lastPingedTime;
	  var nextKnownPendingLevel = root.nextKnownPendingLevel;
	  return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the
	// expiration time of the existing task is the same as the expiration time of
	// the next level that the root has work on. This function is called on every
	// update, and right before exiting a task.


	function ensureRootIsScheduled(root) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    // Special case: Expired work should flush synchronously.
	    root.callbackExpirationTime = Sync;
	    root.callbackPriority = ImmediatePriority;
	    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    return;
	  }

	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
	  var existingCallbackNode = root.callbackNode;

	  if (expirationTime === NoWork) {
	    // There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      root.callbackNode = null;
	      root.callbackExpirationTime = NoWork;
	      root.callbackPriority = NoPriority;
	    }

	    return;
	  } // TODO: If this is an update, we already read the current time. Pass the
	  // time as an argument.


	  var currentTime = requestCurrentTimeForUpdate();
	  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
	  // expiration time. Otherwise, we'll cancel it and schedule a new one.

	  if (existingCallbackNode !== null) {
	    var existingCallbackPriority = root.callbackPriority;
	    var existingCallbackExpirationTime = root.callbackExpirationTime;

	    if ( // Callback must have the exact same expiration time.
	    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
	    existingCallbackPriority >= priorityLevel) {
	      // Existing callback is sufficient.
	      return;
	    } // Need to schedule a new task.
	    // TODO: Instead of scheduling a new task, we should be able to change the
	    // priority of the existing one.


	    cancelCallback(existingCallbackNode);
	  }

	  root.callbackExpirationTime = expirationTime;
	  root.callbackPriority = priorityLevel;
	  var callbackNode;

	  if (expirationTime === Sync) {
	    // Sync React callbacks are scheduled on a special internal queue
	    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	  } else {
	    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
	    // ordering because tasks are processed in timeout order.
	    {
	      timeout: expirationTimeToMs(expirationTime) - now()
	    });
	  }

	  root.callbackNode = callbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.
	  currentEventTime = NoWork;

	  if (didTimeout) {
	    // The render task took too long to complete. Mark the current time as
	    // expired to synchronously render all expired work in a single batch.
	    var currentTime = requestCurrentTimeForUpdate();
	    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

	    ensureRootIsScheduled(root);
	    return null;
	  } // Determine the next expiration time to work on, using the fields stored
	  // on the root.


	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

	  if (expirationTime !== NoWork) {
	    var originalCallbackNode = root.callbackNode;

	    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	      {
	        throw Error("Should not already be working.");
	      }
	    }

	    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	    // and prepare a fresh one. Otherwise we'll continue where we left off.

	    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
	      prepareFreshStack(root, expirationTime);
	      startWorkOnPendingInteractions(root, expirationTime);
	    } // If we have a work-in-progress fiber, it means there's still work to do
	    // in this root.


	    if (workInProgress !== null) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher();
	      var prevInteractions = pushInteractions(root);
	      startWorkLoopTimer(workInProgress);

	      do {
	        try {
	          workLoopConcurrent();
	          break;
	        } catch (thrownValue) {
	          handleError(root, thrownValue);
	        }
	      } while (true);

	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      popDispatcher(prevDispatcher);

	      {
	        popInteractions(prevInteractions);
	      }

	      if (workInProgressRootExitStatus === RootFatalErrored) {
	        var fatalError = workInProgressRootFatalError;
	        stopInterruptedWorkLoopTimer();
	        prepareFreshStack(root, expirationTime);
	        markRootSuspendedAtTime(root, expirationTime);
	        ensureRootIsScheduled(root);
	        throw fatalError;
	      }

	      if (workInProgress !== null) {
	        // There's still work left over. Exit without committing.
	        stopInterruptedWorkLoopTimer();
	      } else {
	        // We now have a consistent tree. The next step is either to commit it,
	        // or, if something suspended, wait to commit it after a timeout.
	        stopFinishedWorkLoopTimer();
	        var finishedWork = root.finishedWork = root.current.alternate;
	        root.finishedExpirationTime = expirationTime;
	        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
	      }

	      ensureRootIsScheduled(root);

	      if (root.callbackNode === originalCallbackNode) {
	        // The task node scheduled for this root is the same one that's
	        // currently executed. Need to return a continuation.
	        return performConcurrentWorkOnRoot.bind(null, root);
	      }
	    }
	  }

	  return null;
	}

	function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;

	  switch (exitStatus) {
	    case RootIncomplete:
	    case RootFatalErrored:
	      {
	        {
	          {
	            throw Error("Root did not complete. This is a bug in React.");
	          }
	        }
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // If this was an async render, the error may have happened due to
	        // a mutation in a concurrent event. Try rendering one more time,
	        // synchronously, to see if the error goes away. If there are
	        // lower priority updates, let's include those, too, in case they
	        // fix the inconsistency. Render at Idle to include all updates.
	        // If it was Idle or Never or some not-yet-invented time, render
	        // at that time.
	        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
	        // and therefore not hit this path again.

	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        }

	        flushSuspensePriorityWarningInDEV(); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.
	        // If we have processed new updates during this render, we may now
	        // have a new loading state ready. We want to ensure that we commit
	        // that as soon as possible.

	        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

	        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // If we have not processed any new updates during this pass, then
	          // this is either a retry of an existing fallback state or a
	          // hidden tree. Hidden trees shouldn't be batched with other work
	          // and after that's fixed it can only be a retry. We're going to
	          // throttle committing retries so that we don't show too many
	          // loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            if (workInProgressRootHasPendingPing) {
	              var lastPingedTime = root.lastPingedTime;

	              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
	                // This render was pinged but we didn't get to restart
	                // earlier so try restarting now instead.
	                root.lastPingedTime = expirationTime;
	                prepareFreshStack(root, expirationTime);
	                break;
	              }
	            }

	            var nextTime = getNextRootExpirationTimeToWorkOn(root);

	            if (nextTime !== NoWork && nextTime !== expirationTime) {
	              // There's additional work on this root.
	              break;
	            }

	            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              root.lastPingedTime = lastSuspendedTime;
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var _lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === _lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        }

	        flushSuspensePriorityWarningInDEV();

	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // We're suspended in a state that should be avoided. We'll try to
	          // avoid committing it for as long as the timeouts let us.
	          if (workInProgressRootHasPendingPing) {
	            var _lastPingedTime = root.lastPingedTime;

	            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
	              // This render was pinged but we didn't get to restart earlier
	              // so try restarting now instead.
	              root.lastPingedTime = expirationTime;
	              prepareFreshStack(root, expirationTime);
	              break;
	            }
	          }

	          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

	          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
	            // There's additional work on this root.
	            break;
	          }

	          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
	            // We should prefer to render the fallback of at the last
	            // suspended level. Ping the last suspended level to try
	            // rendering it again.
	            root.lastPingedTime = _lastSuspendedTime;
	            break;
	          }

	          var _msUntilTimeout;

	          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
	            // We have processed a suspense config whose expiration time we
	            // can use as the timeout.
	            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
	          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
	            // This should never normally happen because only new updates
	            // cause delayed states, so we should have processed something.
	            // However, this could also happen in an offscreen tree.
	            _msUntilTimeout = 0;
	          } else {
	            // If we don't have a suspense config, we're going to use a
	            // heuristic to determine how long we can suspend.
	            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
	            var currentTimeMs = now();
	            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
	            var timeElapsed = currentTimeMs - eventTimeMs;

	            if (timeElapsed < 0) {
	              // We get this wrong some time since we estimate the time.
	              timeElapsed = 0;
	            }

	            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
	            // event time is exact instead of inferred from expiration time
	            // we don't need this.

	            if (timeUntilExpirationMs < _msUntilTimeout) {
	              _msUntilTimeout = timeUntilExpirationMs;
	            }
	          } // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
	          // If we have exceeded the minimum loading delay, which probably
	          // means we have shown a spinner already, we might have to suspend
	          // a bit longer to ensure that the spinner is shown for
	          // enough time.
	          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

	          if (_msUntilTimeout2 > 10) {
	            markRootSuspendedAtTime(root, expirationTime);
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
	            break;
	          }
	        }

	        commitRoot(root);
	        break;
	      }

	    default:
	      {
	        {
	          {
	            throw Error("Unknown root exit status.");
	          }
	        }
	      }
	  }
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  // Check if there's expired work on this root. Otherwise, render at Sync.
	  var lastExpiredTime = root.lastExpiredTime;
	  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

	  if (root.finishedExpirationTime === expirationTime) {
	    // There's already a pending commit at this expiration time.
	    // TODO: This is poorly factored. This case only exists for the
	    // batch.commit() API.
	    commitRoot(root);
	  } else {
	    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	      {
	        throw Error("Should not already be working.");
	      }
	    }

	    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	    // and prepare a fresh one. Otherwise we'll continue where we left off.

	    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
	      prepareFreshStack(root, expirationTime);
	      startWorkOnPendingInteractions(root, expirationTime);
	    } // If we have a work-in-progress fiber, it means there's still work to do
	    // in this root.


	    if (workInProgress !== null) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher();
	      var prevInteractions = pushInteractions(root);
	      startWorkLoopTimer(workInProgress);

	      do {
	        try {
	          workLoopSync();
	          break;
	        } catch (thrownValue) {
	          handleError(root, thrownValue);
	        }
	      } while (true);

	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      popDispatcher(prevDispatcher);

	      {
	        popInteractions(prevInteractions);
	      }

	      if (workInProgressRootExitStatus === RootFatalErrored) {
	        var fatalError = workInProgressRootFatalError;
	        stopInterruptedWorkLoopTimer();
	        prepareFreshStack(root, expirationTime);
	        markRootSuspendedAtTime(root, expirationTime);
	        ensureRootIsScheduled(root);
	        throw fatalError;
	      }

	      if (workInProgress !== null) {
	        // This is a sync render, so we should have finished the whole tree.
	        {
	          {
	            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
	          }
	        }
	      } else {
	        // We now have a consistent tree. Because this is a sync render, we
	        // will commit it even if something suspended.
	        stopFinishedWorkLoopTimer();
	        root.finishedWork = root.current.alternate;
	        root.finishedExpirationTime = expirationTime;
	        finishSyncRender(root, workInProgressRootExitStatus);
	      } // Before exiting, make sure there's a callback scheduled for the next
	      // pending level.


	      ensureRootIsScheduled(root);
	    }
	  }

	  return null;
	}

	function finishSyncRender(root, exitStatus, expirationTime) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;

	  {
	    if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
	      flushSuspensePriorityWarningInDEV();
	    }
	  }

	  commitRoot(root);
	}
	function flushDiscreteUpdates() {
	  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
	  // those two cases. Need to fix this before exposing flushDiscreteUpdates
	  // as a public API.
	  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
	    if ( (executionContext & RenderContext) !== NoContext) {
	      warning$1(false, 'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
	    } // We're already rendering, so we can't synchronously flush pending work.
	    // This is probably a nested event dispatch triggered by a lifecycle/effect,
	    // like `el.focus()`. Exit.


	    return;
	  }

	  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
	  // they fire before the next serial event.

	  flushPassiveEffects();
	}

	function syncUpdates(fn, a, b, c) {
	  return runWithPriority$2(ImmediatePriority, fn.bind(null, a, b, c));
	}

	function flushPendingDiscreteUpdates() {
	  if (rootsWithPendingDiscreteUpdates !== null) {
	    // For each root with pending discrete updates, schedule a callback to
	    // immediately flush them.
	    var roots = rootsWithPendingDiscreteUpdates;
	    rootsWithPendingDiscreteUpdates = null;
	    roots.forEach(function (expirationTime, root) {
	      markRootExpiredAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	    }); // Now flush the immediate queue.

	    flushSyncCallbackQueue();
	  }
	}

	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function batchedEventUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= EventContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function discreteUpdates$1(fn, a, b, c) {
	  var prevExecutionContext = executionContext;
	  executionContext |= DiscreteEventContext;

	  try {
	    // Should this
	    return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function unbatchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext &= ~BatchedContext;
	  executionContext |= LegacyUnbatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function flushSync(fn, a) {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    {
	      {
	        throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
	      }
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return runWithPriority$2(ImmediatePriority, fn.bind(null, a));
	  } finally {
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    flushSyncCallbackQueue();
	  }
	}

	function prepareFreshStack(root, expirationTime) {
	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  workInProgress = createWorkInProgress(root.current, null);
	  renderExpirationTime = expirationTime;
	  workInProgressRootExitStatus = RootIncomplete;
	  workInProgressRootFatalError = null;
	  workInProgressRootLatestProcessedExpirationTime = Sync;
	  workInProgressRootLatestSuspenseTimeout = Sync;
	  workInProgressRootCanSuspendUsingConfig = null;
	  workInProgressRootNextUnprocessedUpdateTime = NoWork;
	  workInProgressRootHasPendingPing = false;

	  {
	    spawnedWorkDuringRender = null;
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	    componentsThatTriggeredHighPriSuspend = null;
	  }
	}

	function handleError(root, thrownValue) {
	  do {
	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooks();
	      resetCurrentFiber();

	      if (workInProgress === null || workInProgress.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue;
	        return null;
	      }

	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	      }

	      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
	      workInProgress = completeUnitOfWork(workInProgress);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;
	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher(root) {
	  var prevDispatcher = ReactCurrentDispatcher.current;
	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher.current = prevDispatcher;
	}

	function pushInteractions(root) {
	  {
	    var prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	    return prevInteractions;
	  }
	}

	function popInteractions(prevInteractions) {
	  {
	    tracing$1.__interactionsRef.current = prevInteractions;
	  }
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
	  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
	    workInProgressRootLatestProcessedExpirationTime = expirationTime;
	  }

	  if (suspenseConfig !== null) {
	    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
	      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

	      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
	    }
	  }
	}
	function markUnprocessedUpdateTime(expirationTime) {
	  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
	    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
	  }
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there's a lower priority update somewhere else in the tree.


	  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
	    // Mark the current render as suspended, and then mark that there's a
	    // pending update.
	    // TODO: This should immediately interrupt the current render, instead
	    // of waiting until the next time we yield.
	    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
	    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
	  }
	}
	function renderDidError() {
	  if (workInProgressRootExitStatus !== RootCompleted) {
	    workInProgressRootExitStatus = RootErrored;
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootIncomplete;
	}

	function inferTimeFromExpirationTime(expirationTime) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	}

	function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time by subtracting the timeout
	  // that was added to the event time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current$$1 = unitOfWork.alternate;
	  startWorkTimer(unitOfWork);
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(unitOfWork);
	  }

	  ReactCurrentOwner$2.current = null;
	  return next;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  workInProgress = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current$$1 = workInProgress.alternate;
	    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      setCurrentFiber(workInProgress);
	      var next = void 0;

	      if ( (workInProgress.mode & ProfileMode) === NoMode) {
	        next = completeWork(current$$1, workInProgress, renderExpirationTime);
	      } else {
	        startProfilerTimer(workInProgress);
	        next = completeWork(current$$1, workInProgress, renderExpirationTime); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	      }

	      stopWorkTimer(workInProgress);
	      resetCurrentFiber();
	      resetChildExpirationTime(workInProgress);

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return next;
	      }

	      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }

	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }

	          returnFiber.lastEffect = workInProgress.lastEffect;
	        } // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if needed,
	        // by doing multiple passes over the effect list. We don't want to
	        // schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.


	        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
	        // list. PerformedWork effect is read by React DevTools but shouldn't be
	        // committed.

	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }

	          returnFiber.lastEffect = workInProgress;
	        }
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


	      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        workInProgress.actualDuration = actualDuration;
	      }

	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        // TODO: The name stopFailedWorkTimer is misleading because Suspense
	        // also captures and restarts.
	        stopFailedWorkTimer(workInProgress);
	        _next.effectTag &= HostEffectMask;
	        return _next;
	      }

	      stopWorkTimer(workInProgress);

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }
	    }

	    var siblingFiber = workInProgress.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      return siblingFiber;
	    } // Otherwise, return to the parent


	    workInProgress = returnFiber;
	  } while (workInProgress !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootCompleted;
	  }

	  return null;
	}

	function getRemainingExpirationTime(fiber) {
	  var updateExpirationTime = fiber.expirationTime;
	  var childExpirationTime = fiber.childExpirationTime;
	  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
	}

	function resetChildExpirationTime(completedWork) {
	  if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

	  if ( (completedWork.mode & ProfileMode) !== NoMode) {
	    // In profiling mode, resetChildExpirationTime is also used to reset
	    // profiler durations.
	    var actualDuration = completedWork.actualDuration;
	    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration. If
	    // the fiber has not been cloned though, (meaning no work was done), then
	    // this value will reflect the amount of time spent working on a previous
	    // render. In that case it should not bubble. We determine whether it was
	    // cloned by comparing the child pointer.

	    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
	    var child = completedWork.child;

	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;

	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }

	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }

	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }

	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }

	    completedWork.actualDuration = actualDuration;
	    completedWork.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = completedWork.child;

	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;

	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }

	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }

	      _child = _child.sibling;
	    }
	  }

	  completedWork.childExpirationTime = newChildExpirationTime;
	}

	function commitRoot(root) {
	  var renderPriorityLevel = getCurrentPriorityLevel();
	  runWithPriority$2(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
	  return null;
	}

	function commitRootImpl(root, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error("Should not already be working.");
	    }
	  }

	  var finishedWork = root.finishedWork;
	  var expirationTime = root.finishedExpirationTime;

	  if (finishedWork === null) {
	    return null;
	  }

	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;

	  if (!(finishedWork !== root.current)) {
	    {
	      throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
	    }
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackExpirationTime = NoWork;
	  root.callbackPriority = NoPriority;
	  root.nextKnownPendingLevel = NoWork;
	  startCommitTimer(); // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
	  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    renderExpirationTime = NoWork;
	  } // This indicates that the last root we worked on is not the same one that
	  // we're committing now. This most commonly happens when a suspended root
	  // times out.
	  // Get the list of effects.


	  var firstEffect;

	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if it
	    // had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  if (firstEffect !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext;
	    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    startCommitSnapshotEffectsTimer();
	    prepareForCommit(root.containerInfo);
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error("Should be working on an effect.");
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(nextEffect, error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitSnapshotEffectsTimer();

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    } // The next phase is the mutation phase, where we mutate the host tree.


	    startCommitHostEffectsTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error("Should be working on an effect.");
	            }
	          }

	          var _error = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitHostEffectsTimer();
	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
	    // the host tree after it's been mutated. The idiomatic use case for this is
	    // layout, but class component lifecycles also fire here for legacy reasons.

	    startCommitLifeCyclesTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error("Should be working on an effect.");
	            }
	          }

	          var _error2 = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error2);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitLifeCyclesTimer();
	    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
	    // opportunity to paint.

	    requestPaint();

	    {
	      popInteractions(prevInteractions);
	    }

	    executionContext = prevExecutionContext;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    startCommitSnapshotEffectsTimer();
	    stopCommitSnapshotEffectsTimer();

	    {
	      recordCommitTime();
	    }

	    startCommitHostEffectsTimer();
	    stopCommitHostEffectsTimer();
	    startCommitLifeCyclesTimer();
	    stopCommitLifeCyclesTimer();
	  }

	  stopCommitTimer();
	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsExpirationTime = expirationTime;
	    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
	  } else {
	    // We are done with the effect chain at this point so let's clear the
	    // nextEffect pointers to assist with GC. If we have passive effects, we'll
	    // clear this in flushPassiveEffects.
	    nextEffect = firstEffect;

	    while (nextEffect !== null) {
	      var nextNextEffect = nextEffect.nextEffect;
	      nextEffect.nextEffect = null;
	      nextEffect = nextNextEffect;
	    }
	  } // Check if there's remaining work on this root


	  var remainingExpirationTime = root.firstPendingTime;

	  if (remainingExpirationTime !== NoWork) {
	    {
	      if (spawnedWorkDuringRender !== null) {
	        var expirationTimes = spawnedWorkDuringRender;
	        spawnedWorkDuringRender = null;

	        for (var i = 0; i < expirationTimes.length; i++) {
	          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
	        }
	      }

	      schedulePendingInteractions(root, remainingExpirationTime);
	    }
	  } else {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      // If there are no passive effects, then we can complete the pending interactions.
	      // Otherwise, we'll wait until after the passive effects are flushed.
	      // Wait to do this until after remaining work has been scheduled,
	      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
	      finishPendingInteractions(root, expirationTime);
	    }
	  }

	  if (remainingExpirationTime === Sync) {
	    // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.
	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  }

	  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.

	  ensureRootIsScheduled(root);

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var _error3 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw _error3;
	  }

	  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
	    // This is a legacy edge case. We just committed the initial mount of
	    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
	    // synchronously, but layout updates should be deferred until the end
	    // of the batch.
	    return null;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbackQueue();
	  return null;
	}

	function commitBeforeMutationEffects() {
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if ((effectTag & Snapshot) !== NoEffect) {
	      setCurrentFiber(nextEffect);
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current$$1, nextEffect);
	      resetCurrentFiber();
	    }

	    if ((effectTag & Passive) !== NoEffect) {
	      // If there are passive effects, schedule a callback to flush at
	      // the earliest opportunity.
	      if (!rootDoesHavePassiveEffects) {
	        rootDoesHavePassiveEffects = true;
	        scheduleCallback(NormalPriority, function () {
	          flushPassiveEffects();
	          return null;
	        });
	      }
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitMutationEffects(root, renderPriorityLevel) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current$$1 = nextEffect.alternate;

	      if (current$$1 !== null) {
	        commitDetachRef(current$$1);
	      }
	    } // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every possible
	    // bitmap value, we remove the secondary effects from the effect tag and
	    // switch on that value.


	    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted does
	          // and isMounted is deprecated anyway so we should be able to kill this.

	          nextEffect.effectTag &= ~Placement;
	          break;
	        }

	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.

	          nextEffect.effectTag &= ~Placement; // Update

	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }

	      case Hydrating:
	        {
	          nextEffect.effectTag &= ~Hydrating;
	          break;
	        }

	      case HydratingAndUpdate:
	        {
	          nextEffect.effectTag &= ~Hydrating; // Update

	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }

	      case Update:
	        {
	          var _current3 = nextEffect.alternate;
	          commitWork(_current3, nextEffect);
	          break;
	        }

	      case Deletion:
	        {
	          commitDeletion(root, nextEffect, renderPriorityLevel);
	          break;
	        }
	    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


	    recordEffect();
	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitLayoutEffects(root, committedExpirationTime) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitLifeCycles(root, current$$1, nextEffect);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function flushPassiveEffects() {
	  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
	    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
	    pendingPassiveEffectsRenderPriority = NoPriority;
	    return runWithPriority$2(priorityLevel, flushPassiveEffectsImpl);
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  }

	  var root = rootWithPendingPassiveEffects;
	  var expirationTime = pendingPassiveEffectsExpirationTime;
	  rootWithPendingPassiveEffects = null;
	  pendingPassiveEffectsExpirationTime = NoWork;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error("Cannot flush passive effects while already rendering.");
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  var prevInteractions = pushInteractions(root); // Note: This currently assumes there are no passive effects on the root
	  // fiber, because the root is not part of its own effect list. This could
	  // change in the future.

	  var effect = root.current.firstEffect;

	  while (effect !== null) {
	    {
	      setCurrentFiber(effect);
	      invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

	      if (hasCaughtError()) {
	        if (!(effect !== null)) {
	          {
	            throw Error("Should be working on an effect.");
	          }
	        }

	        var error = clearCaughtError();
	        captureCommitPhaseError(effect, error);
	      }

	      resetCurrentFiber();
	    }

	    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

	    effect.nextEffect = null;
	    effect = nextNextEffect;
	  }

	  {
	    popInteractions(prevInteractions);
	    finishPendingInteractions(root, expirationTime);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
	  // exceeds the limit, we'll fire a warning.

	  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValue(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
	  enqueueUpdate(rootFiber, update);
	  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, Sync);
	  }
	}

	function captureCommitPhaseError(sourceFiber, error) {
	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	    return;
	  }

	  var fiber = sourceFiber.return;

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValue(error, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
	        Sync);
	        enqueueUpdate(fiber, update);
	        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

	        if (root !== null) {
	          ensureRootIsScheduled(root);
	          schedulePendingInteractions(root, Sync);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }
	}
	function pingSuspendedRoot(root, thenable, suspendedTime) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(thenable);
	  }

	  if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, we'll always suspend so we can always
	    // restart. If we're suspended without any updates, it might be a retry.
	    // If it's early in the retry we can restart. We can't know for sure
	    // whether we'll eventually process an update during this render pass,
	    // but it's somewhat unlikely that we get to a ping before that, since
	    // getting to the root most update is usually very fast.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root. Don't need to schedule a ping because
	      // we're already working on this tree.
	      prepareFreshStack(root, renderExpirationTime);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootHasPendingPing = true;
	    }

	    return;
	  }

	  if (!isRootSuspendedAtTime(root, suspendedTime)) {
	    // The root is no longer suspended at this time.
	    return;
	  }

	  var lastPingedTime = root.lastPingedTime;

	  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
	    // There's already a lower priority ping scheduled.
	    return;
	  } // Mark the time at which this ping was scheduled.


	  root.lastPingedTime = suspendedTime;

	  if (root.finishedExpirationTime === suspendedTime) {
	    // If there's a pending fallback waiting to commit, throw it away.
	    root.finishedExpirationTime = NoWork;
	    root.finishedWork = null;
	  }

	  ensureRootIsScheduled(root);
	  schedulePendingInteractions(root, suspendedTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryTime) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new expiration time.
	  if (retryTime === NoWork) {
	    var suspenseConfig = null; // Retries don't carry over the already committed update.

	    var currentTime = requestCurrentTimeForUpdate();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
	  } // TODO: Special case idle priority?


	  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, retryTime);
	  }
	}
	function resolveRetryThenable(boundaryFiber, thenable) {
	  var retryTime = NoWork; // Default

	  var retryCache;

	  {
	    retryCache = boundaryFiber.stateNode;
	  }

	  if (retryCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(thenable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryTime);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
	  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

	  if (busyMinDurationMs <= 0) {
	    return 0;
	  }

	  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

	  var currentTimeMs = now();
	  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
	  var timeElapsed = currentTimeMs - eventTimeMs;

	  if (timeElapsed <= busyDelayMs) {
	    // If we haven't yet waited longer than the initial delay, we don't
	    // have to wait any additional time.
	    return 0;
	  }

	  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

	  return msUntilTimeout;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;

	    {
	      {
	        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
	      }
	    }
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;
	      warning$1(false, 'Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function stopFinishedWorkLoopTimer() {
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function stopInterruptedWorkLoopTimer() {
	  // TODO: Track which fiber caused the interruption.
	  var didCompleteRoot = false;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
	  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
	    interruptedBy = fiberThatReceivedUpdate;
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = null;

	function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
	  {
	    var tag = fiber.tag;

	    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForUnmountedComponent !== null) {
	      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForUnmountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
	    }

	    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	  }
	}

	var beginWork$$1;

	{
	  var dummyFiber = null;

	  beginWork$$1 = function (current$$1, unitOfWork, expirationTime) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork$1(current$$1, unitOfWork, expirationTime);
	    } catch (originalError) {
	      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises. Treat everything else like an error.
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooks(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
	        // Rethrow this error instead of the original one.

	        throw replayError;
	      } else {
	        // This branch is reachable if the render phase is impure.
	        throw originalError;
	      }
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInGetChildContext = false;

	function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
	  {
	    if (fiber.tag === ClassComponent) {
	      switch (phase) {
	        case 'getChildContext':
	          if (didWarnAboutUpdateInGetChildContext) {
	            return;
	          }

	          warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
	          didWarnAboutUpdateInGetChildContext = true;
	          break;

	        case 'render':
	          if (didWarnAboutUpdateInRender) {
	            return;
	          }

	          warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure function of ' + 'props and state.');
	          didWarnAboutUpdateInRender = true;
	          break;
	      }
	    }
	  }
	} // a 'shared' variable that changes when act() opens/closes in tests.


	var IsThisRendererActing = {
	  current: false
	};
	function warnIfNotScopedWithMatchingAct(fiber) {
	  {
	    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
	      warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}
	function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
	  {
	    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      warningWithoutStack$1(false, 'An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
	  {
	    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

	var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
	// scheduler is the actual recommendation. The alternative could be a testing build,
	// a new lib, or whatever; we dunno just yet. This message is for early adopters
	// to get their tests right.

	function warnIfUnmockedScheduler(fiber) {
	  {
	    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
	      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
	        didWarnAboutUnmockedScheduler = true;
	        warningWithoutStack$1(false, 'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
	      }
	    }
	  }
	}
	var componentsThatTriggeredHighPriSuspend = null;
	function checkForWrongSuspensePriorityInDEV(sourceFiber) {
	  {
	    var currentPriorityLevel = getCurrentPriorityLevel();

	    if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority$2 || currentPriorityLevel === ImmediatePriority)) {
	      var workInProgressNode = sourceFiber;

	      while (workInProgressNode !== null) {
	        // Add the component that triggered the suspense
	        var current$$1 = workInProgressNode.alternate;

	        if (current$$1 !== null) {
	          // TODO: warn component that triggers the high priority
	          // suspend is the HostRoot
	          switch (workInProgressNode.tag) {
	            case ClassComponent:
	              // Loop through the component's update queue and see whether the component
	              // has triggered any high priority updates
	              var updateQueue = current$$1.updateQueue;

	              if (updateQueue !== null) {
	                var update = updateQueue.firstUpdate;

	                while (update !== null) {
	                  var priorityLevel = update.priority;

	                  if (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority) {
	                    if (componentsThatTriggeredHighPriSuspend === null) {
	                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
	                    } else {
	                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
	                    }

	                    break;
	                  }

	                  update = update.next;
	                }
	              }

	              break;

	            case FunctionComponent:
	            case ForwardRef:
	            case SimpleMemoComponent:
	              if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
	                var _update = workInProgressNode.memoizedState.baseUpdate; // Loop through the functional component's memoized state to see whether
	                // the component has triggered any high pri updates

	                while (_update !== null) {
	                  var priority = _update.priority;

	                  if (priority === UserBlockingPriority$2 || priority === ImmediatePriority) {
	                    if (componentsThatTriggeredHighPriSuspend === null) {
	                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
	                    } else {
	                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
	                    }

	                    break;
	                  }

	                  if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
	                    break;
	                  }

	                  _update = _update.next;
	                }
	              }

	              break;
	          }
	        }

	        workInProgressNode = workInProgressNode.return;
	      }
	    }
	  }
	}

	function flushSuspensePriorityWarningInDEV() {
	  {
	    if (componentsThatTriggeredHighPriSuspend !== null) {
	      var componentNames = [];
	      componentsThatTriggeredHighPriSuspend.forEach(function (name) {
	        return componentNames.push(name);
	      });
	      componentsThatTriggeredHighPriSuspend = null;

	      if (componentNames.length > 0) {
	        warningWithoutStack$1(false, '%s triggered a user-blocking update that suspended.' + '\n\n' + 'The fix is to split the update into multiple parts: a user-blocking ' + 'update to provide immediate feedback, and another update that ' + 'triggers the bulk of the changes.' + '\n\n' + 'Refer to the documentation for useTransition to learn how ' + 'to implement this pattern.', // TODO: Add link to React docs with more information, once it exists
	        componentNames.sort().join(', '));
	      }
	    }
	  }
	}

	function computeThreadID(root, expirationTime) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + root.interactionThreadID;
	}

	function markSpawnedWork(expirationTime) {

	  if (spawnedWorkDuringRender === null) {
	    spawnedWorkDuringRender = [expirationTime];
	  } else {
	    spawnedWorkDuringRender.push(expirationTime);
	  }
	}

	function scheduleInteractions(root, expirationTime, interactions) {

	  if (interactions.size > 0) {
	    var pendingInteractionMap = root.pendingInteractionMap;
	    var pendingInteractions = pendingInteractionMap.get(expirationTime);

	    if (pendingInteractions != null) {
	      interactions.forEach(function (interaction) {
	        if (!pendingInteractions.has(interaction)) {
	          // Update the pending async work count for previously unscheduled interaction.
	          interaction.__count++;
	        }

	        pendingInteractions.add(interaction);
	      });
	    } else {
	      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

	      interactions.forEach(function (interaction) {
	        interaction.__count++;
	      });
	    }

	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);
	      subscriber.onWorkScheduled(interactions, threadID);
	    }
	  }
	}

	function schedulePendingInteractions(root, expirationTime) {

	  scheduleInteractions(root, expirationTime, tracing$1.__interactionsRef.current);
	}

	function startWorkOnPendingInteractions(root, expirationTime) {
	  // we can accurately attribute time spent working on it, And so that cascading
	  // work triggered during the render phase will be associated with it.


	  var interactions = new Set();
	  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	    if (scheduledExpirationTime >= expirationTime) {
	      scheduledInteractions.forEach(function (interaction) {
	        return interactions.add(interaction);
	      });
	    }
	  }); // Store the current set of interactions on the FiberRoot for a few reasons:
	  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
	  // without having to recalculate it. We will also use it in commitWork() to
	  // pass to any Profiler onRender() hooks. This also provides DevTools with a
	  // way to access it when the onCommitRoot() hook is called.

	  root.memoizedInteractions = interactions;

	  if (interactions.size > 0) {
	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);

	      try {
	        subscriber.onWorkStarted(interactions, threadID);
	      } catch (error) {
	        // If the subscriber throws, rethrow it in a separate task
	        scheduleCallback(ImmediatePriority, function () {
	          throw error;
	        });
	      }
	    }
	  }
	}

	function finishPendingInteractions(root, committedExpirationTime) {

	  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
	  var subscriber;

	  try {
	    subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null && root.memoizedInteractions.size > 0) {
	      var threadID = computeThreadID(root, committedExpirationTime);
	      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	    }
	  } catch (error) {
	    // If the subscriber throws, rethrow it in a separate task
	    scheduleCallback(ImmediatePriority, function () {
	      throw error;
	    });
	  } finally {
	    // Clear completed interactions from the pending Map.
	    // Unless the render was suspended or cascading work was scheduled,
	    // In which case– leave pending interactions until the subsequent render.
	    var pendingInteractionMap = root.pendingInteractionMap;
	    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	      // Only decrement the pending interaction count if we're done.
	      // If there's still work at the current priority,
	      // That indicates that we are waiting for suspense data.
	      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	        pendingInteractionMap.delete(scheduledExpirationTime);
	        scheduledInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            try {
	              subscriber.onInteractionScheduledWorkCompleted(interaction);
	            } catch (error) {
	              // If the subscriber throws, rethrow it in a separate task
	              scheduleCallback(ImmediatePriority, function () {
	                throw error;
	              });
	            }
	          }
	        });
	      }
	    });
	  }
	}

	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    onCommitFiberRoot = function (root, expirationTime) {
	      try {
	        var didError = (root.current.effectTag & DidCapture) === DidCapture;

	        if (enableProfilerTimer) {
	          var currentTime = getCurrentTime();
	          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
	          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
	        } else {
	          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
	        }
	      } catch (err) {
	        if (true && !hasLoggedError) {
	          hasLoggedError = true;
	          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
	        }
	      }
	    };

	    onCommitFiberUnmount = function (fiber) {
	      try {
	        hook.onCommitFiberUnmount(rendererID, fiber);
	      } catch (err) {
	        if (true && !hasLoggedError) {
	          hasLoggedError = true;
	          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
	        }
	      }
	    };
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
	    }
	  } // DevTools exists


	  return true;
	}
	function onCommitRoot(root, expirationTime) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root, expirationTime);
	  }
	}
	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	var debugCounter = 1;

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.effectTag = NoEffect;
	  this.nextEffect = null;
	  this.firstEffect = null;
	  this.lastEffect = null;
	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  } // This is normally DEV-only except www when it adds listeners.
	  // TODO: remove the User Timing integration in favor of Root Events.


	  {
	    this._debugID = debugCounter++;
	    this._debugIsCurrentlyTiming = false;
	  }

	  {
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps, expirationTime) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    expirationTime: currentDependencies.expirationTime,
	    firstContext: currentDependencies.firstContext,
	    responders: currentDependencies.responders
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderExpirationTime) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect tag but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

	  workInProgress.nextEffect = null;
	  workInProgress.firstEffect = null;
	  workInProgress.lastEffect = null;
	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childExpirationTime = NoWork;
	    workInProgress.expirationTime = renderExpirationTime;
	    workInProgress.child = null;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childExpirationTime = current.childExpirationTime;
	    workInProgress.expirationTime = current.expirationTime;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      expirationTime: currentDependencies.expirationTime,
	      firstContext: currentDependencies.firstContext,
	      responders: currentDependencies.responders
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode | BlockingMode | StrictMode;
	  } else if (tag === BlockingRoot) {
	    mode = BlockingMode | StrictMode;
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber;
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

	      case REACT_CONCURRENT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= ConcurrentMode | BlockingMode | StrictMode;
	        break;

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictMode;
	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;

	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentName(owner.type) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          {
	            {
	              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
	            }
	          }
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  fiber.type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

	  {
	    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	    // This needs to be fixed in getComponentName so that it relies on the tag
	    // instead.
	    fiber.type = REACT_SUSPENSE_LIST_TYPE;
	  }

	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugID = source._debugID;
	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate) {
	  this.tag = tag;
	  this.current = null;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.pingCache = null;
	  this.finishedExpirationTime = NoWork;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.hydrate = hydrate;
	  this.callbackNode = null;
	  this.callbackPriority = NoPriority;
	  this.firstPendingTime = NoWork;
	  this.firstSuspendedTime = NoWork;
	  this.lastSuspendedTime = NoWork;
	  this.nextKnownPendingLevel = NoWork;
	  this.lastPingedTime = NoWork;
	  this.lastExpiredTime = NoWork;

	  {
	    this.interactionThreadID = tracing$1.unstable_getThreadID();
	    this.memoizedInteractions = new Set();
	    this.pendingInteractionMap = new Map();
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;
	  return root;
	}
	function isRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;
	  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
	}
	function markRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;

	  if (firstSuspendedTime < expirationTime) {
	    root.firstSuspendedTime = expirationTime;
	  }

	  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
	    root.lastSuspendedTime = expirationTime;
	  }

	  if (expirationTime <= root.lastPingedTime) {
	    root.lastPingedTime = NoWork;
	  }

	  if (expirationTime <= root.lastExpiredTime) {
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootUpdatedAtTime(root, expirationTime) {
	  // Update the range of pending times
	  var firstPendingTime = root.firstPendingTime;

	  if (expirationTime > firstPendingTime) {
	    root.firstPendingTime = expirationTime;
	  } // Update the range of suspended times. Treat everything lower priority or
	  // equal to this update as unsuspended.


	  var firstSuspendedTime = root.firstSuspendedTime;

	  if (firstSuspendedTime !== NoWork) {
	    if (expirationTime >= firstSuspendedTime) {
	      // The entire suspended range is now unsuspended.
	      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	    } else if (expirationTime >= root.lastSuspendedTime) {
	      root.lastSuspendedTime = expirationTime + 1;
	    } // This is a pending level. Check if it's higher priority than the next
	    // known pending level.


	    if (expirationTime > root.nextKnownPendingLevel) {
	      root.nextKnownPendingLevel = expirationTime;
	    }
	  }
	}
	function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
	  // Update the range of pending times
	  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
	  // equal to this update as unsuspended.

	  if (finishedExpirationTime <= root.lastSuspendedTime) {
	    // The entire suspended range is now unsuspended.
	    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
	    // Part of the suspended range is now unsuspended. Narrow the range to
	    // include everything between the unsuspended time (non-inclusive) and the
	    // last suspended time.
	    root.firstSuspendedTime = finishedExpirationTime - 1;
	  }

	  if (finishedExpirationTime <= root.lastPingedTime) {
	    // Clear the pinged time
	    root.lastPingedTime = NoWork;
	  }

	  if (finishedExpirationTime <= root.lastExpiredTime) {
	    // Clear the expired time
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootExpiredAtTime(root, expirationTime) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
	    root.lastExpiredTime = expirationTime;
	  }
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        {
	          {
	            throw Error("Unable to find node on an unmounted component.");
	          }
	        }
	      } else {
	        {
	          {
	            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
	          }
	        }
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;

	        if (fiber.mode & StrictMode) {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
	  return createFiberRoot(containerInfo, tag, hydrate);
	}
	function updateContainer(element, container, parentComponent, callback) {
	  var current$$1 = container.current;
	  var currentTime = requestCurrentTimeForUpdate();

	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfUnmockedScheduler(current$$1);
	      warnIfNotScopedWithMatchingAct(current$$1);
	    }
	  }

	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;
	      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
	    update.callback = callback;
	  }

	  enqueueUpdate(current$$1, update);
	  scheduleWork(current$$1, expirationTime);
	  return expirationTime;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function markRetryTimeImpl(fiber, retryTime) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    if (suspenseState.retryTime < retryTime) {
	      suspenseState.retryTime = retryTime;
	    }
	  }
	} // Increases the priority of thennables when they resolve within this boundary.


	function markRetryTimeIfNotHydrated(fiber, retryTime) {
	  markRetryTimeImpl(fiber, retryTime);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryTimeImpl(alternate, retryTime);
	  }
	}

	function attemptUserBlockingHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var expTime = computeExpirationForFiber(currentTime, fiber, null);
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  if (hostFiber.tag === FundamentalComponent) {
	    return hostFiber.stateNode.instance;
	  }

	  return hostFiber.stateNode;
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideProps = null;
	var scheduleUpdate = null;
	var setSuspenseHandler = null;

	{
	  var copyWithSetImpl = function (obj, path, idx, value) {
	    if (idx >= path.length) {
	      return value;
	    }

	    var key = path[idx];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    if (currentHook !== null) {
	      var newState = copyWithSet(currentHook.memoizedState, path, value);
	      currentHook.memoizedState = newState;
	      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleWork(fiber, Sync);
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleWork(fiber, Sync);
	  };

	  scheduleUpdate = function (fiber) {
	    scheduleWork(fiber, Sync);
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals(_assign({}, devToolsConfig, {
	    overrideHookState: overrideHookState,
	    overrideProps: overrideProps,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);

	      if (hostFiber === null) {
	        return null;
	      }

	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }

	      return findFiberByHostInstance(instance);
	    },
	    // React Refresh
	    findHostInstancesForRefresh: findHostInstancesForRefresh,
	    scheduleRefresh: scheduleRefresh,
	    scheduleRoot: scheduleRoot,
	    setRefreshHandler: setRefreshHandler,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber: function () {
	      return current;
	    }
	  }));
	}

	// This file intentionally does *not* have the Flow annotation.
	// Don't add it. See `./inline-typed.js` for an explanation.

	// TODO: This type is shared between the reconciler and ReactDOM, but will
	// eventually be lifted out to the renderer.
	function ReactDOMRoot(container, options) {
	  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
	}

	function ReactDOMBlockingRoot(container, tag, options) {
	  this._internalRoot = createRootImpl(container, tag, options);
	}

	ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children, callback) {
	  var root = this._internalRoot;
	  var cb = callback === undefined ? null : callback;

	  {
	    warnOnInvalidCallback(cb, 'render');
	  }

	  updateContainer(children, root, null, cb);
	};

	ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function (callback) {
	  var root = this._internalRoot;
	  var cb = callback === undefined ? null : callback;

	  {
	    warnOnInvalidCallback(cb, 'render');
	  }

	  var container = root.containerInfo;
	  updateContainer(null, root, null, function () {
	    unmarkContainerAsRoot(container);

	    if (cb !== null) {
	      cb();
	    }
	  });
	};

	function createRootImpl(container, tag, options) {
	  // Tag is either LegacyRoot or Concurrent Root
	  var hydrate = options != null && options.hydrate === true;
	  var hydrationCallbacks = options != null && options.hydrationOptions || null;
	  var root = createContainer(container, tag, hydrate);
	  markContainerAsRoot(root.current, container);

	  if (hydrate && tag !== LegacyRoot) {
	    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
	    eagerlyTrapReplayableEvents(doc);
	  }

	  return root;
	}
	function createLegacyRoot(container, options) {
	  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}
	function warnOnInvalidCallback(callback, callerName) {
	  {
	    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;
	var warnedAboutHydrateAPI = false;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

	      if (hostInstance) {
	        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
	    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;
	          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }

	      container.removeChild(rootSibling);
	    }
	  }

	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;
	      lowPriorityWarningWithoutStack$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }

	  return createLegacyRoot(container, shouldHydrate ? {
	    hydrate: true
	  } : undefined);
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback(callback === undefined ? null : callback, 'render');
	  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.


	  var root = container._reactRootContainer;
	  var fiberRoot;

	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);
	        originalCallback.call(instance);
	      };
	    } // Initial mount should not be batched.


	    unbatchedUpdates(function () {
	      updateContainer(children, fiberRoot, parentComponent, callback);
	    });
	  } else {
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);

	        _originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, fiberRoot, parentComponent, callback);
	  }

	  return getPublicRootInstance(fiberRoot);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$1.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
	      !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error("Target container is not a DOM element.");
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error("Target container is not a DOM element.");
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  if (!isValidContainer(containerNode)) {
	    {
	      throw Error("Target container is not a DOM element.");
	    }
	  }

	  if (!(parentComponent != null && has(parentComponent))) {
	    {
	      throw Error("parentComponent must be a valid React Component");
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
	      !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	    } // Unmount should not be batched.


	    unbatchedUpdates(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
	      !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	    }

	    return false;
	  }
	}

	function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.12.0';
	setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$$1);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

	function createPortal$$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    {
	      throw Error("Target container is not a DOM element.");
	    }
	  } // TODO: pass ReactDOM portal implementation as third argument


	  return createPortal$1(children, container, null, key);
	}

	var ReactDOM = {
	  createPortal: createPortal$$1,
	  // Legacy
	  findDOMNode: findDOMNode,
	  hydrate: hydrate,
	  render: render,
	  unstable_renderSubtreeIntoContainer: unstable_renderSubtreeIntoContainer,
	  unmountComponentAtNode: unmountComponentAtNode,
	  // Temporary alias since we already shipped React 16 RC with it.
	  // TODO: remove in React 17.
	  unstable_createPortal: function () {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;
	      lowPriorityWarningWithoutStack$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }

	    return createPortal$$1.apply(void 0, arguments);
	  },
	  unstable_batchedUpdates: batchedUpdates$1,
	  flushSync: flushSync,
	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    // Keep in sync with ReactDOMUnstableNativeDependencies.js
	    // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
	    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
	  }
	};

	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType: 1,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}



	var ReactDOM$2 = Object.freeze({
		default: ReactDOM
	});

	var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.


	var reactDom = ReactDOM$3.default || ReactDOM$3;

	module.exports = reactDom;
	  })();
	}
	});

	var reactDom = createCommonjsModule(function (module) {

	{
	  module.exports = reactDom_development;
	}
	});
	var reactDom_1 = reactDom.createPortal;
	var reactDom_2 = reactDom.findDOMNode;
	var reactDom_3 = reactDom.hydrate;
	var reactDom_4 = reactDom.render;
	var reactDom_5 = reactDom.unstable_renderSubtreeIntoContainer;
	var reactDom_6 = reactDom.unmountComponentAtNode;
	var reactDom_7 = reactDom.unstable_createPortal;
	var reactDom_8 = reactDom.unstable_batchedUpdates;
	var reactDom_9 = reactDom.flushSync;
	var reactDom_10 = reactDom.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var reactIs_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var lowPriorityWarningWithoutStack = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });

	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarningWithoutStack = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(void 0, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}
	});

	unwrapExports(reactIs_development);
	var reactIs_development_1 = reactIs_development.typeOf;
	var reactIs_development_2 = reactIs_development.AsyncMode;
	var reactIs_development_3 = reactIs_development.ConcurrentMode;
	var reactIs_development_4 = reactIs_development.ContextConsumer;
	var reactIs_development_5 = reactIs_development.ContextProvider;
	var reactIs_development_6 = reactIs_development.Element;
	var reactIs_development_7 = reactIs_development.ForwardRef;
	var reactIs_development_8 = reactIs_development.Fragment;
	var reactIs_development_9 = reactIs_development.Lazy;
	var reactIs_development_10 = reactIs_development.Memo;
	var reactIs_development_11 = reactIs_development.Portal;
	var reactIs_development_12 = reactIs_development.Profiler;
	var reactIs_development_13 = reactIs_development.StrictMode;
	var reactIs_development_14 = reactIs_development.Suspense;
	var reactIs_development_15 = reactIs_development.isValidElementType;
	var reactIs_development_16 = reactIs_development.isAsyncMode;
	var reactIs_development_17 = reactIs_development.isConcurrentMode;
	var reactIs_development_18 = reactIs_development.isContextConsumer;
	var reactIs_development_19 = reactIs_development.isContextProvider;
	var reactIs_development_20 = reactIs_development.isElement;
	var reactIs_development_21 = reactIs_development.isForwardRef;
	var reactIs_development_22 = reactIs_development.isFragment;
	var reactIs_development_23 = reactIs_development.isLazy;
	var reactIs_development_24 = reactIs_development.isMemo;
	var reactIs_development_25 = reactIs_development.isPortal;
	var reactIs_development_26 = reactIs_development.isProfiler;
	var reactIs_development_27 = reactIs_development.isStrictMode;
	var reactIs_development_28 = reactIs_development.isSuspense;

	var reactIs = createCommonjsModule(function (module) {

	{
	  module.exports = reactIs_development;
	}
	});
	var reactIs_1 = reactIs.isValidElementType;
	var reactIs_2 = reactIs.isContextConsumer;
	var reactIs_3 = reactIs.isElement;
	var reactIs_4 = reactIs.ForwardRef;

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	{
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if ( typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}
	});

	var ReactReduxContext = react.createContext(null);

	var Provider =
	/*#__PURE__*/
	function (_Component) {
	  _inheritsLoose(Provider, _Component);

	  function Provider(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;
	    var store = props.store;
	    _this.state = {
	      storeState: store.getState(),
	      store: store
	    };
	    return _this;
	  }

	  var _proto = Provider.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this._isMounted = true;
	    this.subscribe();
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.unsubscribe) this.unsubscribe();
	    this._isMounted = false;
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.store !== prevProps.store) {
	      if (this.unsubscribe) this.unsubscribe();
	      this.subscribe();
	    }
	  };

	  _proto.subscribe = function subscribe() {
	    var _this2 = this;

	    var store = this.props.store;
	    this.unsubscribe = store.subscribe(function () {
	      var newStoreState = store.getState();

	      if (!_this2._isMounted) {
	        return;
	      }

	      _this2.setState(function (providerState) {
	        // If the value is the same, skip the unnecessary state update.
	        if (providerState.storeState === newStoreState) {
	          return null;
	        }

	        return {
	          storeState: newStoreState
	        };
	      });
	    }); // Actions might have been dispatched between render and mount - handle those

	    var postMountStoreState = store.getState();

	    if (postMountStoreState !== this.state.storeState) {
	      this.setState({
	        storeState: postMountStoreState
	      });
	    }
	  };

	  _proto.render = function render() {
	    var Context = this.props.context || ReactReduxContext;
	    return react.createElement(Context.Provider, {
	      value: this.state
	    }, this.props.children);
	  };

	  return Provider;
	}(react_3);

	Provider.propTypes = {
	  store: propTypes.shape({
	    subscribe: propTypes.func.isRequired,
	    dispatch: propTypes.func.isRequired,
	    getState: propTypes.func.isRequired
	  }),
	  context: propTypes.object,
	  children: propTypes.any
	};

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

	function getStatics(component) {
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  }

	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols$1) {
	      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	var invariant_1 = invariant;

	var stringifyComponent = function stringifyComponent(Comp) {
	  try {
	    return JSON.stringify(Comp);
	  } catch (err) {
	    return String(Comp);
	  }
	};

	function connectAdvanced(
	/*
	  selectorFactory is a func that is responsible for returning the selector function used to
	  compute new props from state, props, and dispatch. For example:
	     export default connectAdvanced((dispatch, options) => (state, props) => ({
	      thing: state.things[props.thingId],
	      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
	    }))(YourComponent)
	   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
	  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
	  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
	   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
	  props. Do not use connectAdvanced directly without memoizing results between calls to your
	  selector, otherwise the Connect component will re-render on every state or props change.
	*/
	selectorFactory, // options object:
	_ref) {
	  if (_ref === void 0) {
	    _ref = {};
	  }

	  var _ref2 = _ref,
	      _ref2$getDisplayName = _ref2.getDisplayName,
	      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
	    return "ConnectAdvanced(" + name + ")";
	  } : _ref2$getDisplayName,
	      _ref2$methodName = _ref2.methodName,
	      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
	      _ref2$renderCountProp = _ref2.renderCountProp,
	      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
	      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
	      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
	      _ref2$storeKey = _ref2.storeKey,
	      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
	      _ref2$withRef = _ref2.withRef,
	      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
	      _ref2$forwardRef = _ref2.forwardRef,
	      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
	      _ref2$context = _ref2.context,
	      context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context,
	      connectOptions = _objectWithoutPropertiesLoose(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);

	  invariant_1(renderCountProp === undefined, "renderCountProp is removed. render counting is built into the latest React dev tools profiling extension");
	  invariant_1(!withRef, 'withRef is removed. To access the wrapped instance, use a ref on the connected component');
	  var customStoreWarningMessage = 'To use a custom Redux store for specific components,  create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';
	  invariant_1(storeKey === 'store', 'storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
	  var Context = context;
	  return function wrapWithConnect(WrappedComponent) {
	    {
	      invariant_1(reactIs_1(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
	    }

	    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	    var displayName = getDisplayName(wrappedComponentName);

	    var selectorFactoryOptions = _extends({}, connectOptions, {
	      getDisplayName: getDisplayName,
	      methodName: methodName,
	      renderCountProp: renderCountProp,
	      shouldHandleStateChanges: shouldHandleStateChanges,
	      storeKey: storeKey,
	      displayName: displayName,
	      wrappedComponentName: wrappedComponentName,
	      WrappedComponent: WrappedComponent
	    });

	    var pure = connectOptions.pure;
	    var OuterBaseComponent = react_3;

	    if (pure) {
	      OuterBaseComponent = react_4;
	    }

	    function makeDerivedPropsSelector() {
	      var lastProps;
	      var lastState;
	      var lastDerivedProps;
	      var lastStore;
	      var lastSelectorFactoryOptions;
	      var sourceSelector;
	      return function selectDerivedProps(state, props, store, selectorFactoryOptions) {
	        if (pure && lastProps === props && lastState === state) {
	          return lastDerivedProps;
	        }

	        if (store !== lastStore || lastSelectorFactoryOptions !== selectorFactoryOptions) {
	          lastStore = store;
	          lastSelectorFactoryOptions = selectorFactoryOptions;
	          sourceSelector = selectorFactory(store.dispatch, selectorFactoryOptions);
	        }

	        lastProps = props;
	        lastState = state;
	        var nextProps = sourceSelector(state, props);
	        lastDerivedProps = nextProps;
	        return lastDerivedProps;
	      };
	    }

	    function makeChildElementSelector() {
	      var lastChildProps, lastForwardRef, lastChildElement, lastComponent;
	      return function selectChildElement(WrappedComponent, childProps, forwardRef) {
	        if (childProps !== lastChildProps || forwardRef !== lastForwardRef || lastComponent !== WrappedComponent) {
	          lastChildProps = childProps;
	          lastForwardRef = forwardRef;
	          lastComponent = WrappedComponent;
	          lastChildElement = react.createElement(WrappedComponent, _extends({}, childProps, {
	            ref: forwardRef
	          }));
	        }

	        return lastChildElement;
	      };
	    }

	    var Connect =
	    /*#__PURE__*/
	    function (_OuterBaseComponent) {
	      _inheritsLoose(Connect, _OuterBaseComponent);

	      function Connect(props) {
	        var _this;

	        _this = _OuterBaseComponent.call(this, props) || this;
	        invariant_1(forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey], 'Passing redux store in props has been removed and does not do anything. ' + customStoreWarningMessage);
	        _this.selectDerivedProps = makeDerivedPropsSelector();
	        _this.selectChildElement = makeChildElementSelector();
	        _this.indirectRenderWrappedComponent = _this.indirectRenderWrappedComponent.bind(_assertThisInitialized(_this));
	        return _this;
	      }

	      var _proto = Connect.prototype;

	      _proto.indirectRenderWrappedComponent = function indirectRenderWrappedComponent(value) {
	        // calling renderWrappedComponent on prototype from indirectRenderWrappedComponent bound to `this`
	        return this.renderWrappedComponent(value);
	      };

	      _proto.renderWrappedComponent = function renderWrappedComponent(value) {
	        invariant_1(value, "Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
	        var storeState = value.storeState,
	            store = value.store;
	        var wrapperProps = this.props;
	        var forwardedRef;

	        if (forwardRef) {
	          wrapperProps = this.props.wrapperProps;
	          forwardedRef = this.props.forwardedRef;
	        }

	        var derivedProps = this.selectDerivedProps(storeState, wrapperProps, store, selectorFactoryOptions);
	        return this.selectChildElement(WrappedComponent, derivedProps, forwardedRef);
	      };

	      _proto.render = function render() {
	        var ContextToUse = this.props.context && this.props.context.Consumer && reactIs_2(react.createElement(this.props.context.Consumer, null)) ? this.props.context : Context;
	        return react.createElement(ContextToUse.Consumer, null, this.indirectRenderWrappedComponent);
	      };

	      return Connect;
	    }(OuterBaseComponent);

	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = displayName;

	    if (forwardRef) {
	      var forwarded = react.forwardRef(function forwardConnectRef(props, ref) {
	        return react.createElement(Connect, {
	          wrapperProps: props,
	          forwardedRef: ref
	        });
	      });
	      forwarded.displayName = displayName;
	      forwarded.WrappedComponent = WrappedComponent;
	      return hoistNonReactStatics_cjs(forwarded, WrappedComponent);
	    }

	    return hoistNonReactStatics_cjs(Connect, WrappedComponent);
	  };
	}

	var hasOwn$1 = Object.prototype.hasOwnProperty;

	function is(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) return true;

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;

	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject$1(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  if (proto === null) return true;
	  var baseProto = proto;

	  while (Object.getPrototypeOf(baseProto) !== null) {
	    baseProto = Object.getPrototypeOf(baseProto);
	  }

	  return proto === baseProto;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$1(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	}

	function verifyPlainObject(value, displayName, methodName) {
	  if (!isPlainObject$1(value)) {
	    warning$1(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
	  }
	}

	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);

	    function constantSelector() {
	      return constant;
	    }

	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	//
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..

	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	//
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//

	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;

	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    }; // allow detectFactoryAndVerify to get ownProps


	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      verifyPlainObject(props, displayName, methodName);
	      return props;
	    };

	    return proxy;
	  };
	}

	function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
	  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
	}
	function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
	  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
	    return {
	      dispatch: dispatch
	    };
	  }) : undefined;
	}
	function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
	    return bindActionCreators(mapDispatchToProps, dispatch);
	  }) : undefined;
	}
	var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

	function whenMapStateToPropsIsFunction(mapStateToProps) {
	  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
	}
	function whenMapStateToPropsIsMissing(mapStateToProps) {
	  return !mapStateToProps ? wrapMapToPropsConstant(function () {
	    return {};
	  }) : undefined;
	}
	var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  return _extends({}, ownProps, stateProps, dispatchProps);
	}
	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, _ref) {
	    var displayName = _ref.displayName,
	        pure = _ref.pure,
	        areMergedPropsEqual = _ref.areMergedPropsEqual;
	    var hasRunOnce = false;
	    var mergedProps;
	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	      if (hasRunOnce) {
	        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;
	        verifyPlainObject(mergedProps, displayName, 'mergeProps');
	      }

	      return mergedProps;
	    };
	  };
	}
	function whenMergePropsIsFunction(mergeProps) {
	  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
	}
	function whenMergePropsIsOmitted(mergeProps) {
	  return !mergeProps ? function () {
	    return defaultMergeProps;
	  } : undefined;
	}
	var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

	function verify(selector, methodName, displayName) {
	  if (!selector) {
	    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
	      warning$1("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
	    }
	  }
	}

	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
	  verify(mapStateToProps, 'mapStateToProps', displayName);
	  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
	  verify(mergeProps, 'mergeProps', displayName);
	}

	function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
	  return function impureFinalPropsSelector(state, ownProps) {
	    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
	  };
	}
	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
	  var areStatesEqual = _ref.areStatesEqual,
	      areOwnPropsEqual = _ref.areOwnPropsEqual,
	      areStatePropsEqual = _ref.areStatePropsEqual;
	  var hasRunAtLeastOnce = false;
	  var state;
	  var ownProps;
	  var stateProps;
	  var dispatchProps;
	  var mergedProps;

	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }

	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewState() {
	    var nextStateProps = mapStateToProps(state, ownProps);
	    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;
	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    var stateChanged = !areStatesEqual(nextState, state);
	    state = nextState;
	    ownProps = nextOwnProps;
	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }

	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	} // TODO: Add more comments
	// If pure is true, the selector returned by selectorFactory will memoize its results,
	// allowing connectAdvanced's shouldComponentUpdate to return false if final
	// props have not changed. If false, the selector will always return a new
	// object and shouldComponentUpdate will always return true.

	function finalPropsSelectorFactory(dispatch, _ref2) {
	  var initMapStateToProps = _ref2.initMapStateToProps,
	      initMapDispatchToProps = _ref2.initMapDispatchToProps,
	      initMergeProps = _ref2.initMergeProps,
	      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

	  var mapStateToProps = initMapStateToProps(dispatch, options);
	  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  var mergeProps = initMergeProps(dispatch, options);

	  {
	    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
	  }

	  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
	  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}

	/*
	  connect is a facade over connectAdvanced. It turns its args into a compatible
	  selectorFactory, which has the signature:

	    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
	  
	  connect passes its args to connectAdvanced as options, which will in turn pass them to
	  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

	  selectorFactory returns a final props selector from its mapStateToProps,
	  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
	  mergePropsFactories, and pure args.

	  The resulting final props selector is called by the Connect component instance whenever
	  it receives new props or store state.
	 */

	function match(arg, factories, name) {
	  for (var i = factories.length - 1; i >= 0; i--) {
	    var result = factories[i](arg);
	    if (result) return result;
	  }

	  return function (dispatch, options) {
	    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
	  };
	}

	function strictEqual$1(a, b) {
	  return a === b;
	} // createConnect with default args builds the 'official' connect behavior. Calling it with
	// different options opens up some testing and extensibility scenarios


	function createConnect(_temp) {
	  var _ref = _temp === void 0 ? {} : _temp,
	      _ref$connectHOC = _ref.connectHOC,
	      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,
	      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
	      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
	      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
	      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
	      _ref$mergePropsFactor = _ref.mergePropsFactories,
	      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,
	      _ref$selectorFactory = _ref.selectorFactory,
	      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;

	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
	    if (_ref2 === void 0) {
	      _ref2 = {};
	    }

	    var _ref3 = _ref2,
	        _ref3$pure = _ref3.pure,
	        pure = _ref3$pure === void 0 ? true : _ref3$pure,
	        _ref3$areStatesEqual = _ref3.areStatesEqual,
	        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual$1 : _ref3$areStatesEqual,
	        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
	        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,
	        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
	        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,
	        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
	        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,
	        extraOptions = _objectWithoutPropertiesLoose(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

	    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
	    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
	    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
	    return connectHOC(selectorFactory, _extends({
	      // used in error messages
	      methodName: 'connect',
	      // used to compute Connect's displayName from the wrapped component's displayName.
	      getDisplayName: function getDisplayName(name) {
	        return "Connect(" + name + ")";
	      },
	      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
	      shouldHandleStateChanges: Boolean(mapStateToProps),
	      // passed through to selectorFactory
	      initMapStateToProps: initMapStateToProps,
	      initMapDispatchToProps: initMapDispatchToProps,
	      initMergeProps: initMergeProps,
	      pure: pure,
	      areStatesEqual: areStatesEqual,
	      areOwnPropsEqual: areOwnPropsEqual,
	      areStatePropsEqual: areStatePropsEqual,
	      areMergedPropsEqual: areMergedPropsEqual
	    }, extraOptions));
	  };
	}
	var connect = createConnect();



	var ReactRedux = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Provider: Provider,
		connectAdvanced: connectAdvanced,
		ReactReduxContext: ReactReduxContext,
		connect: connect
	});

	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne$1(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to, from) {
	  if (from === undefined) from = '';

	  var toParts = (to && to.split('/')) || [];
	  var fromParts = (from && from.split('/')) || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne$1(fromParts, i);
	    } else if (part === '..') {
	      spliceOne$1(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne$1(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

	  if (
	    mustEndAbs &&
	    fromParts[0] !== '' &&
	    (!fromParts[0] || !isAbsolute(fromParts[0]))
	  )
	    fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	function valueOf(obj) {
	  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
	}

	function valueEqual(a, b) {
	  // Test for strict equality first.
	  if (a === b) return true;

	  // Otherwise, if either of them == null they are not equal.
	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return (
	      Array.isArray(b) &&
	      a.length === b.length &&
	      a.every(function(item, index) {
	        return valueEqual(item, b[index]);
	      })
	    );
	  }

	  if (typeof a === 'object' || typeof b === 'object') {
	    var aValue = valueOf(a);
	    var bValue = valueOf(b);

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    return Object.keys(Object.assign({}, a, b)).every(function(key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	function warning$2(condition, message) {
	  {
	    if (condition) {
	      return;
	    }

	    var text = "Warning: " + message;

	    if (typeof console !== 'undefined') {
	      console.warn(text);
	    }

	    try {
	      throw Error(text);
	    } catch (x) {}
	  }
	}

	var prefix = 'Invariant failed';
	function invariant$1(condition, message) {
	  if (condition) {
	    return;
	  }

	  {
	    throw new Error(prefix + ": " + (message || ''));
	  }
	}

	function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	}
	function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	}
	function hasBasename(path, prefix) {
	  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
	}
	function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	}
	function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	}
	function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';
	  var hashIndex = pathname.indexOf('#');

	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');

	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	}
	function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;
	  var path = pathname || '/';
	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
	  return path;
	}

	function createLocation(path, state, key, currentLocation) {
	  var location;

	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = parsePath(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);
	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	}
	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
	}

	function createTransitionManager() {
	  var prompt = null;

	  function setPrompt(nextPrompt) {
	     warning$2(prompt == null, 'A history supports only one prompt at a time') ;
	    prompt = nextPrompt;
	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  }

	  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	           warning$2(false, 'A history needs a getUserConfirmation function in order to use a prompt message') ;
	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  }

	  var listeners = [];

	  function appendListener(fn) {
	    var isActive = true;

	    function listener() {
	      if (isActive) fn.apply(void 0, arguments);
	    }

	    listeners.push(listener);
	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function notifyListeners() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(void 0, args);
	    });
	  }

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	function getConfirmation(message, callback) {
	  callback(window.confirm(message)); // eslint-disable-line no-alert
	}
	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = window.navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
	  return window.history && 'pushState' in window.history;
	}
	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */

	function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	}
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	}
	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */

	function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	}

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	}
	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */


	function createBrowserHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  !canUseDOM ?  invariant$1(false, 'Browser history needs a DOM')  : void 0;
	  var globalHistory = window.history;
	  var canUseHistory = supportsHistory();
	  var needsHashChangeListener = !supportsPopStateOnHashChange();
	  var _props = props,
	      _props$forceRefresh = _props.forceRefresh,
	      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
	      _props$getUserConfirm = _props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
	      _props$keyLength = _props.keyLength,
	      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
	  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

	  function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;
	    var path = pathname + search + hash;
	     warning$2(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
	    if (basename) path = stripBasename(path, basename);
	    return createLocation(path, state, key);
	  }

	  function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  }

	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if (isExtraneousPopstateEvent(event)) return;
	    handlePop(getDOMLocation(event.state));
	  }

	  function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  }

	  var forceNextPop = false;

	  function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({
	            action: action,
	            location: location
	          });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  }

	  function revertPop(fromLocation) {
	    var toLocation = history.location; // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);
	    if (toIndex === -1) toIndex = 0;
	    var fromIndex = allKeys.indexOf(fromLocation.key);
	    if (fromIndex === -1) fromIndex = 0;
	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  }

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key]; // Public interface

	  function createHref(location) {
	    return basename + createPath(location);
	  }

	  function push(path, state) {
	     warning$2(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;

	      if (canUseHistory) {
	        globalHistory.pushState({
	          key: key,
	          state: state
	        }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex + 1);
	          nextKeys.push(location.key);
	          allKeys = nextKeys;
	          setState({
	            action: action,
	            location: location
	          });
	        }
	      } else {
	         warning$2(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') ;
	        window.location.href = href;
	      }
	    });
	  }

	  function replace(path, state) {
	     warning$2(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;

	      if (canUseHistory) {
	        globalHistory.replaceState({
	          key: key,
	          state: state
	        }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
	          setState({
	            action: action,
	            location: location
	          });
	        }
	      } else {
	         warning$2(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') ;
	        window.location.replace(href);
	      }
	    });
	  }

	  function go(n) {
	    globalHistory.go(n);
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  var listenerCount = 0;

	  function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1 && delta === 1) {
	      window.addEventListener(PopStateEvent, handlePopState);
	      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      window.removeEventListener(PopStateEvent, handlePopState);
	      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
	    }
	  }

	  var isBlocked = false;

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  }

	  function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  }

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	var HashChangeEvent$1 = 'hashchange';
	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: stripLeadingSlash,
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	function stripHash(url) {
	  var hashIndex = url.indexOf('#');
	  return hashIndex === -1 ? url : url.slice(0, hashIndex);
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	}

	function pushHashPath(path) {
	  window.location.hash = path;
	}

	function replaceHashPath(path) {
	  window.location.replace(stripHash(window.location.href) + '#' + path);
	}

	function createHashHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  !canUseDOM ?  invariant$1(false, 'Hash history needs a DOM')  : void 0;
	  var globalHistory = window.history;
	  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
	  var _props = props,
	      _props$getUserConfirm = _props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
	      _props$hashType = _props.hashType,
	      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
	  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;

	  function getDOMLocation() {
	    var path = decodePath(getHashPath());
	     warning$2(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
	    if (basename) path = stripBasename(path, basename);
	    return createLocation(path);
	  }

	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  var forceNextPop = false;
	  var ignorePath = null;

	  function locationsAreEqual$$1(a, b) {
	    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
	  }

	  function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;
	      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;
	      handlePop(location);
	    }
	  }

	  function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({
	            action: action,
	            location: location
	          });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  }

	  function revertPop(fromLocation) {
	    var toLocation = history.location; // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
	    if (toIndex === -1) toIndex = 0;
	    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
	    if (fromIndex === -1) fromIndex = 0;
	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  } // Ensure the hash is encoded properly before doing anything else.


	  var path = getHashPath();
	  var encodedPath = encodePath(path);
	  if (path !== encodedPath) replaceHashPath(encodedPath);
	  var initialLocation = getDOMLocation();
	  var allPaths = [createPath(initialLocation)]; // Public interface

	  function createHref(location) {
	    var baseTag = document.querySelector('base');
	    var href = '';

	    if (baseTag && baseTag.getAttribute('href')) {
	      href = stripHash(window.location.href);
	    }

	    return href + '#' + encodePath(basename + createPath(location));
	  }

	  function push(path, state) {
	     warning$2(state === undefined, 'Hash history cannot push state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);
	        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex + 1);
	        nextPaths.push(path);
	        allPaths = nextPaths;
	        setState({
	          action: action,
	          location: location
	        });
	      } else {
	         warning$2(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') ;
	        setState();
	      }
	    });
	  }

	  function replace(path, state) {
	     warning$2(state === undefined, 'Hash history cannot replace state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf(createPath(history.location));
	      if (prevIndex !== -1) allPaths[prevIndex] = path;
	      setState({
	        action: action,
	        location: location
	      });
	    });
	  }

	  function go(n) {
	     warning$2(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') ;
	    globalHistory.go(n);
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  var listenerCount = 0;

	  function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1 && delta === 1) {
	      window.addEventListener(HashChangeEvent$1, handleHashChange);
	    } else if (listenerCount === 0) {
	      window.removeEventListener(HashChangeEvent$1, handleHashChange);
	    }
	  }

	  var isBlocked = false;

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  }

	  function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  }

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	}
	/**
	 * Creates a history object that stores locations in memory.
	 */


	function createMemoryHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  var _props = props,
	      getUserConfirmation = _props.getUserConfirmation,
	      _props$initialEntries = _props.initialEntries,
	      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
	      _props$initialIndex = _props.initialIndex,
	      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
	      _props$keyLength = _props.keyLength,
	      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  }

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
	  }); // Public interface

	  var createHref = createPath;

	  function push(path, state) {
	     warning$2(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;
	      var nextEntries = history.entries.slice(0);

	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  }

	  function replace(path, state) {
	     warning$2(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      history.entries[history.index] = location;
	      setState({
	        action: action,
	        location: location
	      });
	    });
	  }

	  function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
	    var action = 'POP';
	    var location = history.entries[nextIndex];
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  }

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    return transitionManager.setPrompt(prompt);
	  }

	  function listen(listener) {
	    return transitionManager.appendListener(listener);
	  }

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var inheritsLoose = _inheritsLoose$1;

	var key = '__global_unique_id__';

	var gud = function() {
	  return global$1[key] = (global$1[key] || 0) + 1;
	};

	var MAX_SIGNED_31_BIT_INT = 1073741823;

	function objectIs(x, y) {
	  if (x === y) {
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function createEventEmitter(value) {
	  var handlers = [];
	  return {
	    on: function on(handler) {
	      handlers.push(handler);
	    },
	    off: function off(handler) {
	      handlers = handlers.filter(function (h) {
	        return h !== handler;
	      });
	    },
	    get: function get() {
	      return value;
	    },
	    set: function set(newValue, changedBits) {
	      value = newValue;
	      handlers.forEach(function (handler) {
	        return handler(value, changedBits);
	      });
	    }
	  };
	}

	function onlyChild(children) {
	  return Array.isArray(children) ? children[0] : children;
	}

	function createReactContext(defaultValue, calculateChangedBits) {
	  var _Provider$childContex, _Consumer$contextType;

	  var contextProp = '__create-react-context-' + gud() + '__';

	  var Provider =
	  /*#__PURE__*/
	  function (_Component) {
	    inheritsLoose(Provider, _Component);

	    function Provider() {
	      var _this;

	      _this = _Component.apply(this, arguments) || this;
	      _this.emitter = createEventEmitter(_this.props.value);
	      return _this;
	    }

	    var _proto = Provider.prototype;

	    _proto.getChildContext = function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
	    };

	    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      if (this.props.value !== nextProps.value) {
	        var oldValue = this.props.value;
	        var newValue = nextProps.value;
	        var changedBits;

	        if (objectIs(oldValue, newValue)) {
	          changedBits = 0;
	        } else {
	          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	          {
	            warning$2((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
	          }

	          changedBits |= 0;

	          if (changedBits !== 0) {
	            this.emitter.set(nextProps.value, changedBits);
	          }
	        }
	      }
	    };

	    _proto.render = function render() {
	      return this.props.children;
	    };

	    return Provider;
	  }(react_3);

	  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = propTypes.object.isRequired, _Provider$childContex);

	  var Consumer =
	  /*#__PURE__*/
	  function (_Component2) {
	    inheritsLoose(Consumer, _Component2);

	    function Consumer() {
	      var _this2;

	      _this2 = _Component2.apply(this, arguments) || this;
	      _this2.state = {
	        value: _this2.getValue()
	      };

	      _this2.onUpdate = function (newValue, changedBits) {
	        var observedBits = _this2.observedBits | 0;

	        if ((observedBits & changedBits) !== 0) {
	          _this2.setState({
	            value: _this2.getValue()
	          });
	        }
	      };

	      return _this2;
	    }

	    var _proto2 = Consumer.prototype;

	    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      var observedBits = nextProps.observedBits;
	      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
	    };

	    _proto2.componentDidMount = function componentDidMount() {
	      if (this.context[contextProp]) {
	        this.context[contextProp].on(this.onUpdate);
	      }

	      var observedBits = this.props.observedBits;
	      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
	    };

	    _proto2.componentWillUnmount = function componentWillUnmount() {
	      if (this.context[contextProp]) {
	        this.context[contextProp].off(this.onUpdate);
	      }
	    };

	    _proto2.getValue = function getValue() {
	      if (this.context[contextProp]) {
	        return this.context[contextProp].get();
	      } else {
	        return defaultValue;
	      }
	    };

	    _proto2.render = function render() {
	      return onlyChild(this.props.children)(this.state.value);
	    };

	    return Consumer;
	  }(react_3);

	  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = propTypes.object, _Consumer$contextType);
	  return {
	    Provider: Provider,
	    Consumer: Consumer
	  };
	}

	var index = react.createContext || createReactContext;

	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse$3;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse$3 (str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse$3(str, options), options)
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens, options) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
	    }
	  }

	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options && options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse$3(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';

	      keys.push(token);

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}
	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	// TODO: Replace with React.createContext once we can assume React 16+

	var createNamedContext = function createNamedContext(name) {
	  let context = index();
	  context.displayName = name;
	  return context
	};

	let context =
	/*#__PURE__ */
	createNamedContext('Router');

	/**
	 * The public API for putting history on context.
	 */

	var Router =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(Router, _React$Component);

	  Router.computeRootMatch = function computeRootMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  function Router(props) {
	    var _this;

	    _this = _React$Component.call(this, props) || this;
	    _this.state = {
	      location: props.history.location
	    }; // This is a bit of a hack. We have to start listening for location
	    // changes here in the constructor in case there are any <Redirect>s
	    // on the initial render. If there are, they will replace/push when
	    // they mount and since cDM fires in children before parents, we may
	    // get a new location before the <Router> is mounted.

	    _this._isMounted = false;
	    _this._pendingLocation = null;

	    if (!props.staticContext) {
	      _this.unlisten = props.history.listen(function (location) {
	        if (_this._isMounted) {
	          _this.setState({
	            location: location
	          });
	        } else {
	          _this._pendingLocation = location;
	        }
	      });
	    }

	    return _this;
	  }

	  var _proto = Router.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this._isMounted = true;

	    if (this._pendingLocation) {
	      this.setState({
	        location: this._pendingLocation
	      });
	    }
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.unlisten) this.unlisten();
	  };

	  _proto.render = function render() {
	    return react.createElement(context.Provider, {
	      children: this.props.children || null,
	      value: {
	        history: this.props.history,
	        location: this.state.location,
	        match: Router.computeRootMatch(this.state.location.pathname),
	        staticContext: this.props.staticContext
	      }
	    });
	  };

	  return Router;
	}(react.Component));

	{
	  Router.propTypes = {
	    children: propTypes.node,
	    history: propTypes.object.isRequired,
	    staticContext: propTypes.object,
	  };

	  Router.prototype.componentDidUpdate = function (prevProps) {
	     warning$2(prevProps.history === this.props.history, 'You cannot change <Router history>') ;
	  };
	}

	/**
	 * The public API for a <Router> that stores location in memory.
	 */

	let MemoryRouter =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createMemoryHistory(_this.props);
	    return _this;
	  }

	  var _proto = MemoryRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return MemoryRouter;
	}(react.Component));

	{
	  MemoryRouter.propTypes = {
	    initialEntries: propTypes.array,
	    initialIndex: propTypes.number,
	    getUserConfirmation: propTypes.func,
	    keyLength: propTypes.number,
	    children: propTypes.node,
	  };

	  MemoryRouter.prototype.componentDidMount = function () {
	     warning$2(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.') ;
	  };
	}

	let Lifecycle =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(Lifecycle, _React$Component);

	  function Lifecycle() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Lifecycle.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    if (this.props.onMount) this.props.onMount.call(this, this);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
	  };

	  _proto.render = function render() {
	    return null;
	  };

	  return Lifecycle;
	}(react.Component));

	/**
	 * The public API for prompting the user before navigating away from a screen.
	 */

	function Prompt(_ref) {
	  let {message} = _ref;
	      var _ref$when = _ref.when;
	      var when = _ref$when === void 0 ? true : _ref$when;
	  return react.createElement(context.Consumer, null, (context) => {
	    !context ?  invariant$1(false, "You should not use <Prompt> outside a <Router>")  : void 0;
	    if (!when || context.staticContext) return null;
	    var method = context.history.block;
	    return react.createElement(Lifecycle, {
	      onMount: function onMount(self) {
	        self.release = method(message);
	      },
	      onUpdate: function onUpdate(self, prevProps) {
	        if (prevProps.message !== message) {
	          self.release();
	          self.release = method(message);
	        }
	      },
	      onUnmount: function onUnmount(self) {
	        self.release();
	      },
	      message: message
	    });
	  })
	}

	{
	  let messageType = propTypes.oneOfType([propTypes.func, propTypes.string]);
	  Prompt.propTypes = {
	    when: propTypes.bool,
	    message: messageType.isRequired,
	  };
	}

	let cache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	function compilePath(path) {
	  if (cache[path]) return cache[path]
	  var generator = pathToRegexp_1.compile(path);

	  if (cacheCount < cacheLimit) {
	    cache[path] = generator;
	    cacheCount++;
	  }

	  return generator
	}
	/**
	 * Public API for generating a URL pathname from a path and parameters.
	 */


	function generatePath(path, params) {
	  if (path === void 0) {
	    path = '/';
	  }

	  if (params === void 0) {
	    params = {};
	  }

	  return path === '/' ? path : compilePath(path)(params, {
	    pretty: true,
	  })
	}

	/**
	 * The public API for navigating programmatically with a component.
	 */

	function Redirect(_ref) {
	  let {computedMatch} = _ref;
	      var to = _ref.to;
	      var _ref$push = _ref.push;
	      var push = _ref$push === void 0 ? false : _ref$push;
	  return react.createElement(context.Consumer, null, (context) => {
	    !context ?  invariant$1(false, "You should not use <Redirect> outside a <Router>")  : void 0;
	    var history = context.history,
	        staticContext = context.staticContext;
	    var method = push ? history.push : history.replace;
	    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
	      pathname: generatePath(to.pathname, computedMatch.params)
	    }) : to); // When rendering in a static context,
	    // set the new location immediately.

	    if (staticContext) {
	      method(location);
	      return null;
	    }

	    return react.createElement(Lifecycle, {
	      onMount: function onMount() {
	        method(location);
	      },
	      onUpdate: function onUpdate(self, prevProps) {
	        var prevLocation = createLocation(prevProps.to);

	        if (!locationsAreEqual(prevLocation, _extends({}, location, {
	          key: prevLocation.key
	        }))) {
	          method(location);
	        }
	      },
	      to: to
	    });
	  })
	}

	{
	  Redirect.propTypes = {
	    push: propTypes.bool,
	    from: propTypes.string,
	    to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired,
	  };
	}

	let cache$1 = {};
	var cacheLimit$1 = 10000;
	var cacheCount$1 = 0;

	function compilePath$1(path, options) {
	  let cacheKey = '' + options.end + options.strict + options.sensitive;
	  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
	  if (pathCache[path]) return pathCache[path]
	  var keys = [];
	  var regexp = pathToRegexp_1(path, keys, options);
	  var result = {
	    regexp,
	    keys,
	  };

	  if (cacheCount$1 < cacheLimit$1) {
	    pathCache[path] = result;
	    cacheCount$1++;
	  }

	  return result
	}
	/**
	 * Public API for matching a URL pathname to a path.
	 */


	function matchPath(pathname, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  if (typeof options === 'string' || Array.isArray(options)) {
	    options = {
	      path: options,
	    };
	  }

	  let _options = options;
	      var path = _options.path;
	      var _options$exact = _options.exact;
	      var exact = _options$exact === void 0 ? false : _options$exact;
	      var _options$strict = _options.strict;
	      var strict = _options$strict === void 0 ? false : _options$strict;
	      var _options$sensitive = _options.sensitive;
	      var sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
	  var paths = [].concat(path);
	  return paths.reduce((matched, path) => {
	    if (!path && path !== "") return null;
	    if (matched) return matched;

	    var _compilePath = compilePath$1(path, {
	      end: exact,
	      strict: strict,
	      sensitive: sensitive
	    }),
	        regexp = _compilePath.regexp,
	        keys = _compilePath.keys;

	    var match = regexp.exec(pathname);
	    if (!match) return null;
	    var url = match[0],
	        values = match.slice(1);
	    var isExact = pathname === url;
	    if (exact && !isExact) return null;
	    return {
	      path: path,
	      // the path used to match
	      url: path === "/" && url === "" ? "/" : url,
	      // the matched portion of the URL
	      isExact: isExact,
	      // whether or not we matched exactly
	      params: keys.reduce(function (memo, key, index) {
	        memo[key.name] = values[index];
	        return memo;
	      }, {})
	    };
	  }, null)
	}

	function isEmptyChildren(children) {
	  return react.Children.count(children) === 0
	}

	function evalChildrenDev(children, props, path) {
	  let value = children(props);
	   warning$2(value !== undefined, 'You returned `undefined` from the `children` function of ' + ('<Route' + (path ? ' path="' + path + '"' : '') + '>, but you ') + 'should have returned a React element or `null`') ;
	  return value || null
	}
	/**
	 * The public API for matching a single path and rendering.
	 */


	let Route =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(Route, _React$Component);

	  function Route() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Route.prototype;

	  _proto.render = function render() {
	    var _this = this;

	    return react.createElement(context.Consumer, null, function (context$1) {
	      !context$1 ?  invariant$1(false, "You should not use <Route> outside a <Router>")  : void 0;
	      var location = _this.props.location || context$1.location;
	      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
	      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

	      var props = _extends({}, context$1, {
	        location: location,
	        match: match
	      });

	      var _this$props = _this.props,
	          children = _this$props.children,
	          component = _this$props.component,
	          render = _this$props.render; // Preact uses an empty array as children by
	      // default, so use null if that's the case.

	      if (Array.isArray(children) && children.length === 0) {
	        children = null;
	      }

	      return react.createElement(context.Provider, {
	        value: props
	      }, props.match ? children ? typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : children : component ? react.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : null);
	    });
	  };

	  return Route;
	}(react.Component));

	{
	  Route.propTypes = {
	    children: propTypes.oneOfType([propTypes.func, propTypes.node]),
	    component: function component(props, propName) {
	      if (props[propName] && !reactIs_1(props[propName])) {
	        return new Error('Invalid prop \'component\' supplied to \'Route\': the prop is not a valid React component')
	      }
	    },
	    exact: propTypes.bool,
	    location: propTypes.object,
	    path: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
	    render: propTypes.func,
	    sensitive: propTypes.bool,
	    strict: propTypes.bool,
	  };

	  Route.prototype.componentDidMount = function () {
	     warning$2(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), 'You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored') ;
	     warning$2(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), 'You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored') ;
	     warning$2(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored') ;
	  };

	  Route.prototype.componentDidUpdate = function (prevProps) {
	     warning$2(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
	     warning$2(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
	  };
	}

	function addLeadingSlash$1(path) {
	  return path.charAt(0) === '/' ? path : '/' + path
	}

	function addBasename(basename, location) {
	  if (!basename) return location
	  return _extends({}, location, {
	    pathname: addLeadingSlash$1(basename) + location.pathname,
	  })
	}

	function stripBasename$1(basename, location) {
	  if (!basename) return location
	  var base = addLeadingSlash$1(basename);
	  if (location.pathname.indexOf(base) !== 0) return location
	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length),
	  })
	}

	function createURL(location) {
	  return typeof location === 'string' ? location : createPath(location)
	}

	function staticHandler(methodName) {
	  return function () {
	     invariant$1(false, 'You cannot %s with <StaticRouter>') ; 
	  };
	}

	function noop$1() {}
	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */


	let StaticRouter =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

	    _this.handlePush = function (location) {
	      return _this.navigateTo(location, "PUSH");
	    };

	    _this.handleReplace = function (location) {
	      return _this.navigateTo(location, "REPLACE");
	    };

	    _this.handleListen = function () {
	      return noop$1;
	    };

	    _this.handleBlock = function () {
	      return noop$1;
	    };

	    return _this;
	  }

	  var _proto = StaticRouter.prototype;

	  _proto.navigateTo = function navigateTo(location, action) {
	    var _this$props = this.props,
	        _this$props$basename = _this$props.basename,
	        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
	        _this$props$context = _this$props.context,
	        context = _this$props$context === void 0 ? {} : _this$props$context;
	    context.action = action;
	    context.location = addBasename(basename, createLocation(location));
	    context.url = createURL(context.location);
	  };

	  _proto.render = function render() {
	    var _this$props2 = this.props,
	        _this$props2$basename = _this$props2.basename,
	        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
	        _this$props2$context = _this$props2.context,
	        context = _this$props2$context === void 0 ? {} : _this$props2$context,
	        _this$props2$location = _this$props2.location,
	        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
	        rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);

	    var history = {
	      createHref: function createHref(path) {
	        return addLeadingSlash$1(basename + createURL(path));
	      },
	      action: "POP",
	      location: stripBasename$1(basename, createLocation(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler(),
	      goBack: staticHandler(),
	      goForward: staticHandler(),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };
	    return react.createElement(Router, _extends({}, rest, {
	      history: history,
	      staticContext: context
	    }));
	  };

	  return StaticRouter;
	}(react.Component));

	{
	  StaticRouter.propTypes = {
	    basename: propTypes.string,
	    context: propTypes.object,
	    location: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  };

	  StaticRouter.prototype.componentDidMount = function () {
	     warning$2(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.') ;
	  };
	}

	/**
	 * The public API for rendering the first <Route> that matches.
	 */

	let Switch =
	/*#__PURE__ */
	(function (_React$Component) {
	  _inheritsLoose(Switch, _React$Component);

	  function Switch() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Switch.prototype;

	  _proto.render = function render() {
	    var _this = this;

	    return react.createElement(context.Consumer, null, function (context) {
	      !context ?  invariant$1(false, "You should not use <Switch> outside a <Router>")  : void 0;
	      var location = _this.props.location || context.location;
	      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
	      // here because toArray adds keys to all child elements and we do not want
	      // to trigger an unmount/remount for two <Route>s that render the same
	      // component at different URLs.

	      react.Children.forEach(_this.props.children, function (child) {
	        if (match == null && react.isValidElement(child)) {
	          element = child;
	          var path = child.props.path || child.props.from;
	          match = path ? matchPath(location.pathname, _extends({}, child.props, {
	            path: path
	          })) : context.match;
	        }
	      });
	      return match ? react.cloneElement(element, {
	        location: location,
	        computedMatch: match
	      }) : null;
	    });
	  };

	  return Switch;
	}(react.Component));

	{
	  Switch.propTypes = {
	    children: propTypes.node,
	    location: propTypes.object,
	  };

	  Switch.prototype.componentDidUpdate = function (prevProps) {
	     warning$2(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
	     warning$2(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
	  };
	}

	/**
	 * A public higher-order component to access the imperative API
	 */

	function withRouter(Component) {
	  let displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';

	  let C = function C(props) {
	    let {wrappedComponentRef} = props;
	        var remainingProps = _objectWithoutPropertiesLoose(props, ['wrappedComponentRef']);

	    return react.createElement(context.Consumer, null, (context) => {
	      !context ?  invariant$1(false, "You should not use <" + displayName + " /> outside a <Router>")  : void 0;
	      return react.createElement(Component, _extends({}, remainingProps, context, {
	        ref: wrappedComponentRef
	      }));
	    })
	  };

	  C.displayName = displayName;
	  C.WrappedComponent = Component;

	  {
	    C.propTypes = {
	      wrappedComponentRef: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
	    };
	  }

	  return hoistNonReactStatics_cjs(C, Component)
	}

	let {useContext} = react;
	function useHistory() {
	  {
	    !(typeof useContext === 'function') ?  invariant$1(false, 'You must use React >= 16.8 in order to use useHistory()')  : void 0;
	  }

	  return useContext(context).history
	}
	function useLocation() {
	  {
	    !(typeof useContext === 'function') ?  invariant$1(false, 'You must use React >= 16.8 in order to use useLocation()')  : void 0;
	  }

	  return useContext(context).location
	}
	function useParams() {
	  {
	    !(typeof useContext === 'function') ?  invariant$1(false, 'You must use React >= 16.8 in order to use useParams()')  : void 0;
	  }

	  let {match} = useContext(context);
	  return match ? match.params : {}
	}
	function useRouteMatch(path) {
	  {
	    !(typeof useContext === 'function') ?  invariant$1(false, 'You must use React >= 16.8 in order to use useRouteMatch()')  : void 0;
	  }

	  return path ? matchPath(useLocation().pathname, path) : useContext(context).match
	}

	{
	  if (typeof window !== 'undefined') {
	    let global = window;
	    var key$1 = '__react_router_build__';
	    let buildNames = {
	      cjs: 'CommonJS',
	      esm: 'ES modules',
	      umd: 'UMD',
	    };

	    if (global[key$1] && global[key$1] !== 'esm') {
	      let initialBuildName = buildNames[global[key$1]];
	      var secondaryBuildName = buildNames.esm; // TODO: Add link to article that explains in detail how to avoid
	      // loading 2 different builds.

	      throw new Error('You are loading the ' + secondaryBuildName + ' build of React Router ' + ('on a page that is already running the ' + initialBuildName + ' ') + 'build, so things won\'t work right.')
	    }

	    global[key$1] = 'esm';
	  }
	}
	// # sourceMappingURL=react-router.js.map

	var ReactRouter = /*#__PURE__*/Object.freeze({
		__proto__: null,
		MemoryRouter: MemoryRouter,
		Prompt: Prompt,
		Redirect: Redirect,
		Route: Route,
		Router: Router,
		StaticRouter: StaticRouter,
		Switch: Switch,
		__RouterContext: context,
		generatePath: generatePath,
		matchPath: matchPath,
		useHistory: useHistory,
		useLocation: useLocation,
		useParams: useParams,
		useRouteMatch: useRouteMatch,
		withRouter: withRouter
	});

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */

	var BrowserRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createBrowserHistory(_this.props);
	    return _this;
	  }

	  var _proto = BrowserRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return BrowserRouter;
	}(react.Component);

	{
	  BrowserRouter.propTypes = {
	    basename: propTypes.string,
	    children: propTypes.node,
	    forceRefresh: propTypes.bool,
	    getUserConfirmation: propTypes.func,
	    keyLength: propTypes.number
	  };

	  BrowserRouter.prototype.componentDidMount = function () {
	     warning$2(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") ;
	  };
	}

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */

	var HashRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(HashRouter, _React$Component);

	  function HashRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createHashHistory(_this.props);
	    return _this;
	  }

	  var _proto = HashRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return HashRouter;
	}(react.Component);

	{
	  HashRouter.propTypes = {
	    basename: propTypes.string,
	    children: propTypes.node,
	    getUserConfirmation: propTypes.func,
	    hashType: propTypes.oneOf(["hashbang", "noslash", "slash"])
	  };

	  HashRouter.prototype.componentDidMount = function () {
	     warning$2(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") ;
	  };
	}

	var resolveToLocation = function resolveToLocation(to, currentLocation) {
	  return typeof to === "function" ? to(currentLocation) : to;
	};
	var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
	  return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
	};

	var forwardRefShim = function forwardRefShim(C) {
	  return C;
	};

	var forwardRef = react.forwardRef;

	if (typeof forwardRef === "undefined") {
	  forwardRef = forwardRefShim;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
	  var innerRef = _ref.innerRef,
	      navigate = _ref.navigate,
	      _onClick = _ref.onClick,
	      rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);

	  var target = rest.target;

	  var props = _extends({}, rest, {
	    onClick: function onClick(event) {
	      try {
	        if (_onClick) _onClick(event);
	      } catch (ex) {
	        event.preventDefault();
	        throw ex;
	      }

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && ( // ignore everything but left clicks
	      !target || target === "_self") && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();
	          navigate();
	        }
	    }
	  }); // React 15 compat


	  if (forwardRefShim !== forwardRef) {
	    props.ref = forwardedRef || innerRef;
	  } else {
	    props.ref = innerRef;
	  }

	  return react.createElement("a", props);
	});

	{
	  LinkAnchor.displayName = "LinkAnchor";
	}
	/**
	 * The public API for rendering a history-aware <a>.
	 */


	var Link = forwardRef(function (_ref2, forwardedRef) {
	  var _ref2$component = _ref2.component,
	      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
	      replace = _ref2.replace,
	      to = _ref2.to,
	      innerRef = _ref2.innerRef,
	      rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);

	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant$1(false, "You should not use <Link> outside a <Router>")  : void 0;
	    var history = context.history;
	    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
	    var href = location ? history.createHref(location) : "";

	    var props = _extends({}, rest, {
	      href: href,
	      navigate: function navigate() {
	        var location = resolveToLocation(to, context.location);
	        var method = replace ? history.replace : history.push;
	        method(location);
	      }
	    }); // React 15 compat


	    if (forwardRefShim !== forwardRef) {
	      props.ref = forwardedRef || innerRef;
	    } else {
	      props.innerRef = innerRef;
	    }

	    return react.createElement(component, props);
	  });
	});

	{
	  var toType = propTypes.oneOfType([propTypes.string, propTypes.object, propTypes.func]);
	  var refType = propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.shape({
	    current: propTypes.any
	  })]);
	  Link.displayName = "Link";
	  Link.propTypes = {
	    innerRef: refType,
	    onClick: propTypes.func,
	    replace: propTypes.bool,
	    target: propTypes.string,
	    to: toType.isRequired
	  };
	}

	var forwardRefShim$1 = function forwardRefShim(C) {
	  return C;
	};

	var forwardRef$1 = react.forwardRef;

	if (typeof forwardRef$1 === "undefined") {
	  forwardRef$1 = forwardRefShim$1;
	}

	function joinClassnames() {
	  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
	    classnames[_key] = arguments[_key];
	  }

	  return classnames.filter(function (i) {
	    return i;
	  }).join(" ");
	}
	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */


	var NavLink = forwardRef$1(function (_ref, forwardedRef) {
	  var _ref$ariaCurrent = _ref["aria-current"],
	      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
	      _ref$activeClassName = _ref.activeClassName,
	      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
	      activeStyle = _ref.activeStyle,
	      classNameProp = _ref.className,
	      exact = _ref.exact,
	      isActiveProp = _ref.isActive,
	      locationProp = _ref.location,
	      strict = _ref.strict,
	      styleProp = _ref.style,
	      to = _ref.to,
	      innerRef = _ref.innerRef,
	      rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "strict", "style", "to", "innerRef"]);

	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant$1(false, "You should not use <NavLink> outside a <Router>")  : void 0;
	    var currentLocation = locationProp || context.location;
	    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
	    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

	    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
	    var match = escapedPath ? matchPath(currentLocation.pathname, {
	      path: escapedPath,
	      exact: exact,
	      strict: strict
	    }) : null;
	    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
	    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
	    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;

	    var props = _extends({
	      "aria-current": isActive && ariaCurrent || null,
	      className: className,
	      style: style,
	      to: toLocation
	    }, rest); // React 15 compat


	    if (forwardRefShim$1 !== forwardRef$1) {
	      props.ref = forwardedRef || innerRef;
	    } else {
	      props.innerRef = innerRef;
	    }

	    return react.createElement(Link, props);
	  });
	});

	{
	  NavLink.displayName = "NavLink";
	  var ariaCurrentType = propTypes.oneOf(["page", "step", "location", "date", "time", "true"]);
	  NavLink.propTypes = _extends({}, Link.propTypes, {
	    "aria-current": ariaCurrentType,
	    activeClassName: propTypes.string,
	    activeStyle: propTypes.object,
	    className: propTypes.string,
	    exact: propTypes.bool,
	    isActive: propTypes.func,
	    location: propTypes.object,
	    strict: propTypes.bool,
	    style: propTypes.object
	  });
	}

	var ReactRouterDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BrowserRouter: BrowserRouter,
		HashRouter: HashRouter,
		Link: Link,
		NavLink: NavLink,
		MemoryRouter: MemoryRouter,
		Prompt: Prompt,
		Redirect: Redirect,
		Route: Route,
		Router: Router,
		StaticRouter: StaticRouter,
		Switch: Switch,
		__RouterContext: context,
		generatePath: generatePath,
		matchPath: matchPath,
		useHistory: useHistory,
		useLocation: useLocation,
		useParams: useParams,
		useRouteMatch: useRouteMatch,
		withRouter: withRouter
	});

	var stylis_min = createCommonjsModule(function (module, exports) {
	!function(e){module.exports=e(null);}(function e(a){var r=/^\0+/g,c=/[\0\r\f]/g,s=/: */g,t=/zoo|gra/,i=/([,: ])(transform)/g,f=/,+\s*(?![^(]*[)])/g,n=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,o=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,u=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,d=/\W+/g,b=/@(k\w+)\s*(\S*)\s*/,p=/::(place)/g,k=/:(read-only)/g,g=/\s+(?=[{\];=:>])/g,A=/([[}=:>])\s+/g,C=/(\{[^{]+?);(?=\})/g,w=/\s{2,}/g,v=/([^\(])(:+) */g,m=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,$=/([\s\S]*?);/g,y=/-self|flex-/g,O=/[^]*?(:[rp][el]a[\w-]+)[^]*/,j=/stretch|:\s*\w+\-(?:conte|avail)/,z=/([^-])(image-set\()/,N="-webkit-",S="-moz-",F="-ms-",W=59,q=125,B=123,D=40,E=41,G=91,H=93,I=10,J=13,K=9,L=64,M=32,P=38,Q=45,R=95,T=42,U=44,V=58,X=39,Y=34,Z=47,_=62,ee=43,ae=126,re=0,ce=12,se=11,te=107,ie=109,fe=115,ne=112,le=111,oe=105,he=99,ue=100,de=112,be=1,pe=1,ke=0,ge=1,Ae=1,Ce=1,we=0,ve=0,me=0,xe=[],$e=[],ye=0,Oe=null,je=-2,ze=-1,Ne=0,Se=1,Fe=2,We=3,qe=0,Be=1,De="",Ee="",Ge="";function He(e,a,s,t,i){for(var f,n,o=0,h=0,u=0,d=0,g=0,A=0,C=0,w=0,m=0,$=0,y=0,O=0,j=0,z=0,R=0,we=0,$e=0,Oe=0,je=0,ze=s.length,Je=ze-1,Re="",Te="",Ue="",Ve="",Xe="",Ye="";R<ze;){if(C=s.charCodeAt(R),R===Je)if(h+d+u+o!==0){if(0!==h)C=h===Z?I:Z;d=u=o=0,ze++,Je++;}if(h+d+u+o===0){if(R===Je){if(we>0)Te=Te.replace(c,"");if(Te.trim().length>0){switch(C){case M:case K:case W:case J:case I:break;default:Te+=s.charAt(R);}C=W;}}if(1===$e)switch(C){case B:case q:case W:case Y:case X:case D:case E:case U:$e=0;case K:case J:case I:case M:break;default:for($e=0,je=R,g=C,R--,C=W;je<ze;)switch(s.charCodeAt(je++)){case I:case J:case W:++R,C=g,je=ze;break;case V:if(we>0)++R,C=g;case B:je=ze;}}switch(C){case B:for(g=(Te=Te.trim()).charCodeAt(0),y=1,je=++R;R<ze;){switch(C=s.charCodeAt(R)){case B:y++;break;case q:y--;break;case Z:switch(A=s.charCodeAt(R+1)){case T:case Z:R=Qe(A,R,Je,s);}break;case G:C++;case D:C++;case Y:case X:for(;R++<Je&&s.charCodeAt(R)!==C;);}if(0===y)break;R++;}if(Ue=s.substring(je,R),g===re)g=(Te=Te.replace(r,"").trim()).charCodeAt(0);switch(g){case L:if(we>0)Te=Te.replace(c,"");switch(A=Te.charCodeAt(1)){case ue:case ie:case fe:case Q:f=a;break;default:f=xe;}if(je=(Ue=He(a,f,Ue,A,i+1)).length,me>0&&0===je)je=Te.length;if(ye>0)if(f=Ie(xe,Te,Oe),n=Pe(We,Ue,f,a,pe,be,je,A,i,t),Te=f.join(""),void 0!==n)if(0===(je=(Ue=n.trim()).length))A=0,Ue="";if(je>0)switch(A){case fe:Te=Te.replace(x,Me);case ue:case ie:case Q:Ue=Te+"{"+Ue+"}";break;case te:if(Ue=(Te=Te.replace(b,"$1 $2"+(Be>0?De:"")))+"{"+Ue+"}",1===Ae||2===Ae&&Le("@"+Ue,3))Ue="@"+N+Ue+"@"+Ue;else Ue="@"+Ue;break;default:if(Ue=Te+Ue,t===de)Ve+=Ue,Ue="";}else Ue="";break;default:Ue=He(a,Ie(a,Te,Oe),Ue,t,i+1);}Xe+=Ue,O=0,$e=0,z=0,we=0,Oe=0,j=0,Te="",Ue="",C=s.charCodeAt(++R);break;case q:case W:if((je=(Te=(we>0?Te.replace(c,""):Te).trim()).length)>1){if(0===z)if((g=Te.charCodeAt(0))===Q||g>96&&g<123)je=(Te=Te.replace(" ",":")).length;if(ye>0)if(void 0!==(n=Pe(Se,Te,a,e,pe,be,Ve.length,t,i,t)))if(0===(je=(Te=n.trim()).length))Te="\0\0";switch(g=Te.charCodeAt(0),A=Te.charCodeAt(1),g){case re:break;case L:if(A===oe||A===he){Ye+=Te+s.charAt(R);break}default:if(Te.charCodeAt(je-1)===V)break;Ve+=Ke(Te,g,A,Te.charCodeAt(2));}}O=0,$e=0,z=0,we=0,Oe=0,Te="",C=s.charCodeAt(++R);}}switch(C){case J:case I:if(h+d+u+o+ve===0)switch($){case E:case X:case Y:case L:case ae:case _:case T:case ee:case Z:case Q:case V:case U:case W:case B:case q:break;default:if(z>0)$e=1;}if(h===Z)h=0;else if(ge+O===0&&t!==te&&Te.length>0)we=1,Te+="\0";if(ye*qe>0)Pe(Ne,Te,a,e,pe,be,Ve.length,t,i,t);be=1,pe++;break;case W:case q:if(h+d+u+o===0){be++;break}default:switch(be++,Re=s.charAt(R),C){case K:case M:if(d+o+h===0)switch(w){case U:case V:case K:case M:Re="";break;default:if(C!==M)Re=" ";}break;case re:Re="\\0";break;case ce:Re="\\f";break;case se:Re="\\v";break;case P:if(d+h+o===0&&ge>0)Oe=1,we=1,Re="\f"+Re;break;case 108:if(d+h+o+ke===0&&z>0)switch(R-z){case 2:if(w===ne&&s.charCodeAt(R-3)===V)ke=w;case 8:if(m===le)ke=m;}break;case V:if(d+h+o===0)z=R;break;case U:if(h+u+d+o===0)we=1,Re+="\r";break;case Y:case X:if(0===h)d=d===C?0:0===d?C:d;break;case G:if(d+h+u===0)o++;break;case H:if(d+h+u===0)o--;break;case E:if(d+h+o===0)u--;break;case D:if(d+h+o===0){if(0===O)switch(2*w+3*m){case 533:break;default:y=0,O=1;}u++;}break;case L:if(h+u+d+o+z+j===0)j=1;break;case T:case Z:if(d+o+u>0)break;switch(h){case 0:switch(2*C+3*s.charCodeAt(R+1)){case 235:h=Z;break;case 220:je=R,h=T;}break;case T:if(C===Z&&w===T&&je+2!==R){if(33===s.charCodeAt(je+2))Ve+=s.substring(je,R+1);Re="",h=0;}}}if(0===h){if(ge+d+o+j===0&&t!==te&&C!==W)switch(C){case U:case ae:case _:case ee:case E:case D:if(0===O){switch(w){case K:case M:case I:case J:Re+="\0";break;default:Re="\0"+Re+(C===U?"":"\0");}we=1;}else switch(C){case D:if(z+7===R&&108===w)z=0;O=++y;break;case E:if(0==(O=--y))we=1,Re+="\0";}break;case K:case M:switch(w){case re:case B:case q:case W:case U:case ce:case K:case M:case I:case J:break;default:if(0===O)we=1,Re+="\0";}}if(Te+=Re,C!==M&&C!==K)$=C;}}m=w,w=C,R++;}if(je=Ve.length,me>0)if(0===je&&0===Xe.length&&0===a[0].length==false)if(t!==ie||1===a.length&&(ge>0?Ee:Ge)===a[0])je=a.join(",").length+2;if(je>0){if(f=0===ge&&t!==te?function(e){for(var a,r,s=0,t=e.length,i=Array(t);s<t;++s){for(var f=e[s].split(l),n="",o=0,h=0,u=0,d=0,b=f.length;o<b;++o){if(0===(h=(r=f[o]).length)&&b>1)continue;if(u=n.charCodeAt(n.length-1),d=r.charCodeAt(0),a="",0!==o)switch(u){case T:case ae:case _:case ee:case M:case D:break;default:a=" ";}switch(d){case P:r=a+Ee;case ae:case _:case ee:case M:case E:case D:break;case G:r=a+r+Ee;break;case V:switch(2*r.charCodeAt(1)+3*r.charCodeAt(2)){case 530:if(Ce>0){r=a+r.substring(8,h-1);break}default:if(o<1||f[o-1].length<1)r=a+Ee+r;}break;case U:a="";default:if(h>1&&r.indexOf(":")>0)r=a+r.replace(v,"$1"+Ee+"$2");else r=a+r+Ee;}n+=r;}i[s]=n.replace(c,"").trim();}return i}(a):a,ye>0)if(void 0!==(n=Pe(Fe,Ve,f,e,pe,be,je,t,i,t))&&0===(Ve=n).length)return Ye+Ve+Xe;if(Ve=f.join(",")+"{"+Ve+"}",Ae*ke!=0){if(2===Ae&&!Le(Ve,2))ke=0;switch(ke){case le:Ve=Ve.replace(k,":"+S+"$1")+Ve;break;case ne:Ve=Ve.replace(p,"::"+N+"input-$1")+Ve.replace(p,"::"+S+"$1")+Ve.replace(p,":"+F+"input-$1")+Ve;}ke=0;}}return Ye+Ve+Xe}function Ie(e,a,r){var c=a.trim().split(o),s=c,t=c.length,i=e.length;switch(i){case 0:case 1:for(var f=0,n=0===i?"":e[0]+" ";f<t;++f)s[f]=Je(n,s[f],r,i).trim();break;default:f=0;var l=0;for(s=[];f<t;++f)for(var h=0;h<i;++h)s[l++]=Je(e[h]+" ",c[f],r,i).trim();}return s}function Je(e,a,r,c){var s=a,t=s.charCodeAt(0);if(t<33)t=(s=s.trim()).charCodeAt(0);switch(t){case P:switch(ge+c){case 0:case 1:if(0===e.trim().length)break;default:return s.replace(h,"$1"+e.trim())}break;case V:switch(s.charCodeAt(1)){case 103:if(Ce>0&&ge>0)return s.replace(u,"$1").replace(h,"$1"+Ge);break;default:return e.trim()+s.replace(h,"$1"+e.trim())}default:if(r*ge>0&&s.indexOf("\f")>0)return s.replace(h,(e.charCodeAt(0)===V?"":"$1")+e.trim())}return e+s}function Ke(e,a,r,c){var l,o=0,h=e+";",u=2*a+3*r+4*c;if(944===u)return function(e){var a=e.length,r=e.indexOf(":",9)+1,c=e.substring(0,r).trim(),s=e.substring(r,a-1).trim();switch(e.charCodeAt(9)*Be){case 0:break;case Q:if(110!==e.charCodeAt(10))break;default:for(var t=s.split((s="",f)),i=0,r=0,a=t.length;i<a;r=0,++i){for(var l=t[i],o=l.split(n);l=o[r];){var h=l.charCodeAt(0);if(1===Be&&(h>L&&h<90||h>96&&h<123||h===R||h===Q&&l.charCodeAt(1)!==Q))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=De;}}o[r++]=l;}s+=(0===i?"":",")+o.join(" ");}}if(s=c+s+";",1===Ae||2===Ae&&Le(s,1))return N+s+s;return s}(h);else if(0===Ae||2===Ae&&!Le(h,1))return h;switch(u){case 1015:return 97===h.charCodeAt(10)?N+h+h:h;case 951:return 116===h.charCodeAt(3)?N+h+h:h;case 963:return 110===h.charCodeAt(5)?N+h+h:h;case 1009:if(100!==h.charCodeAt(4))break;case 969:case 942:return N+h+h;case 978:return N+h+S+h+h;case 1019:case 983:return N+h+S+h+F+h+h;case 883:if(h.charCodeAt(8)===Q)return N+h+h;if(h.indexOf("image-set(",11)>0)return h.replace(z,"$1"+N+"$2")+h;return h;case 932:if(h.charCodeAt(4)===Q)switch(h.charCodeAt(5)){case 103:return N+"box-"+h.replace("-grow","")+N+h+F+h.replace("grow","positive")+h;case 115:return N+h+F+h.replace("shrink","negative")+h;case 98:return N+h+F+h.replace("basis","preferred-size")+h}return N+h+F+h+h;case 964:return N+h+F+"flex-"+h+h;case 1023:if(99!==h.charCodeAt(8))break;return l=h.substring(h.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),N+"box-pack"+l+N+h+F+"flex-pack"+l+h;case 1005:return t.test(h)?h.replace(s,":"+N)+h.replace(s,":"+S)+h:h;case 1e3:switch(o=(l=h.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(o)){case 226:l=h.replace(m,"tb");break;case 232:l=h.replace(m,"tb-rl");break;case 220:l=h.replace(m,"lr");break;default:return h}return N+h+F+l+h;case 1017:if(-1===h.indexOf("sticky",9))return h;case 975:switch(o=(h=e).length-10,u=(l=(33===h.charCodeAt(o)?h.substring(0,o):h).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:h=h.replace(l,N+l)+";"+h;break;case 207:case 102:h=h.replace(l,N+(u>102?"inline-":"")+"box")+";"+h.replace(l,N+l)+";"+h.replace(l,F+l+"box")+";"+h;}return h+";";case 938:if(h.charCodeAt(5)===Q)switch(h.charCodeAt(6)){case 105:return l=h.replace("-items",""),N+h+N+"box-"+l+F+"flex-"+l+h;case 115:return N+h+F+"flex-item-"+h.replace(y,"")+h;default:return N+h+F+"flex-line-pack"+h.replace("align-content","").replace(y,"")+h}break;case 973:case 989:if(h.charCodeAt(3)!==Q||122===h.charCodeAt(4))break;case 931:case 953:if(true===j.test(e))if(115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0))return Ke(e.replace("stretch","fill-available"),a,r,c).replace(":fill-available",":stretch");else return h.replace(l,N+l)+h.replace(l,S+l.replace("fill-",""))+h;break;case 962:if(h=N+h+(102===h.charCodeAt(5)?F+h:"")+h,r+c===211&&105===h.charCodeAt(13)&&h.indexOf("transform",10)>0)return h.substring(0,h.indexOf(";",27)+1).replace(i,"$1"+N+"$2")+h}return h}function Le(e,a){var r=e.indexOf(1===a?":":"{"),c=e.substring(0,3!==a?r:10),s=e.substring(r+1,e.length-1);return Oe(2!==a?c:c.replace(O,"$1"),s,a)}function Me(e,a){var r=Ke(a,a.charCodeAt(0),a.charCodeAt(1),a.charCodeAt(2));return r!==a+";"?r.replace($," or ($1)").substring(4):"("+a+")"}function Pe(e,a,r,c,s,t,i,f,n,l){for(var o,h=0,u=a;h<ye;++h)switch(o=$e[h].call(Te,e,u,r,c,s,t,i,f,n,l)){case void 0:case false:case true:case null:break;default:u=o;}if(u!==a)return u}function Qe(e,a,r,c){for(var s=a+1;s<r;++s)switch(c.charCodeAt(s)){case Z:if(e===T)if(c.charCodeAt(s-1)===T&&a+2!==s)return s+1;break;case I:if(e===Z)return s+1}return s}function Re(e){for(var a in e){var r=e[a];switch(a){case"keyframe":Be=0|r;break;case"global":Ce=0|r;break;case"cascade":ge=0|r;break;case"compress":we=0|r;break;case"semicolon":ve=0|r;break;case"preserve":me=0|r;break;case"prefix":if(Oe=null,!r)Ae=0;else if("function"!=typeof r)Ae=1;else Ae=2,Oe=r;}}return Re}function Te(a,r){if(void 0!==this&&this.constructor===Te)return e(a);var s=a,t=s.charCodeAt(0);if(t<33)t=(s=s.trim()).charCodeAt(0);if(Be>0)De=s.replace(d,t===G?"":"-");if(t=1,1===ge)Ge=s;else Ee=s;var i,f=[Ge];if(ye>0)if(void 0!==(i=Pe(ze,r,f,f,pe,be,0,0,0,0))&&"string"==typeof i)r=i;var n=He(xe,f,r,0,0);if(ye>0)if(void 0!==(i=Pe(je,n,f,f,pe,be,n.length,0,0,0))&&"string"!=typeof(n=i))t=0;return De="",Ge="",Ee="",ke=0,pe=1,be=1,we*t==0?n:n.replace(c,"").replace(g,"").replace(A,"$1").replace(C,"$1").replace(w," ")}if(Te.use=function e(a){switch(a){case void 0:case null:ye=$e.length=0;break;default:if("function"==typeof a)$e[ye++]=a;else if("object"==typeof a)for(var r=0,c=a.length;r<c;++r)e(a[r]);else qe=0|!!a;}return e},Te.set=Re,void 0!==a)Re(a);return Te});

	});

	var stylisRuleSheet = createCommonjsModule(function (module, exports) {
	(function (factory) {
		 (module['exports'] = factory()) ;
	}(function () {

		return function (insertRule) {
			var delimiter = '/*|*/';
			var needle = delimiter+'}';

			function toSheet (block) {
				if (block)
					try {
						insertRule(block + '}');
					} catch (e) {}
			}

			return function ruleSheet (context, content, selectors, parents, line, column, length, ns, depth, at) {
				switch (context) {
					// property
					case 1:
						// @import
						if (depth === 0 && content.charCodeAt(0) === 64)
							return insertRule(content+';'), ''
						break
					// selector
					case 2:
						if (ns === 0)
							return content + delimiter
						break
					// at-rule
					case 3:
						switch (ns) {
							// @font-face, @page
							case 102:
							case 112:
								return insertRule(selectors[0]+content), ''
							default:
								return content + (at === 0 ? delimiter : '')
						}
					case -2:
						content.split(needle).forEach(toSheet);
				}
			}
		}
	}));
	});

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	function areInputsEqual(newInputs, lastInputs) {
	    if (newInputs.length !== lastInputs.length) {
	        return false;
	    }
	    for (var i = 0; i < newInputs.length; i++) {
	        if (newInputs[i] !== lastInputs[i]) {
	            return false;
	        }
	    }
	    return true;
	}

	function memoizeOne(resultFn, isEqual) {
	    if (isEqual === void 0) { isEqual = areInputsEqual; }
	    var lastThis;
	    var lastArgs = [];
	    var lastResult;
	    var calledOnce = false;
	    function memoized() {
	        var newArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            newArgs[_i] = arguments[_i];
	        }
	        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
	            return lastResult;
	        }
	        lastResult = resultFn.apply(this, newArgs);
	        calledOnce = true;
	        lastThis = this;
	        lastArgs = newArgs;
	        return lastResult;
	    }
	    return memoized;
	}

	function memoize(fn) {
	  var cache = {};
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var index$1 = memoize(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/**
	 * Returns the object type of the given payload
	 *
	 * @param {*} payload
	 * @returns {string}
	 */
	function getType(payload) {
	    return Object.prototype.toString.call(payload).slice(8, -1);
	}
	/**
	 * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)
	 *
	 * @param {*} payload
	 * @returns {payload is {[key: string]: any}}
	 */
	function isPlainObject$2(payload) {
	    if (getType(payload) !== 'Object')
	        return false;
	    return (payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype);
	}
	/**
	 * Returns whether the payload is an array
	 *
	 * @param {*} payload
	 * @returns {payload is undefined}
	 */
	function isArray$4(payload) {
	    return getType(payload) === 'Array';
	}
	/**
	 * Returns whether the payload is a Symbol
	 *
	 * @param {*} payload
	 * @returns {payload is symbol}
	 */
	function isSymbol$1(payload) {
	    return (getType(payload) === 'Symbol');
	}

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	function assignProp(carry, key, newVal, originalObject) {
	    var propType = originalObject.propertyIsEnumerable(key)
	        ? 'enumerable'
	        : 'nonenumerable';
	    if (propType === 'enumerable')
	        carry[key] = newVal;
	    if (propType === 'nonenumerable') {
	        Object.defineProperty(carry, key, {
	            value: newVal,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        });
	    }
	}
	function mergeRecursively(origin, newComer, extensions) {
	    // work directly on newComer if its not an object
	    if (!isPlainObject$2(newComer)) {
	        // extend merge rules
	        if (extensions && isArray$4(extensions)) {
	            extensions.forEach(function (extend) {
	                newComer = extend(origin, newComer);
	            });
	        }
	        return newComer;
	    }
	    // define newObject to merge all values upon
	    var newObject = {};
	    if (isPlainObject$2(origin)) {
	        var props_1 = Object.getOwnPropertyNames(origin);
	        var symbols_1 = Object.getOwnPropertySymbols(origin);
	        newObject = __spreadArrays(props_1, symbols_1).reduce(function (carry, key) {
	            // @ts-ignore
	            var targetVal = origin[key];
	            if ((!isSymbol$1(key) && !Object.getOwnPropertyNames(newComer).includes(key)) ||
	                (isSymbol$1(key) && !Object.getOwnPropertySymbols(newComer).includes(key))) {
	                assignProp(carry, key, targetVal, origin);
	            }
	            return carry;
	        }, {});
	    }
	    var props = Object.getOwnPropertyNames(newComer);
	    var symbols = Object.getOwnPropertySymbols(newComer);
	    var result = __spreadArrays(props, symbols).reduce(function (carry, key) {
	        // re-define the origin and newComer as targetVal and newVal
	        var newVal = newComer[key];
	        var targetVal = (isPlainObject$2(origin))
	            // @ts-ignore
	            ? origin[key]
	            : undefined;
	        // extend merge rules
	        if (extensions && isArray$4(extensions)) {
	            extensions.forEach(function (extend) {
	                newVal = extend(targetVal, newVal);
	            });
	        }
	        // When newVal is an object do the merge recursively
	        if (targetVal !== undefined && isPlainObject$2(newVal)) {
	            newVal = mergeRecursively(targetVal, newVal, extensions);
	        }
	        assignProp(carry, key, newVal, newComer);
	        return carry;
	    }, newObject);
	    return result;
	}
	/**
	 * Merge anything recursively.
	 * Objects get merged, special objects (classes etc.) are re-assigned "as is".
	 * Basic types overwrite objects or other basic types.
	 *
	 * @param {(IConfig | any)} origin
	 * @param {...any[]} newComers
	 * @returns the result
	 */
	function merge$1(origin) {
	    var newComers = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        newComers[_i - 1] = arguments[_i];
	    }
	    var extensions = null;
	    var base = origin;
	    if (isPlainObject$2(origin) && origin.extensions && Object.keys(origin).length === 1) {
	        base = {};
	        extensions = origin.extensions;
	    }
	    return newComers.reduce(function (result, newComer) {
	        return mergeRecursively(result, newComer, extensions);
	    }, base);
	}

	// 

	var interleave = (function (strings, interpolations) {
	  var result = [strings[0]];

	  for (var i = 0, len = interpolations.length; i < len; i += 1) {
	    result.push(interpolations[i], strings[i + 1]);
	  }

	  return result;
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var _extends$1 = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	var inherits$2 = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var objectWithoutProperties = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	// 
	var isPlainObject$3 = (function (x) {
	  return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x.constructor === Object;
	});

	// 
	var EMPTY_ARRAY = Object.freeze([]);
	var EMPTY_OBJECT = Object.freeze({});

	// 
	function isFunction$3(test) {
	  return typeof test === 'function';
	}

	// 

	function getComponentName(target) {
	  return ( typeof target === 'string' && target ) || target.displayName || target.name || 'Component';
	}

	// 
	function isStatelessFunction(test) {
	  return typeof test === 'function' && !(test.prototype && test.prototype.isReactComponent);
	}

	// 
	function isStyledComponent(target) {
	  return target && typeof target.styledComponentId === 'string';
	}

	// 

	var SC_ATTR = typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || 'data-styled';

	var SC_VERSION_ATTR = 'data-styled-version';

	var SC_STREAM_ATTR = 'data-styled-streamed';

	var IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;

	var DISABLE_SPEEDY = typeof SC_DISABLE_SPEEDY === 'boolean' && SC_DISABLE_SPEEDY || typeof process !== 'undefined' && (process.env.REACT_APP_SC_DISABLE_SPEEDY || process.env.SC_DISABLE_SPEEDY) || "development" !== 'production';

	// Shared empty execution context when generating static styles
	var STATIC_EXECUTION_CONTEXT = {};

	// 


	/**
	 * Parse errors.md and turn it into a simple hash of code: message
	 */
	var ERRORS =  {
	  "1": "Cannot create styled-component for component: %s.\n\n",
	  "2": "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
	  "3": "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
	  "4": "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
	  "5": "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
	  "6": "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
	  "7": "ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n",
	  "8": "ThemeProvider: Please make your \"theme\" prop an object.\n\n",
	  "9": "Missing document `<head>`\n\n",
	  "10": "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
	  "11": "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
	  "12": "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
	  "13": "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n"
	} ;

	/**
	 * super basic version of sprintf
	 */
	function format$2() {
	  var a = arguments.length <= 0 ? undefined : arguments[0];
	  var b = [];

	  for (var c = 1, len = arguments.length; c < len; c += 1) {
	    b.push(arguments.length <= c ? undefined : arguments[c]);
	  }

	  b.forEach(function (d) {
	    a = a.replace(/%[a-z]/, d);
	  });

	  return a;
	}

	/**
	 * Create an error file out of errors.md for development and a simple web link to the full errors
	 * in production mode.
	 */

	var StyledComponentsError = function (_Error) {
	  inherits$2(StyledComponentsError, _Error);

	  function StyledComponentsError(code) {
	    classCallCheck(this, StyledComponentsError);

	    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      interpolations[_key - 1] = arguments[_key];
	    }

	    if (false) {
	      var _this;
	    } else {
	      var _this = possibleConstructorReturn(this, _Error.call(this, format$2.apply(undefined, [ERRORS[code]].concat(interpolations)).trim()));
	    }
	    return possibleConstructorReturn(_this);
	  }

	  return StyledComponentsError;
	}(Error);

	// 
	var SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm;

	var extractComps = (function (maybeCSS) {
	  var css = '' + (maybeCSS || ''); // Definitely a string, and a clone
	  var existingComponents = [];
	  css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {
	    existingComponents.push({ componentId: componentId, matchIndex: matchIndex });
	    return match;
	  });
	  return existingComponents.map(function (_ref, i) {
	    var componentId = _ref.componentId,
	        matchIndex = _ref.matchIndex;

	    var nextComp = existingComponents[i + 1];
	    var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);
	    return { componentId: componentId, cssFromDOM: cssFromDOM };
	  });
	});

	// 

	var COMMENT_REGEX = /^\s*\/\/.*$/gm;

	// NOTE: This stylis instance is only used to split rules from SSR'd style tags
	var stylisSplitter = new stylis_min({
	  global: false,
	  cascade: true,
	  keyframe: false,
	  prefix: false,
	  compress: false,
	  semicolon: true
	});

	var stylis = new stylis_min({
	  global: false,
	  cascade: true,
	  keyframe: false,
	  prefix: true,
	  compress: false,
	  semicolon: false // NOTE: This means "autocomplete missing semicolons"
	});

	// Wrap `insertRulePlugin to build a list of rules,
	// and then make our own plugin to return the rules. This
	// makes it easier to hook into the existing SSR architecture

	var parsingRules = [];

	// eslint-disable-next-line consistent-return
	var returnRulesPlugin = function returnRulesPlugin(context) {
	  if (context === -2) {
	    var parsedRules = parsingRules;
	    parsingRules = [];
	    return parsedRules;
	  }
	};

	var parseRulesPlugin = stylisRuleSheet(function (rule) {
	  parsingRules.push(rule);
	});

	var _componentId = void 0;
	var _selector = void 0;
	var _selectorRegexp = void 0;

	var selfReferenceReplacer = function selfReferenceReplacer(match, offset, string) {
	  if (
	  // the first self-ref is always untouched
	  offset > 0 &&
	  // there should be at least two self-refs to do a replacement (.b > .b)
	  string.slice(0, offset).indexOf(_selector) !== -1 &&
	  // no consecutive self refs (.b.b); that is a precedence boost and treated differently
	  string.slice(offset - _selector.length, offset) !== _selector) {
	    return '.' + _componentId;
	  }

	  return match;
	};

	/**
	 * When writing a style like
	 *
	 * & + & {
	 *   color: red;
	 * }
	 *
	 * The second ampersand should be a reference to the static component class. stylis
	 * has no knowledge of static class so we have to intelligently replace the base selector.
	 */
	var selfReferenceReplacementPlugin = function selfReferenceReplacementPlugin(context, _, selectors) {
	  if (context === 2 && selectors.length && selectors[0].lastIndexOf(_selector) > 0) {
	    // eslint-disable-next-line no-param-reassign
	    selectors[0] = selectors[0].replace(_selectorRegexp, selfReferenceReplacer);
	  }
	};

	stylis.use([selfReferenceReplacementPlugin, parseRulesPlugin, returnRulesPlugin]);
	stylisSplitter.use([parseRulesPlugin, returnRulesPlugin]);

	var splitByRules = function splitByRules(css) {
	  return stylisSplitter('', css);
	};

	function stringifyRules(rules, selector, prefix) {
	  var componentId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '&';

	  var flatCSS = rules.join('').replace(COMMENT_REGEX, ''); // replace JS comments

	  var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;

	  // stylis has no concept of state to be passed to plugins
	  // but since JS is single=threaded, we can rely on that to ensure
	  // these properties stay in sync with the current stylis run
	  _componentId = componentId;
	  _selector = selector;
	  _selectorRegexp = new RegExp('\\' + _selector + '\\b', 'g');

	  return stylis(prefix || !selector ? '' : selector, cssStr);
	}

	// 
	/* eslint-disable camelcase, no-undef */

	var getNonce = (function () {
	  return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;
	});

	// 
	/* These are helpers for the StyleTags to keep track of the injected
	 * rule names for each (component) ID that they're keeping track of.
	 * They're crucial for detecting whether a name has already been
	 * injected.
	 * (This excludes rehydrated names) */

	/* adds a new ID:name pairing to a names dictionary */
	var addNameForId = function addNameForId(names, id, name) {
	  if (name) {
	    // eslint-disable-next-line no-param-reassign
	    var namesForId = names[id] || (names[id] = Object.create(null));
	    namesForId[name] = true;
	  }
	};

	/* resets an ID entirely by overwriting it in the dictionary */
	var resetIdNames = function resetIdNames(names, id) {
	  // eslint-disable-next-line no-param-reassign
	  names[id] = Object.create(null);
	};

	/* factory for a names dictionary checking the existance of an ID:name pairing */
	var hasNameForId = function hasNameForId(names) {
	  return function (id, name) {
	    return names[id] !== undefined && names[id][name];
	  };
	};

	/* stringifies names for the html/element output */
	var stringifyNames = function stringifyNames(names) {
	  var str = '';
	  // eslint-disable-next-line guard-for-in
	  for (var id in names) {
	    str += Object.keys(names[id]).join(' ') + ' ';
	  }
	  return str.trim();
	};

	/* clones the nested names dictionary */
	var cloneNames = function cloneNames(names) {
	  var clone = Object.create(null);
	  // eslint-disable-next-line guard-for-in
	  for (var id in names) {
	    clone[id] = _extends$1({}, names[id]);
	  }
	  return clone;
	};

	// 

	/* These are helpers that deal with the insertRule (aka speedy) API
	 * They are used in the StyleTags and specifically the speedy tag
	 */

	/* retrieve a sheet for a given style tag */
	var sheetForTag = function sheetForTag(tag) {
	  // $FlowFixMe
	  if (tag.sheet) return tag.sheet;

	  /* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */
	  var size = tag.ownerDocument.styleSheets.length;
	  for (var i = 0; i < size; i += 1) {
	    var sheet = tag.ownerDocument.styleSheets[i];
	    // $FlowFixMe
	    if (sheet.ownerNode === tag) return sheet;
	  }

	  /* we should always be able to find a tag */
	  throw new StyledComponentsError(10);
	};

	/* insert a rule safely and return whether it was actually injected */
	var safeInsertRule = function safeInsertRule(sheet, cssRule, index) {
	  /* abort early if cssRule string is falsy */
	  if (!cssRule) return false;

	  var maxIndex = sheet.cssRules.length;

	  try {
	    /* use insertRule and cap passed index with maxIndex (no of cssRules) */
	    sheet.insertRule(cssRule, index <= maxIndex ? index : maxIndex);
	  } catch (err) {
	    /* any error indicates an invalid rule */
	    return false;
	  }

	  return true;
	};

	/* deletes `size` rules starting from `removalIndex` */
	var deleteRules = function deleteRules(sheet, removalIndex, size) {
	  var lowerBound = removalIndex - size;
	  for (var i = removalIndex; i > lowerBound; i -= 1) {
	    sheet.deleteRule(i);
	  }
	};

	// 

	/* this marker separates component styles and is important for rehydration */
	var makeTextMarker = function makeTextMarker(id) {
	  return '\n/* sc-component-id: ' + id + ' */\n';
	};

	/* add up all numbers in array up until and including the index */
	var addUpUntilIndex = function addUpUntilIndex(sizes, index) {
	  var totalUpToIndex = 0;
	  for (var i = 0; i <= index; i += 1) {
	    totalUpToIndex += sizes[i];
	  }

	  return totalUpToIndex;
	};

	/* create a new style tag after lastEl */
	var makeStyleTag = function makeStyleTag(target, tagEl, insertBefore) {
	  var targetDocument = document;
	  if (target) targetDocument = target.ownerDocument;else if (tagEl) targetDocument = tagEl.ownerDocument;

	  var el = targetDocument.createElement('style');
	  el.setAttribute(SC_ATTR, '');
	  el.setAttribute(SC_VERSION_ATTR, "4.4.1");

	  var nonce = getNonce();
	  if (nonce) {
	    el.setAttribute('nonce', nonce);
	  }

	  /* Work around insertRule quirk in EdgeHTML */
	  el.appendChild(targetDocument.createTextNode(''));

	  if (target && !tagEl) {
	    /* Append to target when no previous element was passed */
	    target.appendChild(el);
	  } else {
	    if (!tagEl || !target || !tagEl.parentNode) {
	      throw new StyledComponentsError(6);
	    }

	    /* Insert new style tag after the previous one */
	    tagEl.parentNode.insertBefore(el, insertBefore ? tagEl : tagEl.nextSibling);
	  }

	  return el;
	};

	/* takes a css factory function and outputs an html styled tag factory */
	var wrapAsHtmlTag = function wrapAsHtmlTag(css, names) {
	  return function (additionalAttrs) {
	    var nonce = getNonce();
	    var attrs = [nonce && 'nonce="' + nonce + '"', SC_ATTR + '="' + stringifyNames(names) + '"', SC_VERSION_ATTR + '="' + "4.4.1" + '"', additionalAttrs];

	    var htmlAttr = attrs.filter(Boolean).join(' ');
	    return '<style ' + htmlAttr + '>' + css() + '</style>';
	  };
	};

	/* takes a css factory function and outputs an element factory */
	var wrapAsElement = function wrapAsElement(css, names) {
	  return function () {
	    var _props;

	    var props = (_props = {}, _props[SC_ATTR] = stringifyNames(names), _props[SC_VERSION_ATTR] = "4.4.1", _props);

	    var nonce = getNonce();
	    if (nonce) {
	      // $FlowFixMe
	      props.nonce = nonce;
	    }

	    // eslint-disable-next-line react/no-danger
	    return react.createElement('style', _extends$1({}, props, { dangerouslySetInnerHTML: { __html: css() } }));
	  };
	};

	var getIdsFromMarkersFactory = function getIdsFromMarkersFactory(markers) {
	  return function () {
	    return Object.keys(markers);
	  };
	};

	/* speedy tags utilise insertRule */
	var makeSpeedyTag = function makeSpeedyTag(el, getImportRuleTag) {
	  var names = Object.create(null);
	  var markers = Object.create(null);
	  var sizes = [];

	  var extractImport = getImportRuleTag !== undefined;
	  /* indicates whether getImportRuleTag was called */
	  var usedImportRuleTag = false;

	  var insertMarker = function insertMarker(id) {
	    var prev = markers[id];
	    if (prev !== undefined) {
	      return prev;
	    }

	    markers[id] = sizes.length;
	    sizes.push(0);
	    resetIdNames(names, id);

	    return markers[id];
	  };

	  var insertRules = function insertRules(id, cssRules, name) {
	    var marker = insertMarker(id);
	    var sheet = sheetForTag(el);
	    var insertIndex = addUpUntilIndex(sizes, marker);

	    var injectedRules = 0;
	    var importRules = [];
	    var cssRulesSize = cssRules.length;

	    for (var i = 0; i < cssRulesSize; i += 1) {
	      var cssRule = cssRules[i];
	      var mayHaveImport = extractImport; /* @import rules are reordered to appear first */
	      if (mayHaveImport && cssRule.indexOf('@import') !== -1) {
	        importRules.push(cssRule);
	      } else if (safeInsertRule(sheet, cssRule, insertIndex + injectedRules)) {
	        mayHaveImport = false;
	        injectedRules += 1;
	      }
	    }

	    if (extractImport && importRules.length > 0) {
	      usedImportRuleTag = true;
	      // $FlowFixMe
	      getImportRuleTag().insertRules(id + '-import', importRules);
	    }

	    sizes[marker] += injectedRules; /* add up no of injected rules */
	    addNameForId(names, id, name);
	  };

	  var removeRules = function removeRules(id) {
	    var marker = markers[id];
	    if (marker === undefined) return;
	    // $FlowFixMe
	    if (el.isConnected === false) return;

	    var size = sizes[marker];
	    var sheet = sheetForTag(el);
	    var removalIndex = addUpUntilIndex(sizes, marker) - 1;
	    deleteRules(sheet, removalIndex, size);
	    sizes[marker] = 0;
	    resetIdNames(names, id);

	    if (extractImport && usedImportRuleTag) {
	      // $FlowFixMe
	      getImportRuleTag().removeRules(id + '-import');
	    }
	  };

	  var css = function css() {
	    var _sheetForTag = sheetForTag(el),
	        cssRules = _sheetForTag.cssRules;

	    var str = '';

	    // eslint-disable-next-line guard-for-in
	    for (var id in markers) {
	      str += makeTextMarker(id);
	      var marker = markers[id];
	      var end = addUpUntilIndex(sizes, marker);
	      var size = sizes[marker];
	      for (var i = end - size; i < end; i += 1) {
	        var rule = cssRules[i];
	        if (rule !== undefined) {
	          str += rule.cssText;
	        }
	      }
	    }

	    return str;
	  };

	  return {
	    clone: function clone() {
	      throw new StyledComponentsError(5);
	    },

	    css: css,
	    getIds: getIdsFromMarkersFactory(markers),
	    hasNameForId: hasNameForId(names),
	    insertMarker: insertMarker,
	    insertRules: insertRules,
	    removeRules: removeRules,
	    sealed: false,
	    styleTag: el,
	    toElement: wrapAsElement(css, names),
	    toHTML: wrapAsHtmlTag(css, names)
	  };
	};

	var makeTextNode = function makeTextNode(targetDocument, id) {
	  return targetDocument.createTextNode(makeTextMarker(id));
	};

	var makeBrowserTag = function makeBrowserTag(el, getImportRuleTag) {
	  var names = Object.create(null);
	  var markers = Object.create(null);

	  var extractImport = getImportRuleTag !== undefined;

	  /* indicates whether getImportRuleTag was called */
	  var usedImportRuleTag = false;

	  var insertMarker = function insertMarker(id) {
	    var prev = markers[id];
	    if (prev !== undefined) {
	      return prev;
	    }

	    markers[id] = makeTextNode(el.ownerDocument, id);
	    el.appendChild(markers[id]);
	    names[id] = Object.create(null);

	    return markers[id];
	  };

	  var insertRules = function insertRules(id, cssRules, name) {
	    var marker = insertMarker(id);
	    var importRules = [];
	    var cssRulesSize = cssRules.length;

	    for (var i = 0; i < cssRulesSize; i += 1) {
	      var rule = cssRules[i];
	      var mayHaveImport = extractImport;
	      if (mayHaveImport && rule.indexOf('@import') !== -1) {
	        importRules.push(rule);
	      } else {
	        mayHaveImport = false;
	        var separator = i === cssRulesSize - 1 ? '' : ' ';
	        marker.appendData('' + rule + separator);
	      }
	    }

	    addNameForId(names, id, name);

	    if (extractImport && importRules.length > 0) {
	      usedImportRuleTag = true;
	      // $FlowFixMe
	      getImportRuleTag().insertRules(id + '-import', importRules);
	    }
	  };

	  var removeRules = function removeRules(id) {
	    var marker = markers[id];
	    if (marker === undefined) return;

	    /* create new empty text node and replace the current one */
	    var newMarker = makeTextNode(el.ownerDocument, id);
	    el.replaceChild(newMarker, marker);
	    markers[id] = newMarker;
	    resetIdNames(names, id);

	    if (extractImport && usedImportRuleTag) {
	      // $FlowFixMe
	      getImportRuleTag().removeRules(id + '-import');
	    }
	  };

	  var css = function css() {
	    var str = '';

	    // eslint-disable-next-line guard-for-in
	    for (var id in markers) {
	      str += markers[id].data;
	    }

	    return str;
	  };

	  return {
	    clone: function clone() {
	      throw new StyledComponentsError(5);
	    },

	    css: css,
	    getIds: getIdsFromMarkersFactory(markers),
	    hasNameForId: hasNameForId(names),
	    insertMarker: insertMarker,
	    insertRules: insertRules,
	    removeRules: removeRules,
	    sealed: false,
	    styleTag: el,
	    toElement: wrapAsElement(css, names),
	    toHTML: wrapAsHtmlTag(css, names)
	  };
	};

	var makeServerTag = function makeServerTag(namesArg, markersArg) {
	  var names = namesArg === undefined ? Object.create(null) : namesArg;
	  var markers = markersArg === undefined ? Object.create(null) : markersArg;

	  var insertMarker = function insertMarker(id) {
	    var prev = markers[id];
	    if (prev !== undefined) {
	      return prev;
	    }

	    return markers[id] = [''];
	  };

	  var insertRules = function insertRules(id, cssRules, name) {
	    var marker = insertMarker(id);
	    marker[0] += cssRules.join(' ');
	    addNameForId(names, id, name);
	  };

	  var removeRules = function removeRules(id) {
	    var marker = markers[id];
	    if (marker === undefined) return;
	    marker[0] = '';
	    resetIdNames(names, id);
	  };

	  var css = function css() {
	    var str = '';
	    // eslint-disable-next-line guard-for-in
	    for (var id in markers) {
	      var cssForId = markers[id][0];
	      if (cssForId) {
	        str += makeTextMarker(id) + cssForId;
	      }
	    }
	    return str;
	  };

	  var clone = function clone() {
	    var namesClone = cloneNames(names);
	    var markersClone = Object.create(null);

	    // eslint-disable-next-line guard-for-in
	    for (var id in markers) {
	      markersClone[id] = [markers[id][0]];
	    }

	    return makeServerTag(namesClone, markersClone);
	  };

	  var tag = {
	    clone: clone,
	    css: css,
	    getIds: getIdsFromMarkersFactory(markers),
	    hasNameForId: hasNameForId(names),
	    insertMarker: insertMarker,
	    insertRules: insertRules,
	    removeRules: removeRules,
	    sealed: false,
	    styleTag: null,
	    toElement: wrapAsElement(css, names),
	    toHTML: wrapAsHtmlTag(css, names)
	  };

	  return tag;
	};

	var makeTag = function makeTag(target, tagEl, forceServer, insertBefore, getImportRuleTag) {
	  if (IS_BROWSER && !forceServer) {
	    var el = makeStyleTag(target, tagEl, insertBefore);

	    if (DISABLE_SPEEDY) {
	      return makeBrowserTag(el, getImportRuleTag);
	    } else {
	      return makeSpeedyTag(el, getImportRuleTag);
	    }
	  }

	  return makeServerTag();
	};

	var rehydrate = function rehydrate(tag, els, extracted) {
	  /* add all extracted components to the new tag */
	  for (var i = 0, len = extracted.length; i < len; i += 1) {
	    var _extracted$i = extracted[i],
	        componentId = _extracted$i.componentId,
	        cssFromDOM = _extracted$i.cssFromDOM;

	    var cssRules = splitByRules(cssFromDOM);
	    tag.insertRules(componentId, cssRules);
	  }

	  /* remove old HTMLStyleElements, since they have been rehydrated */
	  for (var _i = 0, _len = els.length; _i < _len; _i += 1) {
	    var el = els[_i];
	    if (el.parentNode) {
	      el.parentNode.removeChild(el);
	    }
	  }
	};

	// 

	var SPLIT_REGEX = /\s+/;

	/* determine the maximum number of components before tags are sharded */
	var MAX_SIZE = void 0;
	if (IS_BROWSER) {
	  /* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */
	  MAX_SIZE = DISABLE_SPEEDY ? 40 : 1000;
	} else {
	  /* for servers we do not need to shard at all */
	  MAX_SIZE = -1;
	}

	var sheetRunningId = 0;
	var master = void 0;

	var StyleSheet = function () {

	  /* a map from ids to tags */

	  /* deferred rules for a given id */

	  /* this is used for not reinjecting rules via hasNameForId() */

	  /* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */

	  /* a list of tags belonging to this StyleSheet */

	  /* a tag for import rules */

	  /* current capacity until a new tag must be created */

	  /* children (aka clones) of this StyleSheet inheriting all and future injections */

	  function StyleSheet() {
	    var _this = this;

	    var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IS_BROWSER ? document.head : null;
	    var forceServer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	    classCallCheck(this, StyleSheet);

	    this.getImportRuleTag = function () {
	      var importRuleTag = _this.importRuleTag;

	      if (importRuleTag !== undefined) {
	        return importRuleTag;
	      }

	      var firstTag = _this.tags[0];
	      var insertBefore = true;

	      return _this.importRuleTag = makeTag(_this.target, firstTag ? firstTag.styleTag : null, _this.forceServer, insertBefore);
	    };

	    sheetRunningId += 1;
	    this.id = sheetRunningId;
	    this.forceServer = forceServer;
	    this.target = forceServer ? null : target;
	    this.tagMap = {};
	    this.deferred = {};
	    this.rehydratedNames = {};
	    this.ignoreRehydratedNames = {};
	    this.tags = [];
	    this.capacity = 1;
	    this.clones = [];
	  }

	  /* rehydrate all SSR'd style tags */


	  StyleSheet.prototype.rehydrate = function rehydrate$$1() {
	    if (!IS_BROWSER || this.forceServer) return this;

	    var els = [];
	    var extracted = [];
	    var isStreamed = false;

	    /* retrieve all of our SSR style elements from the DOM */
	    var nodes = document.querySelectorAll('style[' + SC_ATTR + '][' + SC_VERSION_ATTR + '="' + "4.4.1" + '"]');

	    var nodesSize = nodes.length;

	    /* abort rehydration if no previous style tags were found */
	    if (!nodesSize) return this;

	    for (var i = 0; i < nodesSize; i += 1) {
	      var el = nodes[i];

	      /* check if style tag is a streamed tag */
	      if (!isStreamed) isStreamed = !!el.getAttribute(SC_STREAM_ATTR);

	      /* retrieve all component names */
	      var elNames = (el.getAttribute(SC_ATTR) || '').trim().split(SPLIT_REGEX);
	      var elNamesSize = elNames.length;
	      for (var j = 0, name; j < elNamesSize; j += 1) {
	        name = elNames[j];
	        /* add rehydrated name to sheet to avoid re-adding styles */
	        this.rehydratedNames[name] = true;
	      }

	      /* extract all components and their CSS */
	      extracted.push.apply(extracted, extractComps(el.textContent));

	      /* store original HTMLStyleElement */
	      els.push(el);
	    }

	    /* abort rehydration if nothing was extracted */
	    var extractedSize = extracted.length;
	    if (!extractedSize) return this;

	    /* create a tag to be used for rehydration */
	    var tag = this.makeTag(null);

	    rehydrate(tag, els, extracted);

	    /* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */
	    this.capacity = Math.max(1, MAX_SIZE - extractedSize);
	    this.tags.push(tag);

	    /* retrieve all component ids */
	    for (var _j = 0; _j < extractedSize; _j += 1) {
	      this.tagMap[extracted[_j].componentId] = tag;
	    }

	    return this;
	  };

	  /* retrieve a "master" instance of StyleSheet which is typically used when no other is available
	   * The master StyleSheet is targeted by createGlobalStyle, keyframes, and components outside of any
	    * StyleSheetManager's context */


	  /* reset the internal "master" instance */
	  StyleSheet.reset = function reset() {
	    var forceServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    master = new StyleSheet(undefined, forceServer).rehydrate();
	  };

	  /* adds "children" to the StyleSheet that inherit all of the parents' rules
	   * while their own rules do not affect the parent */


	  StyleSheet.prototype.clone = function clone() {
	    var sheet = new StyleSheet(this.target, this.forceServer);

	    /* add to clone array */
	    this.clones.push(sheet);

	    /* clone all tags */
	    sheet.tags = this.tags.map(function (tag) {
	      var ids = tag.getIds();
	      var newTag = tag.clone();

	      /* reconstruct tagMap */
	      for (var i = 0; i < ids.length; i += 1) {
	        sheet.tagMap[ids[i]] = newTag;
	      }

	      return newTag;
	    });

	    /* clone other maps */
	    sheet.rehydratedNames = _extends$1({}, this.rehydratedNames);
	    sheet.deferred = _extends$1({}, this.deferred);

	    return sheet;
	  };

	  /* force StyleSheet to create a new tag on the next injection */


	  StyleSheet.prototype.sealAllTags = function sealAllTags() {
	    this.capacity = 1;

	    this.tags.forEach(function (tag) {
	      // eslint-disable-next-line no-param-reassign
	      tag.sealed = true;
	    });
	  };

	  StyleSheet.prototype.makeTag = function makeTag$$1(tag) {
	    var lastEl = tag ? tag.styleTag : null;
	    var insertBefore = false;

	    return makeTag(this.target, lastEl, this.forceServer, insertBefore, this.getImportRuleTag);
	  };

	  /* get a tag for a given componentId, assign the componentId to one, or shard */
	  StyleSheet.prototype.getTagForId = function getTagForId(id) {
	    /* simply return a tag, when the componentId was already assigned one */
	    var prev = this.tagMap[id];
	    if (prev !== undefined && !prev.sealed) {
	      return prev;
	    }

	    var tag = this.tags[this.tags.length - 1];

	    /* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */
	    this.capacity -= 1;

	    if (this.capacity === 0) {
	      this.capacity = MAX_SIZE;
	      tag = this.makeTag(tag);
	      this.tags.push(tag);
	    }

	    return this.tagMap[id] = tag;
	  };

	  /* mainly for createGlobalStyle to check for its id */


	  StyleSheet.prototype.hasId = function hasId(id) {
	    return this.tagMap[id] !== undefined;
	  };

	  /* caching layer checking id+name to already have a corresponding tag and injected rules */


	  StyleSheet.prototype.hasNameForId = function hasNameForId(id, name) {
	    /* exception for rehydrated names which are checked separately */
	    if (this.ignoreRehydratedNames[id] === undefined && this.rehydratedNames[name]) {
	      return true;
	    }

	    var tag = this.tagMap[id];
	    return tag !== undefined && tag.hasNameForId(id, name);
	  };

	  /* registers a componentId and registers it on its tag */


	  StyleSheet.prototype.deferredInject = function deferredInject(id, cssRules) {
	    /* don't inject when the id is already registered */
	    if (this.tagMap[id] !== undefined) return;

	    var clones = this.clones;

	    for (var i = 0; i < clones.length; i += 1) {
	      clones[i].deferredInject(id, cssRules);
	    }

	    this.getTagForId(id).insertMarker(id);
	    this.deferred[id] = cssRules;
	  };

	  /* injects rules for a given id with a name that will need to be cached */


	  StyleSheet.prototype.inject = function inject(id, cssRules, name) {
	    var clones = this.clones;


	    for (var i = 0; i < clones.length; i += 1) {
	      clones[i].inject(id, cssRules, name);
	    }

	    var tag = this.getTagForId(id);

	    /* add deferred rules for component */
	    if (this.deferred[id] !== undefined) {
	      // Combine passed cssRules with previously deferred CSS rules
	      // NOTE: We cannot mutate the deferred array itself as all clones
	      // do the same (see clones[i].inject)
	      var rules = this.deferred[id].concat(cssRules);
	      tag.insertRules(id, rules, name);

	      this.deferred[id] = undefined;
	    } else {
	      tag.insertRules(id, cssRules, name);
	    }
	  };

	  /* removes all rules for a given id, which doesn't remove its marker but resets it */


	  StyleSheet.prototype.remove = function remove(id) {
	    var tag = this.tagMap[id];
	    if (tag === undefined) return;

	    var clones = this.clones;

	    for (var i = 0; i < clones.length; i += 1) {
	      clones[i].remove(id);
	    }

	    /* remove all rules from the tag */
	    tag.removeRules(id);

	    /* ignore possible rehydrated names */
	    this.ignoreRehydratedNames[id] = true;

	    /* delete possible deferred rules */
	    this.deferred[id] = undefined;
	  };

	  StyleSheet.prototype.toHTML = function toHTML() {
	    return this.tags.map(function (tag) {
	      return tag.toHTML();
	    }).join('');
	  };

	  StyleSheet.prototype.toReactElements = function toReactElements() {
	    var id = this.id;


	    return this.tags.map(function (tag, i) {
	      var key = 'sc-' + id + '-' + i;
	      return react_24(tag.toElement(), { key: key });
	    });
	  };

	  createClass(StyleSheet, null, [{
	    key: 'master',
	    get: function get$$1() {
	      return master || (master = new StyleSheet().rehydrate());
	    }

	    /* NOTE: This is just for backwards-compatibility with jest-styled-components */

	  }, {
	    key: 'instance',
	    get: function get$$1() {
	      return StyleSheet.master;
	    }
	  }]);
	  return StyleSheet;
	}();

	// 

	var Keyframes = function () {
	  function Keyframes(name, rules) {
	    var _this = this;

	    classCallCheck(this, Keyframes);

	    this.inject = function (styleSheet) {
	      if (!styleSheet.hasNameForId(_this.id, _this.name)) {
	        styleSheet.inject(_this.id, _this.rules, _this.name);
	      }
	    };

	    this.toString = function () {
	      throw new StyledComponentsError(12, String(_this.name));
	    };

	    this.name = name;
	    this.rules = rules;

	    this.id = 'sc-keyframes-' + name;
	  }

	  Keyframes.prototype.getName = function getName() {
	    return this.name;
	  };

	  return Keyframes;
	}();

	// 

	/**
	 * inlined version of
	 * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/hyphenateStyleName.js
	 */

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return string.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	// 

	// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js
	function addUnitIfNeeded(name, value) {
	  // https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133
	  // $FlowFixMe
	  if (value == null || typeof value === 'boolean' || value === '') {
	    return '';
	  }

	  if (typeof value === 'number' && value !== 0 && !(name in unitlessKeys)) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return String(value).trim();
	}

	// 

	/**
	 * It's falsish not falsy because 0 is allowed.
	 */
	var isFalsish = function isFalsish(chunk) {
	  return chunk === undefined || chunk === null || chunk === false || chunk === '';
	};

	var objToCssArray = function objToCssArray(obj, prevKey) {
	  var rules = [];
	  var keys = Object.keys(obj);

	  keys.forEach(function (key) {
	    if (!isFalsish(obj[key])) {
	      if (isPlainObject$3(obj[key])) {
	        rules.push.apply(rules, objToCssArray(obj[key], key));

	        return rules;
	      } else if (isFunction$3(obj[key])) {
	        rules.push(hyphenateStyleName(key) + ':', obj[key], ';');

	        return rules;
	      }
	      rules.push(hyphenateStyleName(key) + ': ' + addUnitIfNeeded(key, obj[key]) + ';');
	    }
	    return rules;
	  });

	  return prevKey ? [prevKey + ' {'].concat(rules, ['}']) : rules;
	};

	function flatten(chunk, executionContext, styleSheet) {
	  if (Array.isArray(chunk)) {
	    var ruleSet = [];

	    for (var i = 0, len = chunk.length, result; i < len; i += 1) {
	      result = flatten(chunk[i], executionContext, styleSheet);

	      if (result === null) continue;else if (Array.isArray(result)) ruleSet.push.apply(ruleSet, result);else ruleSet.push(result);
	    }

	    return ruleSet;
	  }

	  if (isFalsish(chunk)) {
	    return null;
	  }

	  /* Handle other components */
	  if (isStyledComponent(chunk)) {
	    return '.' + chunk.styledComponentId;
	  }

	  /* Either execute or defer the function */
	  if (isFunction$3(chunk)) {
	    if (isStatelessFunction(chunk) && executionContext) {
	      var _result = chunk(executionContext);

	      if ( reactIs_3(_result)) {
	        // eslint-disable-next-line no-console
	        console.warn(getComponentName(chunk) + ' is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.');
	      }

	      return flatten(_result, executionContext, styleSheet);
	    } else return chunk;
	  }

	  if (chunk instanceof Keyframes) {
	    if (styleSheet) {
	      chunk.inject(styleSheet);
	      return chunk.getName();
	    } else return chunk;
	  }

	  /* Handle objects */
	  return isPlainObject$3(chunk) ? objToCssArray(chunk) : chunk.toString();
	}

	// 

	function css(styles) {
	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  if (isFunction$3(styles) || isPlainObject$3(styles)) {
	    // $FlowFixMe
	    return flatten(interleave(EMPTY_ARRAY, [styles].concat(interpolations)));
	  }

	  // $FlowFixMe
	  return flatten(interleave(styles, interpolations));
	}

	// 

	function constructWithOptions(componentConstructor, tag) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;

	  if (!reactIs_1(tag)) {
	    throw new StyledComponentsError(1, String(tag));
	  }

	  /* This is callable directly as a template function */
	  // $FlowFixMe: Not typed to avoid destructuring arguments
	  var templateFunction = function templateFunction() {
	    return componentConstructor(tag, options, css.apply(undefined, arguments));
	  };

	  /* If config methods are called, wrap up a new template function and merge options */
	  templateFunction.withConfig = function (config) {
	    return constructWithOptions(componentConstructor, tag, _extends$1({}, options, config));
	  };

	  /* Modify/inject new props at runtime */
	  templateFunction.attrs = function (attrs) {
	    return constructWithOptions(componentConstructor, tag, _extends$1({}, options, {
	      attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean)
	    }));
	  };

	  return templateFunction;
	}

	// 
	// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js
	function murmurhash(c) {
	  for (var e = c.length | 0, a = e | 0, d = 0, b; e >= 4;) {
	    b = c.charCodeAt(d) & 255 | (c.charCodeAt(++d) & 255) << 8 | (c.charCodeAt(++d) & 255) << 16 | (c.charCodeAt(++d) & 255) << 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), b ^= b >>> 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16) ^ b, e -= 4, ++d;
	  }
	  switch (e) {
	    case 3:
	      a ^= (c.charCodeAt(d + 2) & 255) << 16;
	    case 2:
	      a ^= (c.charCodeAt(d + 1) & 255) << 8;
	    case 1:
	      a ^= c.charCodeAt(d) & 255, a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);
	  }
	  a ^= a >>> 13;
	  a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);
	  return (a ^ a >>> 15) >>> 0;
	}

	// 
	/* eslint-disable no-bitwise */

	/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
	 * counterparts */
	var charsLength = 52;

	/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */
	var getAlphabeticChar = function getAlphabeticChar(code) {
	  return String.fromCharCode(code + (code > 25 ? 39 : 97));
	};

	/* input a number, usually a hash and convert it to base-52 */
	function generateAlphabeticName(code) {
	  var name = '';
	  var x = void 0;

	  /* get a char and divide by alphabet-length */
	  for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
	    name = getAlphabeticChar(x % charsLength) + name;
	  }

	  return getAlphabeticChar(x % charsLength) + name;
	}

	// 

	function hasFunctionObjectKey(obj) {
	  // eslint-disable-next-line guard-for-in, no-restricted-syntax
	  for (var key in obj) {
	    if (isFunction$3(obj[key])) {
	      return true;
	    }
	  }

	  return false;
	}

	function isStaticRules(rules, attrs) {
	  for (var i = 0; i < rules.length; i += 1) {
	    var rule = rules[i];

	    // recursive case
	    if (Array.isArray(rule) && !isStaticRules(rule, attrs)) {
	      return false;
	    } else if (isFunction$3(rule) && !isStyledComponent(rule)) {
	      // functions are allowed to be static if they're just being
	      // used to get the classname of a nested styled component
	      return false;
	    }
	  }

	  if (attrs.some(function (x) {
	    return isFunction$3(x) || hasFunctionObjectKey(x);
	  })) return false;

	  return true;
	}

	// 

	/* combines hashStr (murmurhash) and nameGenerator for convenience */
	var hasher = function hasher(str) {
	  return generateAlphabeticName(murmurhash(str));
	};

	/*
	 ComponentStyle is all the CSS-specific stuff, not
	 the React-specific stuff.
	 */

	var ComponentStyle = function () {
	  function ComponentStyle(rules, attrs, componentId) {
	    classCallCheck(this, ComponentStyle);

	    this.rules = rules;
	    this.isStatic = "development" === 'production' && isStaticRules(rules, attrs);
	    this.componentId = componentId;

	    if (!StyleSheet.master.hasId(componentId)) {
	      StyleSheet.master.deferredInject(componentId, []);
	    }
	  }

	  /*
	   * Flattens a rule set into valid CSS
	   * Hashes it, wraps the whole chunk in a .hash1234 {}
	   * Returns the hash to be injected on render()
	   * */


	  ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {
	    var isStatic = this.isStatic,
	        componentId = this.componentId,
	        lastClassName = this.lastClassName;

	    if (IS_BROWSER && isStatic && typeof lastClassName === 'string' && styleSheet.hasNameForId(componentId, lastClassName)) {
	      return lastClassName;
	    }

	    var flatCSS = flatten(this.rules, executionContext, styleSheet);
	    var name = hasher(this.componentId + flatCSS.join(''));
	    if (!styleSheet.hasNameForId(componentId, name)) {
	      styleSheet.inject(this.componentId, stringifyRules(flatCSS, '.' + name, undefined, componentId), name);
	    }

	    this.lastClassName = name;
	    return name;
	  };

	  ComponentStyle.generateName = function generateName(str) {
	    return hasher(str);
	  };

	  return ComponentStyle;
	}();

	// 

	var LIMIT = 200;

	var createWarnTooManyClasses = (function (displayName) {
	  var generatedClasses = {};
	  var warningSeen = false;

	  return function (className) {
	    if (!warningSeen) {
	      generatedClasses[className] = true;
	      if (Object.keys(generatedClasses).length >= LIMIT) {
	        // Unable to find latestRule in test environment.
	        /* eslint-disable no-console, prefer-template */
	        console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs(props => ({\n' + '    style: {\n' + '      background: props.background,\n' + '    },\n' + '  }))`width: 100%;`\n\n' + '  <Component />');
	        warningSeen = true;
	        generatedClasses = {};
	      }
	    }
	  };
	});

	// 

	var determineTheme = (function (props, fallbackTheme) {
	  var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;

	  // Props should take precedence over ThemeProvider, which should take precedence over
	  // defaultProps, but React automatically puts defaultProps on props.

	  /* eslint-disable react/prop-types, flowtype-errors/show-errors */
	  var isDefaultTheme = defaultProps ? props.theme === defaultProps.theme : false;
	  var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme || defaultProps.theme;
	  /* eslint-enable */

	  return theme;
	});

	// 
	var escapeRegex = /[[\].#*$><+~=|^:(),"'`-]+/g;
	var dashesAtEnds = /(^-|-$)/g;

	/**
	 * TODO: Explore using CSS.escape when it becomes more available
	 * in evergreen browsers.
	 */
	function escape$1(str) {
	  return str
	  // Replace all possible CSS selectors
	  .replace(escapeRegex, '-')

	  // Remove extraneous hyphens at the start and end
	  .replace(dashesAtEnds, '');
	}

	// 

	function isTag(target) {
	  return typeof target === 'string' && ( target.charAt(0) === target.charAt(0).toLowerCase() );
	}

	// 

	function generateDisplayName(target) {
	  // $FlowFixMe
	  return isTag(target) ? 'styled.' + target : 'Styled(' + getComponentName(target) + ')';
	}

	var _TYPE_STATICS;

	var REACT_STATICS$1 = {
	  childContextTypes: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDerivedStateFromProps: true,
	  propTypes: true,
	  type: true
	};

	var KNOWN_STATICS$1 = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};

	var TYPE_STATICS$1 = (_TYPE_STATICS = {}, _TYPE_STATICS[reactIs_4] = {
	  $$typeof: true,
	  render: true
	}, _TYPE_STATICS);

	var defineProperty$1 = Object.defineProperty,
	    getOwnPropertyNames$1 = Object.getOwnPropertyNames,
	    _Object$getOwnPropert = Object.getOwnPropertySymbols,
	    getOwnPropertySymbols$2 = _Object$getOwnPropert === undefined ? function () {
	  return [];
	} : _Object$getOwnPropert,
	    getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor,
	    getPrototypeOf$1 = Object.getPrototypeOf,
	    objectPrototype$1 = Object.prototype;
	var arrayPrototype = Array.prototype;


	function hoistNonReactStatics$1(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components

	    var inheritedComponent = getPrototypeOf$1(sourceComponent);

	    if (inheritedComponent && inheritedComponent !== objectPrototype$1) {
	      hoistNonReactStatics$1(targetComponent, inheritedComponent, blacklist);
	    }

	    var keys = arrayPrototype.concat(getOwnPropertyNames$1(sourceComponent),
	    // $FlowFixMe
	    getOwnPropertySymbols$2(sourceComponent));

	    var targetStatics = TYPE_STATICS$1[targetComponent.$$typeof] || REACT_STATICS$1;

	    var sourceStatics = TYPE_STATICS$1[sourceComponent.$$typeof] || REACT_STATICS$1;

	    var i = keys.length;
	    var descriptor = void 0;
	    var key = void 0;

	    // eslint-disable-next-line no-plusplus
	    while (i--) {
	      key = keys[i];

	      if (
	      // $FlowFixMe
	      !KNOWN_STATICS$1[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) &&
	      // $FlowFixMe
	      !(targetStatics && targetStatics[key])) {
	        descriptor = getOwnPropertyDescriptor$1(sourceComponent, key);

	        if (descriptor) {
	          try {
	            // Avoid failures from read-only properties
	            defineProperty$1(targetComponent, key, descriptor);
	          } catch (e) {
	            /* fail silently */
	          }
	        }
	      }
	    }

	    return targetComponent;
	  }

	  return targetComponent;
	}

	// 
	function isDerivedReactComponent(fn) {
	  return !!(fn && fn.prototype && fn.prototype.isReactComponent);
	}

	// 
	// Helper to call a given function, only once
	var once$1 = (function (cb) {
	  var called = false;

	  return function () {
	    if (!called) {
	      called = true;
	      cb.apply(undefined, arguments);
	    }
	  };
	});

	// 

	var ThemeContext = react_5();

	var ThemeConsumer = ThemeContext.Consumer;

	/**
	 * Provide a theme to an entire react component tree via context
	 */

	var ThemeProvider = function (_Component) {
	  inherits$2(ThemeProvider, _Component);

	  function ThemeProvider(props) {
	    classCallCheck(this, ThemeProvider);

	    var _this = possibleConstructorReturn(this, _Component.call(this, props));

	    _this.getContext = memoizeOne(_this.getContext.bind(_this));
	    _this.renderInner = _this.renderInner.bind(_this);
	    return _this;
	  }

	  ThemeProvider.prototype.render = function render() {
	    if (!this.props.children) return null;

	    return react.createElement(
	      ThemeContext.Consumer,
	      null,
	      this.renderInner
	    );
	  };

	  ThemeProvider.prototype.renderInner = function renderInner(outerTheme) {
	    var context = this.getContext(this.props.theme, outerTheme);

	    return react.createElement(
	      ThemeContext.Provider,
	      { value: context },
	      this.props.children
	    );
	  };

	  /**
	   * Get the theme from the props, supporting both (outerTheme) => {}
	   * as well as object notation
	   */


	  ThemeProvider.prototype.getTheme = function getTheme(theme, outerTheme) {
	    if (isFunction$3(theme)) {
	      var mergedTheme = theme(outerTheme);

	      if ( (mergedTheme === null || Array.isArray(mergedTheme) || (typeof mergedTheme === 'undefined' ? 'undefined' : _typeof(mergedTheme)) !== 'object')) {
	        throw new StyledComponentsError(7);
	      }

	      return mergedTheme;
	    }

	    if (theme === null || Array.isArray(theme) || (typeof theme === 'undefined' ? 'undefined' : _typeof(theme)) !== 'object') {
	      throw new StyledComponentsError(8);
	    }

	    return _extends$1({}, outerTheme, theme);
	  };

	  ThemeProvider.prototype.getContext = function getContext(theme, outerTheme) {
	    return this.getTheme(theme, outerTheme);
	  };

	  return ThemeProvider;
	}(react_3);

	// 

	var CLOSING_TAG_R = /^\s*<\/[a-z]/i;

	var ServerStyleSheet = function () {
	  function ServerStyleSheet() {
	    classCallCheck(this, ServerStyleSheet);

	    /* The master sheet might be reset, so keep a reference here */
	    this.masterSheet = StyleSheet.master;
	    this.instance = this.masterSheet.clone();
	    this.sealed = false;
	  }

	  /**
	   * Mark the ServerStyleSheet as being fully emitted and manually GC it from the
	   * StyleSheet singleton.
	   */


	  ServerStyleSheet.prototype.seal = function seal() {
	    if (!this.sealed) {
	      /* Remove sealed StyleSheets from the master sheet */
	      var index = this.masterSheet.clones.indexOf(this.instance);
	      this.masterSheet.clones.splice(index, 1);
	      this.sealed = true;
	    }
	  };

	  ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {
	    if (this.sealed) {
	      throw new StyledComponentsError(2);
	    }

	    return react.createElement(
	      StyleSheetManager,
	      { sheet: this.instance },
	      children
	    );
	  };

	  ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {
	    this.seal();
	    return this.instance.toHTML();
	  };

	  ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {
	    this.seal();
	    return this.instance.toReactElements();
	  };

	  ServerStyleSheet.prototype.interleaveWithNodeStream = function interleaveWithNodeStream(readableStream) {
	    var _this = this;

	    if (IS_BROWSER) {
	      throw new StyledComponentsError(3);
	    }

	    /* the tag index keeps track of which tags have already been emitted */
	    var instance = this.instance;

	    var instanceTagIndex = 0;

	    var streamAttr = SC_STREAM_ATTR + '="true"';

	    var transformer = new Stream.Transform({
	      transform: function appendStyleChunks(chunk, /* encoding */_, callback) {
	        var tags = instance.tags;

	        var html = '';

	        /* retrieve html for each new style tag */
	        for (; instanceTagIndex < tags.length; instanceTagIndex += 1) {
	          var tag = tags[instanceTagIndex];
	          html += tag.toHTML(streamAttr);
	        }

	        /* force our StyleSheets to emit entirely new tags */
	        instance.sealAllTags();

	        var renderedHtml = chunk.toString();

	        /* prepend style html to chunk, unless the start of the chunk is a closing tag in which case append right after that */
	        if (CLOSING_TAG_R.test(renderedHtml)) {
	          var endOfClosingTag = renderedHtml.indexOf('>');

	          this.push(renderedHtml.slice(0, endOfClosingTag + 1) + html + renderedHtml.slice(endOfClosingTag + 1));
	        } else this.push(html + renderedHtml);

	        callback();
	      }
	    });

	    readableStream.on('end', function () {
	      return _this.seal();
	    });

	    readableStream.on('error', function (err) {
	      _this.seal();

	      // forward the error to the transform stream
	      transformer.emit('error', err);
	    });

	    return readableStream.pipe(transformer);
	  };

	  return ServerStyleSheet;
	}();

	// 

	var StyleSheetContext = react_5();
	var StyleSheetConsumer = StyleSheetContext.Consumer;

	var StyleSheetManager = function (_Component) {
	  inherits$2(StyleSheetManager, _Component);

	  function StyleSheetManager(props) {
	    classCallCheck(this, StyleSheetManager);

	    var _this = possibleConstructorReturn(this, _Component.call(this, props));

	    _this.getContext = memoizeOne(_this.getContext);
	    return _this;
	  }

	  StyleSheetManager.prototype.getContext = function getContext(sheet, target) {
	    if (sheet) {
	      return sheet;
	    } else if (target) {
	      return new StyleSheet(target);
	    } else {
	      throw new StyledComponentsError(4);
	    }
	  };

	  StyleSheetManager.prototype.render = function render() {
	    var _props = this.props,
	        children = _props.children,
	        sheet = _props.sheet,
	        target = _props.target;


	    return react.createElement(
	      StyleSheetContext.Provider,
	      { value: this.getContext(sheet, target) },
	       react.Children.only(children) 
	    );
	  };

	  return StyleSheetManager;
	}(react_3);
	 StyleSheetManager.propTypes = {
	  sheet: propTypes.oneOfType([propTypes.instanceOf(StyleSheet), propTypes.instanceOf(ServerStyleSheet)]),

	  target: propTypes.shape({
	    appendChild: propTypes.func.isRequired
	  })
	} ;

	// 

	var identifiers = {};

	/* We depend on components having unique IDs */
	function generateId(_ComponentStyle, _displayName, parentComponentId) {
	  var displayName = typeof _displayName !== 'string' ? 'sc' : escape$1(_displayName);

	  /**
	   * This ensures uniqueness if two components happen to share
	   * the same displayName.
	   */
	  var nr = (identifiers[displayName] || 0) + 1;
	  identifiers[displayName] = nr;

	  var componentId = displayName + '-' + _ComponentStyle.generateName(displayName + nr);

	  return parentComponentId ? parentComponentId + '-' + componentId : componentId;
	}

	// $FlowFixMe

	var StyledComponent = function (_Component) {
	  inherits$2(StyledComponent, _Component);

	  function StyledComponent() {
	    classCallCheck(this, StyledComponent);

	    var _this = possibleConstructorReturn(this, _Component.call(this));

	    _this.attrs = {};

	    _this.renderOuter = _this.renderOuter.bind(_this);
	    _this.renderInner = _this.renderInner.bind(_this);

	    {
	      _this.warnInnerRef = once$1(function (displayName) {
	        return (
	          // eslint-disable-next-line no-console
	          console.warn('The "innerRef" API has been removed in styled-components v4 in favor of React 16 ref forwarding, use "ref" instead like a typical component. "innerRef" was detected on component "' + displayName + '".')
	        );
	      });

	      _this.warnAttrsFnObjectKeyDeprecated = once$1(function (key, displayName) {
	        return (
	          // eslint-disable-next-line no-console
	          console.warn('Functions as object-form attrs({}) keys are now deprecated and will be removed in a future version of styled-components. Switch to the new attrs(props => ({})) syntax instead for easier and more powerful composition. The attrs key in question is "' + key + '" on component "' + displayName + '".', '\n ' + new Error().stack)
	        );
	      });

	      _this.warnNonStyledComponentAttrsObjectKey = once$1(function (key, displayName) {
	        return (
	          // eslint-disable-next-line no-console
	          console.warn('It looks like you\'ve used a non styled-component as the value for the "' + key + '" prop in an object-form attrs constructor of "' + displayName + '".\n' + 'You should use the new function-form attrs constructor which avoids this issue: attrs(props => ({ yourStuff }))\n' + "To continue using the deprecated object syntax, you'll need to wrap your component prop in a function to make it available inside the styled component (you'll still get the deprecation warning though.)\n" + ('For example, { ' + key + ': () => InnerComponent } instead of { ' + key + ': InnerComponent }'))
	        );
	      });
	    }
	    return _this;
	  }

	  StyledComponent.prototype.render = function render() {
	    return react.createElement(
	      StyleSheetConsumer,
	      null,
	      this.renderOuter
	    );
	  };

	  StyledComponent.prototype.renderOuter = function renderOuter() {
	    var styleSheet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : StyleSheet.master;

	    this.styleSheet = styleSheet;

	    // No need to subscribe a static component to theme changes, it won't change anything
	    if (this.props.forwardedComponent.componentStyle.isStatic) return this.renderInner();

	    return react.createElement(
	      ThemeConsumer,
	      null,
	      this.renderInner
	    );
	  };

	  StyledComponent.prototype.renderInner = function renderInner(theme) {
	    var _props$forwardedCompo = this.props.forwardedComponent,
	        componentStyle = _props$forwardedCompo.componentStyle,
	        defaultProps = _props$forwardedCompo.defaultProps,
	        displayName = _props$forwardedCompo.displayName,
	        foldedComponentIds = _props$forwardedCompo.foldedComponentIds,
	        styledComponentId = _props$forwardedCompo.styledComponentId,
	        target = _props$forwardedCompo.target;


	    var generatedClassName = void 0;
	    if (componentStyle.isStatic) {
	      generatedClassName = this.generateAndInjectStyles(EMPTY_OBJECT, this.props);
	    } else {
	      generatedClassName = this.generateAndInjectStyles(determineTheme(this.props, theme, defaultProps) || EMPTY_OBJECT, this.props);
	    }

	    var elementToBeCreated = this.props.as || this.attrs.as || target;
	    var isTargetTag = isTag(elementToBeCreated);

	    var propsForElement = {};
	    var computedProps = _extends$1({}, this.props, this.attrs);

	    var key = void 0;
	    // eslint-disable-next-line guard-for-in
	    for (key in computedProps) {
	      if ( key === 'innerRef' && isTargetTag) {
	        this.warnInnerRef(displayName);
	      }

	      if (key === 'forwardedComponent' || key === 'as') {
	        continue;
	      } else if (key === 'forwardedRef') propsForElement.ref = computedProps[key];else if (key === 'forwardedAs') propsForElement.as = computedProps[key];else if (!isTargetTag || index$1(key)) {
	        // Don't pass through non HTML tags through to HTML elements
	        propsForElement[key] = computedProps[key];
	      }
	    }

	    if (this.props.style && this.attrs.style) {
	      propsForElement.style = _extends$1({}, this.attrs.style, this.props.style);
	    }

	    propsForElement.className = Array.prototype.concat(foldedComponentIds, styledComponentId, generatedClassName !== styledComponentId ? generatedClassName : null, this.props.className, this.attrs.className).filter(Boolean).join(' ');

	    return react_23(elementToBeCreated, propsForElement);
	  };

	  StyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props, attrs) {
	    var _this2 = this;

	    var context = _extends$1({}, props, { theme: theme });

	    if (!attrs.length) return context;

	    this.attrs = {};

	    attrs.forEach(function (attrDef) {
	      var resolvedAttrDef = attrDef;
	      var attrDefWasFn = false;
	      var attr = void 0;
	      var key = void 0;

	      if (isFunction$3(resolvedAttrDef)) {
	        // $FlowFixMe
	        resolvedAttrDef = resolvedAttrDef(context);
	        attrDefWasFn = true;
	      }

	      /* eslint-disable guard-for-in */
	      // $FlowFixMe
	      for (key in resolvedAttrDef) {
	        attr = resolvedAttrDef[key];

	        if (!attrDefWasFn) {
	          if (isFunction$3(attr) && !isDerivedReactComponent(attr) && !isStyledComponent(attr)) {
	            {
	              _this2.warnAttrsFnObjectKeyDeprecated(key, props.forwardedComponent.displayName);
	            }

	            attr = attr(context);

	            if ( react.isValidElement(attr)) {
	              _this2.warnNonStyledComponentAttrsObjectKey(key, props.forwardedComponent.displayName);
	            }
	          }
	        }

	        _this2.attrs[key] = attr;
	        context[key] = attr;
	      }
	      /* eslint-enable */
	    });

	    return context;
	  };

	  StyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
	    var _props$forwardedCompo2 = props.forwardedComponent,
	        attrs = _props$forwardedCompo2.attrs,
	        componentStyle = _props$forwardedCompo2.componentStyle,
	        warnTooManyClasses = _props$forwardedCompo2.warnTooManyClasses;

	    // statically styled-components don't need to build an execution context object,
	    // and shouldn't be increasing the number of class names

	    if (componentStyle.isStatic && !attrs.length) {
	      return componentStyle.generateAndInjectStyles(EMPTY_OBJECT, this.styleSheet);
	    }

	    var className = componentStyle.generateAndInjectStyles(this.buildExecutionContext(theme, props, attrs), this.styleSheet);

	    if ( warnTooManyClasses) warnTooManyClasses(className);

	    return className;
	  };

	  return StyledComponent;
	}(react_3);

	function createStyledComponent(target, options, rules) {
	  var isTargetStyledComp = isStyledComponent(target);
	  var isClass = !isTag(target);

	  var _options$displayName = options.displayName,
	      displayName = _options$displayName === undefined ? generateDisplayName(target) : _options$displayName,
	      _options$componentId = options.componentId,
	      componentId = _options$componentId === undefined ? generateId(ComponentStyle, options.displayName, options.parentComponentId) : _options$componentId,
	      _options$ParentCompon = options.ParentComponent,
	      ParentComponent = _options$ParentCompon === undefined ? StyledComponent : _options$ParentCompon,
	      _options$attrs = options.attrs,
	      attrs = _options$attrs === undefined ? EMPTY_ARRAY : _options$attrs;


	  var styledComponentId = options.displayName && options.componentId ? escape$1(options.displayName) + '-' + options.componentId : options.componentId || componentId;

	  // fold the underlying StyledComponent attrs up (implicit extend)
	  var finalAttrs =
	  // $FlowFixMe
	  isTargetStyledComp && target.attrs ? Array.prototype.concat(target.attrs, attrs).filter(Boolean) : attrs;

	  var componentStyle = new ComponentStyle(isTargetStyledComp ? // fold the underlying StyledComponent rules up (implicit extend)
	  // $FlowFixMe
	  target.componentStyle.rules.concat(rules) : rules, finalAttrs, styledComponentId);

	  /**
	   * forwardRef creates a new interim component, which we'll take advantage of
	   * instead of extending ParentComponent to create _another_ interim class
	   */
	  var WrappedStyledComponent = void 0;
	  var forwardRef = function forwardRef(props, ref) {
	    return react.createElement(ParentComponent, _extends$1({}, props, { forwardedComponent: WrappedStyledComponent, forwardedRef: ref }));
	  };
	  forwardRef.displayName = displayName;
	  WrappedStyledComponent = react.forwardRef(forwardRef);
	  WrappedStyledComponent.displayName = displayName;

	  // $FlowFixMe
	  WrappedStyledComponent.attrs = finalAttrs;
	  // $FlowFixMe
	  WrappedStyledComponent.componentStyle = componentStyle;

	  // $FlowFixMe
	  WrappedStyledComponent.foldedComponentIds = isTargetStyledComp ? // $FlowFixMe
	  Array.prototype.concat(target.foldedComponentIds, target.styledComponentId) : EMPTY_ARRAY;

	  // $FlowFixMe
	  WrappedStyledComponent.styledComponentId = styledComponentId;

	  // fold the underlying StyledComponent target up since we folded the styles
	  // $FlowFixMe
	  WrappedStyledComponent.target = isTargetStyledComp ? target.target : target;

	  // $FlowFixMe
	  WrappedStyledComponent.withComponent = function withComponent(tag) {
	    var previousComponentId = options.componentId,
	        optionsToCopy = objectWithoutProperties(options, ['componentId']);


	    var newComponentId = previousComponentId && previousComponentId + '-' + (isTag(tag) ? tag : escape$1(getComponentName(tag)));

	    var newOptions = _extends$1({}, optionsToCopy, {
	      attrs: finalAttrs,
	      componentId: newComponentId,
	      ParentComponent: ParentComponent
	    });

	    return createStyledComponent(tag, newOptions, rules);
	  };

	  // $FlowFixMe
	  Object.defineProperty(WrappedStyledComponent, 'defaultProps', {
	    get: function get$$1() {
	      return this._foldedDefaultProps;
	    },
	    set: function set$$1(obj) {
	      // $FlowFixMe
	      this._foldedDefaultProps = isTargetStyledComp ? merge$1(target.defaultProps, obj) : obj;
	    }
	  });

	  {
	    // $FlowFixMe
	    WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName);
	  }

	  // $FlowFixMe
	  WrappedStyledComponent.toString = function () {
	    return '.' + WrappedStyledComponent.styledComponentId;
	  };

	  if (isClass) {
	    hoistNonReactStatics$1(WrappedStyledComponent, target, {
	      // all SC-specific things should not be hoisted
	      attrs: true,
	      componentStyle: true,
	      displayName: true,
	      foldedComponentIds: true,
	      styledComponentId: true,
	      target: true,
	      withComponent: true
	    });
	  }

	  return WrappedStyledComponent;
	}

	// 
	// Thanks to ReactDOMFactories for this handy list!

	var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',

	// SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'marker', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	// 

	var styled = function styled(tag) {
	  return constructWithOptions(createStyledComponent, tag);
	};

	// Shorthands for all valid HTML Elements
	domElements.forEach(function (domElement) {
	  styled[domElement] = styled(domElement);
	});

	// 

	var GlobalStyle = function () {
	  function GlobalStyle(rules, componentId) {
	    classCallCheck(this, GlobalStyle);

	    this.rules = rules;
	    this.componentId = componentId;
	    this.isStatic = isStaticRules(rules, EMPTY_ARRAY);

	    if (!StyleSheet.master.hasId(componentId)) {
	      StyleSheet.master.deferredInject(componentId, []);
	    }
	  }

	  GlobalStyle.prototype.createStyles = function createStyles(executionContext, styleSheet) {
	    var flatCSS = flatten(this.rules, executionContext, styleSheet);
	    var css = stringifyRules(flatCSS, '');

	    styleSheet.inject(this.componentId, css);
	  };

	  GlobalStyle.prototype.removeStyles = function removeStyles(styleSheet) {
	    var componentId = this.componentId;

	    if (styleSheet.hasId(componentId)) {
	      styleSheet.remove(componentId);
	    }
	  };

	  // TODO: overwrite in-place instead of remove+create?


	  GlobalStyle.prototype.renderStyles = function renderStyles(executionContext, styleSheet) {
	    this.removeStyles(styleSheet);
	    this.createStyles(executionContext, styleSheet);
	  };

	  return GlobalStyle;
	}();

	// 

	// place our cache into shared context so it'll persist between HMRs
	if (IS_BROWSER) {
	  window.scCGSHMRCache = {};
	}

	function createGlobalStyle(strings) {
	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  var rules = css.apply(undefined, [strings].concat(interpolations));
	  var id = 'sc-global-' + murmurhash(JSON.stringify(rules));
	  var style = new GlobalStyle(rules, id);

	  var GlobalStyleComponent = function (_React$Component) {
	    inherits$2(GlobalStyleComponent, _React$Component);

	    function GlobalStyleComponent(props) {
	      classCallCheck(this, GlobalStyleComponent);

	      var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

	      var _this$constructor = _this.constructor,
	          globalStyle = _this$constructor.globalStyle,
	          styledComponentId = _this$constructor.styledComponentId;


	      if (IS_BROWSER) {
	        window.scCGSHMRCache[styledComponentId] = (window.scCGSHMRCache[styledComponentId] || 0) + 1;
	      }

	      /**
	       * This fixes HMR compatibility. Don't ask me why, but this combination of
	       * caching the closure variables via statics and then persisting the statics in
	       * state works across HMR where no other combination did. ¯\_(ツ)_/¯
	       */
	      _this.state = {
	        globalStyle: globalStyle,
	        styledComponentId: styledComponentId
	      };
	      return _this;
	    }

	    GlobalStyleComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	      if (window.scCGSHMRCache[this.state.styledComponentId]) {
	        window.scCGSHMRCache[this.state.styledComponentId] -= 1;
	      }
	      /**
	       * Depending on the order "render" is called this can cause the styles to be lost
	       * until the next render pass of the remaining instance, which may
	       * not be immediate.
	       */
	      if (window.scCGSHMRCache[this.state.styledComponentId] === 0) {
	        this.state.globalStyle.removeStyles(this.styleSheet);
	      }
	    };

	    GlobalStyleComponent.prototype.render = function render() {
	      var _this2 = this;

	      if ( react.Children.count(this.props.children)) {
	        // eslint-disable-next-line no-console
	        console.warn('The global style component ' + this.state.styledComponentId + ' was given child JSX. createGlobalStyle does not render children.');
	      }

	      return react.createElement(
	        StyleSheetConsumer,
	        null,
	        function (styleSheet) {
	          _this2.styleSheet = styleSheet || StyleSheet.master;

	          var globalStyle = _this2.state.globalStyle;


	          if (globalStyle.isStatic) {
	            globalStyle.renderStyles(STATIC_EXECUTION_CONTEXT, _this2.styleSheet);

	            return null;
	          } else {
	            return react.createElement(
	              ThemeConsumer,
	              null,
	              function (theme) {
	                // $FlowFixMe
	                var defaultProps = _this2.constructor.defaultProps;


	                var context = _extends$1({}, _this2.props);

	                if (typeof theme !== 'undefined') {
	                  context.theme = determineTheme(_this2.props, theme, defaultProps);
	                }

	                globalStyle.renderStyles(context, _this2.styleSheet);

	                return null;
	              }
	            );
	          }
	        }
	      );
	    };

	    return GlobalStyleComponent;
	  }(react.Component);

	  GlobalStyleComponent.globalStyle = style;
	  GlobalStyleComponent.styledComponentId = id;


	  return GlobalStyleComponent;
	}

	// 

	var replaceWhitespace = function replaceWhitespace(str) {
	  return str.replace(/\s|\\n/g, '');
	};

	function keyframes(strings) {
	  /* Warning if you've used keyframes on React Native */
	  if ( typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    // eslint-disable-next-line no-console
	    console.warn('`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.');
	  }

	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  var rules = css.apply(undefined, [strings].concat(interpolations));

	  var name = generateAlphabeticName(murmurhash(replaceWhitespace(JSON.stringify(rules))));

	  return new Keyframes(name, stringifyRules(rules, name, '@keyframes'));
	}

	// 

	var withTheme = (function (Component$$1) {
	  var WithTheme = react.forwardRef(function (props, ref) {
	    return react.createElement(
	      ThemeConsumer,
	      null,
	      function (theme) {
	        // $FlowFixMe
	        var defaultProps = Component$$1.defaultProps;

	        var themeProp = determineTheme(props, theme, defaultProps);

	        if ( themeProp === undefined) {
	          // eslint-disable-next-line no-console
	          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "' + getComponentName(Component$$1) + '"');
	        }

	        return react.createElement(Component$$1, _extends$1({}, props, { theme: themeProp, ref: ref }));
	      }
	    );
	  });

	  hoistNonReactStatics$1(WithTheme, Component$$1);

	  WithTheme.displayName = 'WithTheme(' + getComponentName(Component$$1) + ')';

	  return WithTheme;
	});

	// 

	/* eslint-disable */
	var __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS = {
	  StyleSheet: StyleSheet
	};

	// 

	/* Warning if you've imported this file on React Native */
	if ( typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	  // eslint-disable-next-line no-console
	  console.warn("It looks like you've imported 'styled-components' on React Native.\n" + "Perhaps you're looking to import 'styled-components/native'?\n" + 'Read more about this at https://www.styled-components.com/docs/basics#react-native');
	}

	/* Warning if there are several instances of styled-components */
	if ( typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Node.js') === -1 && navigator.userAgent.indexOf('jsdom') === -1) {
	  window['__styled-components-init__'] = window['__styled-components-init__'] || 0;

	  if (window['__styled-components-init__'] === 1) {
	    // eslint-disable-next-line no-console
	    console.warn("It looks like there are several instances of 'styled-components' initialized in this application. " + 'This may cause dynamic styles not rendering properly, errors happening during rehydration process ' + 'and makes your application bigger without a good reason.\n\n' + 'See https://s-c.sh/2BAXzed for more info.');
	  }

	  window['__styled-components-init__'] += 1;
	}

	var styled$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': styled,
		createGlobalStyle: createGlobalStyle,
		css: css,
		isStyledComponent: isStyledComponent,
		keyframes: keyframes,
		ServerStyleSheet: ServerStyleSheet,
		StyleSheetConsumer: StyleSheetConsumer,
		StyleSheetContext: StyleSheetContext,
		StyleSheetManager: StyleSheetManager,
		ThemeConsumer: ThemeConsumer,
		ThemeContext: ThemeContext,
		ThemeProvider: ThemeProvider,
		withTheme: withTheme,
		__DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS: __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS
	});

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.11' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is$1 = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is$1 ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty$3 = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty$3.call(it, key);
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode:  'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');

	var TO_STRING = 'toString';
	var TPL = ('' + _functionToString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return _functionToString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) _redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) _hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	// 20.2.2.20 Math.log1p(x)
	var _mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

	// 20.2.2.3 Math.acosh(x)


	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;

	_export(_export.S + _export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	// 20.2.2.5 Math.asinh(x)

	var $asinh = Math.asinh;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0
	_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

	// 20.2.2.7 Math.atanh(x)

	var $atanh = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0
	_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

	// 20.2.2.28 Math.sign(x)
	var _mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	// 20.2.2.9 Math.cbrt(x)



	_export(_export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

	// 20.2.2.11 Math.clz32(x)


	_export(_export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

	// 20.2.2.12 Math.cosh(x)

	var exp = Math.exp;

	_export(_export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	var _mathExpm1 = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

	// 20.2.2.14 Math.expm1(x)



	_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

	// 20.2.2.16 Math.fround(x)

	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	var _mathFround = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = _mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// 20.2.2.16 Math.fround(x)


	_export(_export.S, 'Math', { fround: _mathFround });

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

	var abs = Math.abs;

	_export(_export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

	// 20.2.2.18 Math.imul(x, y)

	var $imul = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	_export(_export.S + _export.F * _fails(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	// 20.2.2.21 Math.log10(x)


	_export(_export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});

	// 20.2.2.20 Math.log1p(x)


	_export(_export.S, 'Math', { log1p: _mathLog1p });

	// 20.2.2.22 Math.log2(x)


	_export(_export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});

	// 20.2.2.28 Math.sign(x)


	_export(_export.S, 'Math', { sign: _mathSign });

	// 20.2.2.30 Math.sinh(x)


	var exp$1 = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	_export(_export.S + _export.F * _fails(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (_mathExpm1(x) - _mathExpm1(-x)) / 2
	      : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
	  }
	});

	// 20.2.2.33 Math.tanh(x)


	var exp$2 = Math.exp;

	_export(_export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = _mathExpm1(x = +x);
	    var b = _mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	// 20.2.2.34 Math.trunc(x)


	_export(_export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

	var math = _core.Math;

	var toString$2 = {}.toString;

	var _cof = function (it) {
	  return toString$2.call(it).slice(8, -1);
	};

	var f$1 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$1
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$2 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$2
	};

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	var setPrototypeOf = _setProto.set;
	var _inheritIfRequired = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor$1 = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor$1 : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf$1 = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf$1(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$3
	};

	var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var space = '[' + _stringWs + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');

	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = _fails(function () {
	    return !!_stringWs[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim$1) : _stringWs[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  _export(_export.P + _export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim$1 = exporter.trim = function (string, TYPE) {
	  string = String(_defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};

	var _stringTrim = exporter;

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	var gOPN = _objectGopn.f;
	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var $trim = _stringTrim.trim;
	var NUMBER = 'Number';
	var $Number = _global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function (argument) {
	  var it = _toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default: return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? _fails(function () { proto.valueOf.call(that); }) : _cof(that) != NUMBER)
	        ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys$1 = _descriptors ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key$2; keys$1.length > j; j++) {
	    if (_has(Base, key$2 = keys$1[j]) && !_has($Number, key$2)) {
	      dP$1($Number, key$2, gOPD$1(Base, key$2));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  _redefine(_global, NUMBER, $Number);
	}

	var _aNumberValue = function (it, msg) {
	  if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};

	var _stringRepeat = function repeat(count) {
	  var str = String(_defined(this));
	  var res = '';
	  var n = _toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};

	var $toFixed = 1.0.toFixed;
	var floor$2 = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';

	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor$2(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor$2(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow$1 = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow$1(x, n - 1, acc * x) : pow$1(x * x, n / 2, acc);
	};
	var log$1 = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	_export(_export.P + _export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = _aNumberValue(this, ERROR);
	    var f = _toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log$1(x * pow$1(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow$1(2, -e, 1) : x / pow$1(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow$1(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + _stringRepeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

	var $toPrecision = 1.0.toPrecision;

	_export(_export.P + _export.F * (_fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});

	// 20.1.2.1 Number.EPSILON


	_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

	// 20.1.2.2 Number.isFinite(number)

	var _isFinite = _global.isFinite;

	_export(_export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

	// 20.1.2.3 Number.isInteger(number)

	var floor$3 = Math.floor;
	var _isInteger = function isInteger(it) {
	  return !_isObject(it) && isFinite(it) && floor$3(it) === it;
	};

	// 20.1.2.3 Number.isInteger(number)


	_export(_export.S, 'Number', { isInteger: _isInteger });

	// 20.1.2.4 Number.isNaN(number)


	_export(_export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	// 20.1.2.5 Number.isSafeInteger(number)


	var abs$1 = Math.abs;

	_export(_export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return _isInteger(number) && abs$1(number) <= 0x1fffffffffffff;
	  }
	});

	// 20.1.2.6 Number.MAX_SAFE_INTEGER


	_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

	// 20.1.2.10 Number.MIN_SAFE_INTEGER


	_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

	var $parseFloat = _global.parseFloat;
	var $trim$1 = _stringTrim.trim;

	var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim$1(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// 20.1.2.12 Number.parseFloat(string)
	_export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', { parseFloat: _parseFloat });

	var $parseInt = _global.parseInt;
	var $trim$2 = _stringTrim.trim;

	var hex = /^[-+]?0[xX]/;

	var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim$2(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

	// 20.1.2.13 Number.parseInt(string, radix)
	_export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', { parseInt: _parseInt });

	var number = _core.Number;

	/* eslint no-proto: 0 */

	var testObject = {};

	if (!(Object.setPrototypeOf || testObject.__proto__)) {
	  var nativeGetPrototypeOf = Object.getPrototypeOf;

	  Object.getPrototypeOf = function (object) {
	    if (object.__proto__) {
	      return object.__proto__;
	    }

	    return nativeGetPrototypeOf.call(Object, object);
	  };
	}

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if ( module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	/**
	 * Checks if `value` is `null` or `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	 * @example
	 *
	 * _.isNil(null);
	 * // => true
	 *
	 * _.isNil(void 0);
	 * // => true
	 *
	 * _.isNil(NaN);
	 * // => false
	 */
	function isNil(value) {
	  return value == null;
	}

	var isNil_1 = isNil;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global$1 == 'object' && global$1 && global$1.Object === Object && global$1;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$1 = _freeGlobal || freeSelf || Function('return this')();

	var _root = root$1;

	/** Built-in value references. */
	var Symbol$1 = _root.Symbol;

	var _Symbol = Symbol$1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$4.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString$1;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray$5 = Array.isArray;

	var isArray_1 = isArray$5;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString$2(value) {
	  return typeof value == 'string' ||
	    (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag);
	}

	var isString_1 = isString$2;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$2(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$2;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$4(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction$4;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$2(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
	}

	var isSymbol_1 = isSymbol$2;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray_1(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol_1(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	var _isKey = isKey;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	    objectProto$2 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$2.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$5).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$3.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$4.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$7.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/* Built-in method references that are verified to be native. */
	var Map$1 = _getNative(_root, 'Map');

	var _Map = Map$1;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize$1(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize$1.Cache || _MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize$1.Cache = _MapCache;

	var memoize_1 = memoize$1;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize_1(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	var _memoizeCapped = memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = _memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	var _stringToPath = stringToPath;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$3(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString$3;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray_1(value)) {
	    return value;
	  }
	  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
	}

	var _castPath = castPath;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol_1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _toKey = toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = _castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[_toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get$1(object, path, defaultValue) {
	  var result = object == null ? undefined : _baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get$1;

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	function isNumber$2(value) {
	  return typeof value == 'number' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == numberTag);
	}

	var isNumber_1 = isNumber$2;

	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is based on
	 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	 * `undefined` and other non-number values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */
	function isNaN$1(value) {
	  // An `NaN` primitive is the only value that is not equal to itself.
	  // Perform the `toStringTag` check first to avoid errors with some
	  // ActiveX objects in IE.
	  return isNumber_1(value) && value != +value;
	}

	var _isNaN = isNaN$1;

	var mathSign = function mathSign(value) {
	  if (value === 0) {
	    return 0;
	  }

	  if (value > 0) {
	    return 1;
	  }

	  return -1;
	};
	var isPercent = function isPercent(value) {
	  return isString_1(value) && value.indexOf('%') === value.length - 1;
	};
	var isNumber$3 = function isNumber(value) {
	  return isNumber_1(value) && !_isNaN(value);
	};
	var isNumOrStr = function isNumOrStr(value) {
	  return isNumber$3(value) || isString_1(value);
	};
	var idCounter = 0;
	var uniqueId = function uniqueId(prefix) {
	  var id = ++idCounter;
	  return "".concat(prefix || '').concat(id);
	};
	/**
	 * Get percent value of a total value
	 * @param {Number|String} percent A percent
	 * @param {Number} totalValue     Total value
	 * @param {NUmber} defaultValue   The value returned when percent is undefined or invalid
	 * @param {Boolean} validate      If set to be true, the result will be validated
	 * @return {Number} value
	 */

	var getPercentValue = function getPercentValue(percent, totalValue) {
	  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	  var validate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	  if (!isNumber$3(percent) && !isString_1(percent)) {
	    return defaultValue;
	  }

	  var value;

	  if (isPercent(percent)) {
	    var index = percent.indexOf('%');
	    value = totalValue * parseFloat(percent.slice(0, index)) / 100;
	  } else {
	    value = +percent;
	  }

	  if (_isNaN(value)) {
	    value = defaultValue;
	  }

	  if (validate && value > totalValue) {
	    value = totalValue;
	  }

	  return value;
	};
	var getAnyElementOfObject = function getAnyElementOfObject(obj) {
	  if (!obj) {
	    return null;
	  }

	  var keys = Object.keys(obj);

	  if (keys && keys.length) {
	    return obj[keys[0]];
	  }

	  return null;
	};
	var hasDuplicate = function hasDuplicate(ary) {
	  if (!isArray_1(ary)) {
	    return false;
	  }

	  var len = ary.length;
	  var cache = {};

	  for (var i = 0; i < len; i++) {
	    if (!cache[ary[i]]) {
	      cache[ary[i]] = true;
	    } else {
	      return true;
	    }
	  }

	  return false;
	};
	var interpolateNumber = function interpolateNumber(numberA, numberB) {
	  if (isNumber$3(numberA) && isNumber$3(numberB)) {
	    return function (t) {
	      return numberA + t * (numberB - numberA);
	    };
	  }

	  return function () {
	    return numberB;
	  };
	};
	var findEntryInArray = function findEntryInArray(ary, specifiedKey, specifiedValue) {
	  if (!ary || !ary.length) {
	    return null;
	  }

	  return ary.find(function (entry) {
	    return entry && (typeof specifiedKey === 'function' ? specifiedKey(entry) : get_1(entry, specifiedKey)) === specifiedValue;
	  });
	};
	/**
	 * The least square linear regression
	 * @param {Array} data The array of points
	 * @returns {Object} The domain of x, and the parameter of linear function
	 */

	var getLinearRegression = function getLinearRegression(data) {
	  if (!data || !data.length) {
	    return null;
	  }

	  var len = data.length;
	  var xsum = 0;
	  var ysum = 0;
	  var xysum = 0;
	  var xxsum = 0;
	  var xmin = Infinity;
	  var xmax = -Infinity;

	  for (var i = 0; i < len; i++) {
	    xsum += data[i].cx;
	    ysum += data[i].cy;
	    xysum += data[i].cx * data[i].cy;
	    xxsum += data[i].cx * data[i].cx;
	    xmin = Math.min(xmin, data[i].cx);
	    xmax = Math.max(xmax, data[i].cx);
	  }

	  var a = len * xxsum !== xsum * xsum ? (len * xysum - xsum * ysum) / (len * xxsum - xsum * xsum) : 0;
	  return {
	    xmin: xmin,
	    xmax: xmax,
	    a: a,
	    b: (ysum - a * xsum) / len
	  };
	};

	function shallowEqual$1(a, b) {
	  /* eslint-disable no-restricted-syntax */
	  for (var key in a) {
	    if ({}.hasOwnProperty.call(a, key) && (!{}.hasOwnProperty.call(b, key) || a[key] !== b[key])) {
	      return false;
	    }
	  }

	  for (var _key in b) {
	    if ({}.hasOwnProperty.call(b, _key) && !{}.hasOwnProperty.call(a, _key)) {
	      return false;
	    }
	  }

	  return true;
	}

	function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

	function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$1(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	var PRESENTATION_ATTRIBUTES = {
	  'aria-current': propTypes.string,
	  // state
	  'aria-details': propTypes.any,
	  'aria-disabled': propTypes.any,
	  // state
	  'aria-hidden': propTypes.any,
	  // state
	  'aria-invalid': propTypes.any,
	  // state
	  'aria-keyshortcuts': propTypes.any,
	  'aria-label': propTypes.any,
	  'aria-roledescription': propTypes.any,
	  // Widget Attributes
	  'aria-autocomplete': propTypes.any,
	  'aria-checked': propTypes.any,
	  'aria-expanded': propTypes.any,
	  'aria-haspopup': propTypes.any,
	  'aria-level': propTypes.any,
	  'aria-modal': propTypes.any,
	  'aria-multiline': propTypes.any,
	  'aria-multiselectable': propTypes.any,
	  'aria-orientation': propTypes.any,
	  'aria-placeholder': propTypes.any,
	  'aria-pressed': propTypes.any,
	  'aria-readonly': propTypes.any,
	  'aria-required': propTypes.any,
	  'aria-selected': propTypes.any,
	  'aria-sort': propTypes.any,
	  'aria-valuemax': propTypes.any,
	  'aria-valuemin': propTypes.any,
	  'aria-valuenow': propTypes.any,
	  'aria-valuetext': propTypes.any,
	  // Live Region Attributes
	  'aria-atomic': propTypes.any,
	  'aria-busy': propTypes.any,
	  'aria-live': propTypes.any,
	  'aria-relevant': propTypes.any,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': propTypes.any,
	  'aria-grabbed': propTypes.any,
	  // Relationship Attributes
	  'aria-activedescendant': propTypes.any,
	  'aria-colcount': propTypes.any,
	  'aria-colindex': propTypes.any,
	  'aria-colspan': propTypes.any,
	  'aria-controls': propTypes.any,
	  'aria-describedby': propTypes.any,
	  'aria-errormessage': propTypes.any,
	  'aria-flowto': propTypes.any,
	  'aria-labelledby': propTypes.any,
	  'aria-owns': propTypes.any,
	  'aria-posinset': propTypes.any,
	  'aria-rowcount': propTypes.any,
	  'aria-rowindex': propTypes.any,
	  'aria-rowspan': propTypes.any,
	  'aria-setsize': propTypes.any,
	  alignmentBaseline: propTypes.string,
	  angle: propTypes.number,
	  baselineShift: propTypes.string,
	  clip: propTypes.string,
	  clipPath: propTypes.string,
	  clipRule: propTypes.string,
	  color: propTypes.string,
	  colorInterpolation: propTypes.string,
	  colorInterpolationFilters: propTypes.string,
	  colorProfile: propTypes.string,
	  colorRendering: propTypes.string,
	  cursor: propTypes.string,
	  direction: propTypes.oneOf(['ltr', 'rtl', 'inherit']),
	  display: propTypes.string,
	  dominantBaseline: propTypes.string,
	  enableBackground: propTypes.string,
	  fill: propTypes.string,
	  fillOpacity: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  fillRule: propTypes.oneOf(['nonzero', 'evenodd', 'inherit']),
	  filter: propTypes.string,
	  floodColor: propTypes.string,
	  floodOpacity: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  font: propTypes.string,
	  fontFamily: propTypes.string,
	  fontSize: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  fontSizeAdjust: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  fontStretch: propTypes.oneOf(['normal', 'wider', 'narrower', 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', 'inherit']),
	  fontStyle: propTypes.oneOf(['normal', 'italic', 'oblique', 'inherit']),
	  fontVariant: propTypes.oneOf(['normal', 'small-caps', 'inherit']),
	  fontWeight: propTypes.oneOf(['normal', 'bold', 'bolder', 'lighter', 100, 200, 300, 400, 500, 600, 700, 800, 900, 'inherit']),
	  glyphOrientationHorizontal: propTypes.string,
	  glyphOrientationVertical: propTypes.string,
	  imageRendering: propTypes.oneOf(['auto', 'optimizeSpeed', 'optimizeQuality', 'inherit']),
	  kerning: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  letterSpacing: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  lightingColor: propTypes.string,
	  lineHeight: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  markerEnd: propTypes.string,
	  markerMid: propTypes.string,
	  markerStart: propTypes.string,
	  mask: propTypes.string,
	  opacity: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  overflow: propTypes.oneOf(['visible', 'hidden', 'scroll', 'auto', 'inherit']),
	  pointerEvents: propTypes.oneOf(['visiblePainted', 'visibleFill', 'visibleStroke', 'visible', 'painted', 'fill', 'stroke', 'all', 'none', 'inherit']),
	  shapeRendering: propTypes.oneOf(['auto', 'optimizeSpeed', 'crispEdges', 'geometricPrecision', 'inherit']),
	  stopColor: propTypes.string,
	  stopOpacity: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  stroke: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  strokeDasharray: propTypes.string,
	  strokeDashoffset: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  strokeLinecap: propTypes.oneOf(['butt', 'round', 'square', 'inherit']),
	  strokeLinejoin: propTypes.oneOf(['miter', 'round', 'bevel', 'inherit']),
	  strokeMiterlimit: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  strokeOpacity: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  strokeWidth: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  textAnchor: propTypes.oneOf(['start', 'middle', 'end', 'inherit']),
	  textDecoration: propTypes.oneOf(['none', 'underline', 'overline', 'line-through', 'blink', 'inherit']),
	  textRendering: propTypes.oneOf(['auto', 'optimizeSpeed', 'optimizeLegibility', 'geometricPrecision', 'inherit']),
	  unicodeBidi: propTypes.oneOf(['normal', 'embed', 'bidi-override', 'inherit']),
	  visibility: propTypes.oneOf(['visible', 'hidden', 'collapse', 'inherit']),
	  wordSpacing: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  writingMode: propTypes.oneOf(['lr-tb', 'rl-tb', 'tb-rl', 'lr', 'rl', 'tb', 'inherit']),
	  transform: propTypes.string,
	  role: propTypes.string,
	  focusable: propTypes.string,
	  tabIndex: propTypes.string,
	  style: propTypes.object,
	  width: propTypes.number,
	  height: propTypes.number,
	  dx: propTypes.number,
	  dy: propTypes.number,
	  x: propTypes.number,
	  y: propTypes.number,
	  r: propTypes.number,
	  // The radius of Rectangle
	  radius: propTypes.oneOfType([propTypes.number, propTypes.array])
	};
	var EVENT_ATTRIBUTES = {
	  onClick: propTypes.func,
	  onMouseDown: propTypes.func,
	  onMouseUp: propTypes.func,
	  onMouseOver: propTypes.func,
	  onMouseMove: propTypes.func,
	  onMouseOut: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onTouchEnd: propTypes.func,
	  onTouchMove: propTypes.func,
	  onTouchStart: propTypes.func,
	  onTouchCancel: propTypes.func
	};
	var REACT_BROWSER_EVENT_MAP = {
	  click: 'onClick',
	  mousedown: 'onMouseDown',
	  mouseup: 'onMouseUp',
	  mouseover: 'onMouseOver',
	  mousemove: 'onMouseMove',
	  mouseout: 'onMouseOut',
	  mouseenter: 'onMouseEnter',
	  mouseleave: 'onMouseLeave',
	  touchcancel: 'onTouchCancel',
	  touchend: 'onTouchEnd',
	  touchmove: 'onTouchMove',
	  touchstart: 'onTouchStart'
	};
	var SCALE_TYPES = ['auto', 'linear', 'pow', 'sqrt', 'log', 'identity', 'time', 'band', 'point', 'ordinal', 'quantile', 'quantize', 'utc', 'sequential', 'threshold'];
	var LEGEND_TYPES = ['plainline', 'line', 'square', 'rect', 'circle', 'cross', 'diamond', 'star', 'triangle', 'wye', 'none'];
	var TOOLTIP_TYPES = ['none'];
	/**
	 * Get the display name of a component
	 * @param  {Object} Comp Specified Component
	 * @return {String}      Display name of Component
	 */

	var getDisplayName = function getDisplayName(Comp) {
	  if (typeof Comp === 'string') {
	    return Comp;
	  }

	  if (!Comp) {
	    return '';
	  }

	  return Comp.displayName || Comp.name || 'Component';
	};
	/*
	 * Find and return all matched children by type. `type` can be a React element class or
	 * string
	 */

	var findAllByType = function findAllByType(children, type) {
	  var result = [];
	  var types = [];

	  if (isArray_1(type)) {
	    types = type.map(function (t) {
	      return getDisplayName(t);
	    });
	  } else {
	    types = [getDisplayName(type)];
	  }

	  react.Children.forEach(children, function (child) {
	    var childType = child && child.type && (child.type.displayName || child.type.name);

	    if (types.indexOf(childType) !== -1) {
	      result.push(child);
	    }
	  });
	  return result;
	};
	/*
	 * Return the first matched child by type, return null otherwise.
	 * `type` can be a React element class or string.
	 */

	var findChildByType = function findChildByType(children, type) {
	  var result = findAllByType(children, type);
	  return result && result[0];
	};
	/**
	 * get all the presentation attribute of svg element
	 * @param  {Object} el A react element or the props of a react element
	 * @return {Object}    attributes or null
	 */

	var getPresentationAttributes = function getPresentationAttributes(el) {
	  if (!el || isFunction_1(el)) {
	    return null;
	  }

	  var props = react.isValidElement(el) ? el.props : el;

	  if (!isObject_1(props)) {
	    return null;
	  }

	  var out = null; // eslint-disable-next-line no-restricted-syntax

	  for (var i in props) {
	    if ({}.hasOwnProperty.call(props, i) && PRESENTATION_ATTRIBUTES[i]) {
	      if (!out) out = {};
	      out[i] = props[i];
	    }
	  }

	  return out;
	};

	var getEventHandlerOfElement = function getEventHandlerOfElement(originalHandler, props) {
	  return function (e) {
	    originalHandler(props, e);
	    return null;
	  };
	};
	/**
	 * get all the event attribute of svg element
	 * @param  {Object}   el           A react element or the props of a react element
	 * @param  {Function} newHandler   New handler of event
	 * @param  {Boolean}  wrapCallback Wrap callback and return more parameters or not
	 * @return {Object}                attributes or null
	 */


	var filterEventAttributes = function filterEventAttributes(el, newHandler) {
	  var wrapCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (!el || isFunction_1(el)) {
	    return null;
	  }

	  var props = react.isValidElement(el) ? el.props : el;

	  if (!isObject_1(props)) {
	    return null;
	  }

	  var out = null; // eslint-disable-next-line no-restricted-syntax

	  for (var i in props) {
	    if ({}.hasOwnProperty.call(props, i) && EVENT_ATTRIBUTES[i]) {
	      if (!out) out = {};
	      out[i] = newHandler || (wrapCallback ? getEventHandlerOfElement(props[i], props) : props[i]);
	    }
	  }

	  return out;
	};

	var getEventHandlerOfChild = function getEventHandlerOfChild(originalHandler, data, index) {
	  return function (e) {
	    originalHandler(data, index, e);
	    return null;
	  };
	};

	var filterEventsOfChild = function filterEventsOfChild(props, data, index) {
	  if (!isObject_1(props)) {
	    return null;
	  }

	  var out = null; // eslint-disable-next-line no-restricted-syntax

	  for (var i in props) {
	    if ({}.hasOwnProperty.call(props, i) && EVENT_ATTRIBUTES[i] && isFunction_1(props[i])) {
	      if (!out) out = {};
	      out[i] = getEventHandlerOfChild(props[i], data, index);
	    }
	  }

	  return out;
	};
	/**
	 * validate the width and height props of a chart element
	 * @param  {Object} el A chart element
	 * @return {Boolean}   true If the props width and height are number, and greater than 0
	 */

	var validateWidthHeight = function validateWidthHeight(el) {
	  if (!el || !el.props) {
	    return false;
	  }

	  var _el$props = el.props,
	      width = _el$props.width,
	      height = _el$props.height;

	  if (!isNumber$3(width) || width <= 0 || !isNumber$3(height) || height <= 0) {
	    return false;
	  }

	  return true;
	};
	var isSsr = function isSsr() {
	  return !(typeof window !== 'undefined' && window.document && window.document.createElement && window.setTimeout);
	};
	var SVG_TAGS = ['a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor', 'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColormatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-url', 'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line', 'lineGradient', 'marker', 'mask', 'metadata', 'missing-glyph', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script', 'set', 'stop', 'style', 'svg', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref', 'tspan', 'use', 'view', 'vkern'];

	var isSvgElement = function isSvgElement(child) {
	  return child && child.type && isString_1(child.type) && SVG_TAGS.indexOf(child.type) >= 0;
	};
	/**
	 * Filter all the svg elements of children
	 * @param  {Array} children The children of a react element
	 * @return {Array}          All the svg elements
	 */


	var filterSvgElements = function filterSvgElements(children) {
	  var svgElements = [];
	  react.Children.forEach(children, function (entry) {
	    if (entry && entry.type && isString_1(entry.type) && SVG_TAGS.indexOf(entry.type) >= 0) {
	      svgElements.push(entry);
	    }
	  });
	  return svgElements;
	};
	var isSingleChildEqual = function isSingleChildEqual(nextChild, prevChild) {
	  if (isNil_1(nextChild) && isNil_1(prevChild)) {
	    return true;
	  }

	  if (!isNil_1(nextChild) && !isNil_1(prevChild)) {
	    var _ref = nextChild.props || {},
	        nextChildren = _ref.children,
	        nextProps = _objectWithoutProperties(_ref, ["children"]);

	    var _ref2 = prevChild.props || {},
	        prevChildren = _ref2.children,
	        prevProps = _objectWithoutProperties(_ref2, ["children"]);

	    if (nextChildren && prevChildren) {
	      // eslint-disable-next-line no-use-before-define
	      return shallowEqual$1(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren);
	    }

	    if (!nextChildren && !prevChildren) {
	      return shallowEqual$1(nextProps, prevProps);
	    }

	    return false;
	  }

	  return false;
	};
	/**
	 * Wether props of children changed
	 * @param  {Object} nextChildren The latest children
	 * @param  {Object} prevChildren The prev children
	 * @return {Boolean}             equal or not
	 */

	var isChildrenEqual = function isChildrenEqual(nextChildren, prevChildren) {
	  if (nextChildren === prevChildren) {
	    return true;
	  }

	  if (react_1.count(nextChildren) !== react_1.count(prevChildren)) {
	    return false;
	  }

	  var count = react_1.count(nextChildren);

	  if (count === 0) {
	    return true;
	  }

	  if (count === 1) {
	    return isSingleChildEqual(isArray_1(nextChildren) ? nextChildren[0] : nextChildren, isArray_1(prevChildren) ? prevChildren[0] : prevChildren);
	  }

	  for (var _i = 0; _i < count; _i++) {
	    var nextChild = nextChildren[_i];
	    var prevChild = prevChildren[_i];

	    if (isArray_1(nextChild) || isArray_1(prevChild)) {
	      if (!isChildrenEqual(nextChild, prevChild)) {
	        return false;
	      }
	    } else if (!isSingleChildEqual(nextChild, prevChild)) {
	      return false;
	    }
	  }

	  return true;
	};
	var renderByOrder = function renderByOrder(children, renderMap) {
	  var elements = [];
	  var record = {};
	  react_1.forEach(children, function (child, index) {
	    if (child && isSvgElement(child)) {
	      elements.push(child);
	    } else if (child && renderMap[getDisplayName(child.type)]) {
	      var displayName = getDisplayName(child.type);
	      var _renderMap$displayNam = renderMap[displayName],
	          handler = _renderMap$displayNam.handler,
	          once = _renderMap$displayNam.once;

	      if (once && !record[displayName] || !once) {
	        var results = handler(child, displayName, index);

	        if (isArray_1(results)) {
	          elements = [elements].concat(_toConsumableArray(results));
	        } else {
	          elements.push(results);
	        }

	        record[displayName] = true;
	      }
	    }
	  });
	  return elements;
	};
	var getReactEventByType = function getReactEventByType(e) {
	  var type = e && e.type;

	  if (type && REACT_BROWSER_EVENT_MAP[type]) {
	    return REACT_BROWSER_EVENT_MAP[type];
	  }

	  return null;
	};
	var parseChildIndex = function parseChildIndex(child, children) {
	  var result = -1;
	  react_1.forEach(children, function (entry, index) {
	    if (entry === child) {
	      result = index;
	    }
	  });
	  return result;
	};

	function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

	function _objectWithoutProperties$1(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	var propTypes$1 = {
	  width: propTypes.number.isRequired,
	  height: propTypes.number.isRequired,
	  viewBox: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number
	  }),
	  className: propTypes.string,
	  style: propTypes.object,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node])
	};

	function Surface(props) {
	  var children = props.children,
	      width = props.width,
	      height = props.height,
	      viewBox = props.viewBox,
	      className = props.className,
	      style = props.style,
	      others = _objectWithoutProperties$1(props, ["children", "width", "height", "viewBox", "className", "style"]);

	  var svgView = viewBox || {
	    width: width,
	    height: height,
	    x: 0,
	    y: 0
	  };
	  var layerClass = classnames('recharts-surface', className);
	  var attrs = getPresentationAttributes(others);
	  return react.createElement("svg", _extends$2({}, attrs, {
	    className: layerClass,
	    width: width,
	    height: height,
	    style: style,
	    viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height),
	    version: "1.1"
	  }), children);
	}

	Surface.propTypes = propTypes$1;

	function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

	function _objectWithoutProperties$2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$3(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$3(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	var propTypes$2 = {
	  className: propTypes.string,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node])
	};

	function Layer(props) {
	  var children = props.children,
	      className = props.className,
	      others = _objectWithoutProperties$2(props, ["children", "className"]);

	  var layerClass = classnames('recharts-layer', className);
	  return react.createElement("g", _extends$3({
	    className: layerClass
	  }, others), children);
	}

	Layer.propTypes = propTypes$2;

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new _ListCache;
	  this.size = 0;
	}

	var _stackClear = stackClear;

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	var _stackDelete = stackDelete;

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	var _stackGet = stackGet;

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	var _stackHas = stackHas;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof _ListCache) {
	    var pairs = data.__data__;
	    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new _MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	var _stackSet = stackSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new _ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = _stackClear;
	Stack.prototype['delete'] = _stackDelete;
	Stack.prototype.get = _stackGet;
	Stack.prototype.has = _stackHas;
	Stack.prototype.set = _stackSet;

	var _Stack = Stack;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED$2);
	  return this;
	}

	var _setCacheAdd = setCacheAdd;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	var _setCacheHas = setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new _MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
	SetCache.prototype.has = _setCacheHas;

	var _SetCache = SetCache;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arraySome = arraySome;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	var _cacheHas = cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!_arraySome(other, function(othValue, othIndex) {
	            if (!_cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	var _equalArrays = equalArrays;

	/** Built-in value references. */
	var Uint8Array$1 = _root.Uint8Array;

	var _Uint8Array = Uint8Array$1;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	var _mapToArray = mapToArray;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	var _setToArray = setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag$1 = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag$1 = '[object String]',
	    symbolTag$1 = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag$1:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq_1(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag$1:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = _mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
	      convert || (convert = _setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG$1;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag$1:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	var _equalByTag = equalByTag;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	var _arrayPush = arrayPush;

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
	}

	var _baseGetAllKeys = baseGetAllKeys;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	var _arrayFilter = arrayFilter;

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	var stubArray_1 = stubArray;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	var _getSymbols = getSymbols;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
	}

	var _baseIsArguments = baseIsArguments;

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$8 = objectProto$6.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments$1 = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
	  return isObjectLike_1(value) && hasOwnProperty$8.call(value, 'callee') &&
	    !propertyIsEnumerable$1.call(value, 'callee');
	};

	var isArguments_1 = isArguments$1;

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	var isBuffer_1 = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? _root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse_1;

	module.exports = isBuffer;
	});

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	var isLength_1 = isLength;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    errorTag$1 = '[object Error]',
	    funcTag$1 = '[object Function]',
	    mapTag$1 = '[object Map]',
	    numberTag$2 = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$1 = '[object Set]',
	    stringTag$2 = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$1 = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
	typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
	typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
	typedArrayTags[mapTag$1] = typedArrayTags[numberTag$2] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
	typedArrayTags[setTag$1] = typedArrayTags[stringTag$2] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike_1(value) &&
	    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary;

	var _nodeUtil = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && _freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
	});

	/* Node.js helper references. */
	var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

	var isTypedArray_1 = isTypedArray;

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$9 = objectProto$7.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray_1(value),
	      isArg = !isArr && isArguments_1(value),
	      isBuff = !isArr && !isArg && isBuffer_1(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? _baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$9.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           _isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys;

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

	  return value === proto;
	}

	var _isPrototype = isPrototype;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = _overArg(Object.keys, Object);

	var _nativeKeys = nativeKeys;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$a = objectProto$9.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!_isPrototype(object)) {
	    return _nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$a.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength_1(value.length) && !isFunction_1(value);
	}

	var isArrayLike_1 = isArrayLike;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$2(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
	}

	var keys_1 = keys$2;

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return _baseGetAllKeys(object, keys_1, _getSymbols);
	}

	var _getAllKeys = getAllKeys;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1;

	/** Used for built-in method references. */
	var objectProto$a = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$b = objectProto$a.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
	      objProps = _getAllKeys(object),
	      objLength = objProps.length,
	      othProps = _getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$b.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	var _equalObjects = equalObjects;

	/* Built-in method references that are verified to be native. */
	var DataView$1 = _getNative(_root, 'DataView');

	var _DataView = DataView$1;

	/* Built-in method references that are verified to be native. */
	var Promise$1 = _getNative(_root, 'Promise');

	var _Promise = Promise$1;

	/* Built-in method references that are verified to be native. */
	var Set$1 = _getNative(_root, 'Set');

	var _Set = Set$1;

	/* Built-in method references that are verified to be native. */
	var WeakMap$1 = _getNative(_root, 'WeakMap');

	var _WeakMap = WeakMap$1;

	/** `Object#toString` result references. */
	var mapTag$2 = '[object Map]',
	    objectTag$1 = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag$2 = '[object Set]',
	    weakMapTag$1 = '[object WeakMap]';

	var dataViewTag$2 = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = _toSource(_DataView),
	    mapCtorString = _toSource(_Map),
	    promiseCtorString = _toSource(_Promise),
	    setCtorString = _toSource(_Set),
	    weakMapCtorString = _toSource(_WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = _baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
	    (_Map && getTag(new _Map) != mapTag$2) ||
	    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
	    (_Set && getTag(new _Set) != setTag$2) ||
	    (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
	  getTag = function(value) {
	    var result = _baseGetTag(value),
	        Ctor = result == objectTag$1 ? value.constructor : undefined,
	        ctorString = Ctor ? _toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag$2;
	        case mapCtorString: return mapTag$2;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag$2;
	        case weakMapCtorString: return weakMapTag$1;
	      }
	    }
	    return result;
	  };
	}

	var _getTag = getTag;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1;

	/** `Object#toString` result references. */
	var argsTag$2 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    objectTag$2 = '[object Object]';

	/** Used for built-in method references. */
	var objectProto$b = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$c = objectProto$b.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray_1(object),
	      othIsArr = isArray_1(other),
	      objTag = objIsArr ? arrayTag$1 : _getTag(object),
	      othTag = othIsArr ? arrayTag$1 : _getTag(other);

	  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
	  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

	  var objIsObj = objTag == objectTag$2,
	      othIsObj = othTag == objectTag$2,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer_1(object)) {
	    if (!isBuffer_1(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new _Stack);
	    return (objIsArr || isTypedArray_1(object))
	      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$c.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$c.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new _Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new _Stack);
	  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	var _baseIsEqualDeep = baseIsEqualDeep;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
	    return value !== value && other !== other;
	  }
	  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	var _baseIsEqual = baseIsEqual;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$4 = 1,
	    COMPARE_UNORDERED_FLAG$2 = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new _Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	var _baseIsMatch = baseIsMatch;

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject_1(value);
	}

	var _isStrictComparable = isStrictComparable;

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys_1(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, _isStrictComparable(value)];
	  }
	  return result;
	}

	var _getMatchData = getMatchData;

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	var _matchesStrictComparable = matchesStrictComparable;

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = _getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || _baseIsMatch(object, source, matchData);
	  };
	}

	var _baseMatches = baseMatches;

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	var _baseHasIn = baseHasIn;

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = _toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength_1(length) && _isIndex(key, length) &&
	    (isArray_1(object) || isArguments_1(object));
	}

	var _hasPath = hasPath;

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && _hasPath(object, path, _baseHasIn);
	}

	var hasIn_1 = hasIn;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$5 = 1,
	    COMPARE_UNORDERED_FLAG$3 = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (_isKey(path) && _isStrictComparable(srcValue)) {
	    return _matchesStrictComparable(_toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get_1(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn_1(object, path)
	      : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
	  };
	}

	var _baseMatchesProperty = baseMatchesProperty;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	var identity_1 = identity;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _baseProperty = baseProperty;

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return _baseGet(object, path);
	  };
	}

	var _basePropertyDeep = basePropertyDeep;

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
	}

	var property_1 = property;

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity_1;
	  }
	  if (typeof value == 'object') {
	    return isArray_1(value)
	      ? _baseMatchesProperty(value[0], value[1])
	      : _baseMatches(value);
	  }
	  return property_1(value);
	}

	var _baseIteratee = baseIteratee;

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _baseFindIndex = baseFindIndex;

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	var _baseIsNaN = baseIsNaN;

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _strictIndexOf = strictIndexOf;

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? _strictIndexOf(array, value, fromIndex)
	    : _baseFindIndex(array, _baseIsNaN, fromIndex);
	}

	var _baseIndexOf = baseIndexOf;

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && _baseIndexOf(array, value, 0) > -1;
	}

	var _arrayIncludes$1 = arrayIncludes;

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arrayIncludesWith = arrayIncludesWith;

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop$2() {
	  // No operation performed.
	}

	var noop_1 = noop$2;

	/** Used as references for various `Number` constants. */
	var INFINITY$2 = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(_Set && (1 / _setToArray(new _Set([,-0]))[1]) == INFINITY$2) ? noop_1 : function(values) {
	  return new _Set(values);
	};

	var _createSet = createSet;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE$1 = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = _arrayIncludes$1,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = _arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE$1) {
	    var set = iteratee ? null : _createSet(array);
	    if (set) {
	      return _setToArray(set);
	    }
	    isCommon = false;
	    includes = _cacheHas;
	    seen = new _SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	var _baseUniq = baseUniq;

	/**
	 * This method is like `_.uniq` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * uniqueness is computed. The order of result values is determined by the
	 * order they occur in the array. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	 * // => [2.1, 1.2]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniqBy(array, iteratee) {
	  return (array && array.length) ? _baseUniq(array, _baseIteratee(iteratee)) : [];
	}

	var uniqBy_1 = uniqBy;

	var pi = Math.PI,
	    tau = 2 * pi,
	    epsilon = 1e-6,
	    tauEpsilon = tau - epsilon;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon));

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r, ccw = !!ccw;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau + tau;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function constant(x) {
	  return function constant() {
	    return x;
	  };
	}

	var pi$1 = Math.PI;
	var tau$1 = 2 * pi$1;

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	function curveLinear(context) {
	  return new Linear(context);
	}

	function x$1(p) {
	  return p[0];
	}

	function y$2(p) {
	  return p[1];
	}

	function shapeLine() {
	  var x = x$1,
	      y = y$2,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), line) : x;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), line) : y;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	}

	function shapeArea() {
	  var x0 = x$1,
	      x1 = null,
	      y0 = constant(0),
	      y1 = y$2,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return shapeLine().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	}

	var slice = Array.prototype.slice;

	var symbolCircle = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$1);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$1);
	  }
	};

	var symbolCross = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3),
	    tan30_2 = tan30 * 2;

	var symbolDiamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810,
	    kr = Math.sin(pi$1 / 10) / Math.sin(7 * pi$1 / 10),
	    kx = Math.sin(tau$1 / 10) * kr,
	    ky = -Math.cos(tau$1 / 10) * kr;

	var symbolStar = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$1 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var symbolSquare = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var symbolTriangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5,
	    s$1 = Math.sqrt(3) / 2,
	    k = 1 / Math.sqrt(12),
	    a = (k / 2 + 1) * 3;

	var symbolWye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s$1 * y0, s$1 * x0 + c * y0);
	    context.lineTo(c * x1 - s$1 * y1, s$1 * x1 + c * y1);
	    context.lineTo(c * x2 - s$1 * y2, s$1 * x2 + c * y2);
	    context.lineTo(c * x0 + s$1 * y0, c * y0 - s$1 * x0);
	    context.lineTo(c * x1 + s$1 * y1, c * y1 - s$1 * x1);
	    context.lineTo(c * x2 + s$1 * y2, c * y2 - s$1 * x2);
	    context.closePath();
	  }
	};

	function shapeSymbol() {
	  var type = constant(symbolCircle),
	      size = constant(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	}

	function noop$3() {}

	function point(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function curveBasis(context) {
	  return new Basis(context);
	}

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop$3,
	  areaEnd: noop$3,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function curveBasisClosed(context) {
	  return new BasisClosed(context);
	}

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function curveBasisOpen(context) {
	  return new BasisOpen(context);
	}

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop$3,
	  areaEnd: noop$3,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	function curveLinearClosed(context) {
	  return new LinearClosed(context);
	}

	function sign(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$1(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$1(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$1(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$1(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	function curveNatural(context) {
	  return new Natural(context);
	}

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	function curveStep(context) {
	  return new Step(context, 0.5);
	}

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	function stackOffsetNone(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	}

	function stackOrderNone(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	}

	function stackValue(d, key) {
	  return d[key];
	}

	function shapeStack() {
	  var keys = constant([]),
	      order = stackOrderNone,
	      offset = stackOffsetNone,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? stackOrderNone : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? stackOffsetNone : _, stack) : offset;
	  };

	  return stack;
	}

	function stackOffsetExpand(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  stackOffsetNone(series, order);
	}

	function stackOffsetSilhouette(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  stackOffsetNone(series, order);
	}

	function stackOffsetWiggle(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  stackOffsetNone(series, order);
	}

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

	function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
	var SYMBOL_FACTORIES = {
	  symbolCircle: symbolCircle,
	  symbolCross: symbolCross,
	  symbolDiamond: symbolDiamond,
	  symbolSquare: symbolSquare,
	  symbolStar: symbolStar,
	  symbolTriangle: symbolTriangle,
	  symbolWye: symbolWye
	};
	var RADIAN = Math.PI / 180;

	var getSymbolFactory = function getSymbolFactory(type) {
	  var name = "symbol".concat(type.slice(0, 1).toUpperCase()).concat(type.slice(1));
	  return SYMBOL_FACTORIES[name] || symbolCircle;
	};

	var calculateAreaSize = function calculateAreaSize(size, sizeType, type) {
	  if (sizeType === 'area') {
	    return size;
	  }

	  switch (type) {
	    case 'cross':
	      return 5 * size * size / 9;

	    case 'diamond':
	      return 0.5 * size * size / Math.sqrt(3);

	    case 'square':
	      return size * size;

	    case 'star':
	      {
	        var angle = 18 * RADIAN;
	        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2));
	      }

	    case 'triangle':
	      return Math.sqrt(3) * size * size / 4;

	    case 'wye':
	      return (21 - 10 * Math.sqrt(3)) * size * size / 8;

	    default:
	      return Math.PI * size * size / 4;
	  }
	};

	var Symbols =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits(Symbols, _PureComponent);

	  function Symbols() {
	    _classCallCheck(this, Symbols);

	    return _possibleConstructorReturn(this, _getPrototypeOf(Symbols).apply(this, arguments));
	  }

	  _createClass(Symbols, [{
	    key: "getPath",

	    /**
	     * Calculate the path of curve
	     * @return {String} path
	     */
	    value: function getPath() {
	      var _this$props = this.props,
	          size = _this$props.size,
	          sizeType = _this$props.sizeType,
	          type = _this$props.type;
	      var symbolFactory = getSymbolFactory(type);
	      var symbol = shapeSymbol().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));
	      return symbol();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          className = _this$props2.className,
	          cx = _this$props2.cx,
	          cy = _this$props2.cy,
	          size = _this$props2.size;

	      if (cx === +cx && cy === +cy && size === +size) {
	        return react.createElement("path", _extends$4({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {
	          className: classnames('recharts-symbols', className),
	          transform: "translate(".concat(cx, ", ").concat(cy, ")"),
	          d: this.getPath()
	        }));
	      }

	      return null;
	    }
	  }]);

	  return Symbols;
	}(react_4);

	Symbols.displayName = 'Symbols';
	Symbols.propTypes = _objectSpread({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  type: propTypes.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']),
	  cx: propTypes.number,
	  cy: propTypes.number,
	  size: propTypes.number,
	  sizeType: propTypes.oneOf(['area', 'diameter'])
	});
	Symbols.defaultProps = {
	  type: 'circle',
	  size: 64,
	  sizeType: 'area'
	};

	function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

	function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

	function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$2(self); }

	function _assertThisInitialized$2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

	function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

	function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }
	var SIZE = 32;
	var ICON_TYPES = LEGEND_TYPES.filter(function (type) {
	  return type !== 'none';
	});

	var DefaultLegendContent =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$1(DefaultLegendContent, _PureComponent);

	  function DefaultLegendContent() {
	    _classCallCheck$1(this, DefaultLegendContent);

	    return _possibleConstructorReturn$1(this, _getPrototypeOf$1(DefaultLegendContent).apply(this, arguments));
	  }

	  _createClass$1(DefaultLegendContent, [{
	    key: "renderIcon",

	    /**
	     * Render the path of icon
	     * @param {Object} data Data of each legend item
	     * @return {String} Path element
	     */
	    value: function renderIcon(data) {
	      var inactiveColor = this.props.inactiveColor;
	      var halfSize = SIZE / 2;
	      var sixthSize = SIZE / 6;
	      var thirdSize = SIZE / 3;
	      var color = data.inactive ? inactiveColor : data.color;

	      if (data.type === 'plainline') {
	        return react.createElement("line", {
	          strokeWidth: 4,
	          fill: "none",
	          stroke: color,
	          strokeDasharray: data.payload.strokeDasharray,
	          x1: 0,
	          y1: halfSize,
	          x2: SIZE,
	          y2: halfSize,
	          className: "recharts-legend-icon"
	        });
	      }

	      if (data.type === 'line') {
	        return react.createElement("path", {
	          strokeWidth: 4,
	          fill: "none",
	          stroke: color,
	          d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
	          className: "recharts-legend-icon"
	        });
	      }

	      if (data.type === 'rect') {
	        return react.createElement("path", {
	          stroke: "none",
	          fill: color,
	          d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
	          className: "recharts-legend-icon"
	        });
	      }

	      return react.createElement(Symbols, {
	        fill: color,
	        cx: halfSize,
	        cy: halfSize,
	        size: SIZE,
	        sizeType: "diameter",
	        type: data.type
	      });
	    }
	    /**
	     * Draw items of legend
	     * @return {ReactElement} Items
	     */

	  }, {
	    key: "renderItems",
	    value: function renderItems() {
	      var _this = this;

	      var _this$props = this.props,
	          payload = _this$props.payload,
	          iconSize = _this$props.iconSize,
	          layout = _this$props.layout,
	          formatter = _this$props.formatter;
	      var viewBox = {
	        x: 0,
	        y: 0,
	        width: SIZE,
	        height: SIZE
	      };
	      var itemStyle = {
	        display: layout === 'horizontal' ? 'inline-block' : 'block',
	        marginRight: 10
	      };
	      var svgStyle = {
	        display: 'inline-block',
	        verticalAlign: 'middle',
	        marginRight: 4
	      };
	      return payload.map(function (entry, i) {
	        var _classNames;

	        var finalFormatter = entry.formatter || formatter;
	        var className = classnames((_classNames = {
	          'recharts-legend-item': true
	        }, _defineProperty$2(_classNames, "legend-item-".concat(i), true), _defineProperty$2(_classNames, "inactive", entry.inactive), _classNames));

	        if (entry.type === 'none') {
	          return null;
	        }

	        return react.createElement("li", _extends$5({
	          className: className,
	          style: itemStyle,
	          key: "legend-item-".concat(i) // eslint-disable-line react/no-array-index-key

	        }, filterEventsOfChild(_this.props, entry, i)), react.createElement(Surface, {
	          width: iconSize,
	          height: iconSize,
	          viewBox: viewBox,
	          style: svgStyle
	        }, _this.renderIcon(entry)), react.createElement("span", {
	          className: "recharts-legend-item-text"
	        }, finalFormatter ? finalFormatter(entry.value, entry, i) : entry.value));
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          payload = _this$props2.payload,
	          layout = _this$props2.layout,
	          align = _this$props2.align;

	      if (!payload || !payload.length) {
	        return null;
	      }

	      var finalStyle = {
	        padding: 0,
	        margin: 0,
	        textAlign: layout === 'horizontal' ? align : 'left'
	      };
	      return react.createElement("ul", {
	        className: "recharts-default-legend",
	        style: finalStyle
	      }, this.renderItems());
	    }
	  }]);

	  return DefaultLegendContent;
	}(react_4);

	DefaultLegendContent.displayName = 'Legend';
	DefaultLegendContent.propTypes = {
	  content: propTypes.element,
	  iconSize: propTypes.number,
	  iconType: propTypes.oneOf(ICON_TYPES),
	  layout: propTypes.oneOf(['horizontal', 'vertical']),
	  align: propTypes.oneOf(['center', 'left', 'right']),
	  verticalAlign: propTypes.oneOf(['top', 'bottom', 'middle']),
	  payload: propTypes.arrayOf(propTypes.shape({
	    value: propTypes.any,
	    id: propTypes.any,
	    type: propTypes.oneOf(LEGEND_TYPES)
	  })),
	  inactiveColor: propTypes.string,
	  formatter: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onClick: propTypes.func
	};
	DefaultLegendContent.defaultProps = {
	  iconSize: 14,
	  layout: 'horizontal',
	  align: 'center',
	  verticalAlign: 'middle',
	  inactiveColor: '#ccc'
	};

	function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(source, true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$2(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$3(self); }

	function _assertThisInitialized$3(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }

	function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

	function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

	var defaultUniqBy = function defaultUniqBy(entry) {
	  return entry.value;
	};

	var getUniqPaylod = function getUniqPaylod(option, payload) {
	  if (option === true) {
	    return uniqBy_1(payload, defaultUniqBy);
	  }

	  if (isFunction_1(option)) {
	    return uniqBy_1(payload, option);
	  }

	  return payload;
	};

	var renderContent = function renderContent(content, props) {
	  if (react.isValidElement(content)) {
	    return react.cloneElement(content, props);
	  }

	  if (isFunction_1(content)) {
	    return content(props);
	  }

	  return react.createElement(DefaultLegendContent, props);
	};

	var EPS = 1;
	var ICON_TYPES$1 = LEGEND_TYPES.filter(function (type) {
	  return type !== 'none';
	});

	var Legend =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$2(Legend, _PureComponent);

	  function Legend() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$2(this, Legend);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$2(this, (_getPrototypeOf2 = _getPrototypeOf$2(Legend)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      boxWidth: -1,
	      boxHeight: -1
	    };
	    return _this;
	  }

	  _createClass$2(Legend, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateBBox();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.updateBBox();
	    }
	  }, {
	    key: "getBBox",
	    value: function getBBox() {
	      var _this$state = this.state,
	          boxWidth = _this$state.boxWidth,
	          boxHeight = _this$state.boxHeight;

	      if (boxWidth >= 0 && boxHeight >= 0) {
	        return {
	          width: boxWidth,
	          height: boxHeight
	        };
	      }

	      return null;
	    }
	  }, {
	    key: "getDefaultPosition",
	    value: function getDefaultPosition(style) {
	      var _this$props = this.props,
	          layout = _this$props.layout,
	          align = _this$props.align,
	          verticalAlign = _this$props.verticalAlign,
	          margin = _this$props.margin,
	          chartWidth = _this$props.chartWidth,
	          chartHeight = _this$props.chartHeight;
	      var hPos, vPos;

	      if (!style || (style.left === undefined || style.left === null) && (style.right === undefined || style.right === null)) {
	        if (align === 'center' && layout === 'vertical') {
	          var box = this.getBBox() || {
	            width: 0
	          };
	          hPos = {
	            left: ((chartWidth || 0) - box.width) / 2
	          };
	        } else {
	          hPos = align === 'right' ? {
	            right: margin && margin.right || 0
	          } : {
	            left: margin && margin.left || 0
	          };
	        }
	      }

	      if (!style || (style.top === undefined || style.top === null) && (style.bottom === undefined || style.bottom === null)) {
	        if (verticalAlign === 'middle') {
	          var _box = this.getBBox() || {
	            height: 0
	          };

	          vPos = {
	            top: ((chartHeight || 0) - _box.height) / 2
	          };
	        } else {
	          vPos = verticalAlign === 'bottom' ? {
	            bottom: margin && margin.bottom || 0
	          } : {
	            top: margin && margin.top || 0
	          };
	        }
	      }

	      return _objectSpread$1({}, hPos, {}, vPos);
	    }
	  }, {
	    key: "updateBBox",
	    value: function updateBBox() {
	      var _this$state2 = this.state,
	          boxWidth = _this$state2.boxWidth,
	          boxHeight = _this$state2.boxHeight;
	      var onBBoxUpdate = this.props.onBBoxUpdate;

	      if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
	        var box = this.wrapperNode.getBoundingClientRect();

	        if (Math.abs(box.width - boxWidth) > EPS || Math.abs(box.height - boxHeight) > EPS) {
	          this.setState({
	            boxWidth: box.width,
	            boxHeight: box.height
	          }, function () {
	            if (onBBoxUpdate) {
	              onBBoxUpdate(box);
	            }
	          });
	        }
	      } else if (boxWidth !== -1 || boxHeight !== -1) {
	        this.setState({
	          boxWidth: -1,
	          boxHeight: -1
	        }, function () {
	          if (onBBoxUpdate) {
	            onBBoxUpdate(null);
	          }
	        });
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          content = _this$props2.content,
	          width = _this$props2.width,
	          height = _this$props2.height,
	          wrapperStyle = _this$props2.wrapperStyle,
	          paylodUniqBy = _this$props2.paylodUniqBy,
	          payload = _this$props2.payload;

	      var outerStyle = _objectSpread$1({
	        position: 'absolute',
	        width: width || 'auto',
	        height: height || 'auto'
	      }, this.getDefaultPosition(wrapperStyle), {}, wrapperStyle);

	      return react.createElement("div", {
	        className: "recharts-legend-wrapper",
	        style: outerStyle,
	        ref: function ref(node) {
	          _this2.wrapperNode = node;
	        }
	      }, renderContent(content, _objectSpread$1({}, this.props, {
	        payload: getUniqPaylod(paylodUniqBy, payload)
	      })));
	    }
	  }], [{
	    key: "getWithHeight",
	    value: function getWithHeight(item, chartWidth) {
	      var layout = item.props.layout;

	      if (layout === 'vertical' && isNumber$3(item.props.height)) {
	        return {
	          height: item.props.height
	        };
	      }

	      if (layout === 'horizontal') {
	        return {
	          width: item.props.width || chartWidth
	        };
	      }

	      return null;
	    }
	  }]);

	  return Legend;
	}(react_4);

	Legend.displayName = 'Legend';
	Legend.propTypes = {
	  content: propTypes.oneOfType([propTypes.element, propTypes.func]),
	  wrapperStyle: propTypes.object,
	  chartWidth: propTypes.number,
	  chartHeight: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  iconSize: propTypes.number,
	  iconType: propTypes.oneOf(ICON_TYPES$1),
	  layout: propTypes.oneOf(['horizontal', 'vertical']),
	  align: propTypes.oneOf(['center', 'left', 'right']),
	  verticalAlign: propTypes.oneOf(['top', 'bottom', 'middle']),
	  margin: propTypes.shape({
	    top: propTypes.number,
	    left: propTypes.number,
	    bottom: propTypes.number,
	    right: propTypes.number
	  }),
	  payload: propTypes.arrayOf(propTypes.shape({
	    value: propTypes.any,
	    id: propTypes.any,
	    type: propTypes.oneOf(LEGEND_TYPES)
	  })),
	  paylodUniqBy: propTypes.oneOfType([propTypes.func, propTypes.bool]),
	  formatter: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onClick: propTypes.func,
	  onBBoxUpdate: propTypes.func
	};
	Legend.defaultProps = {
	  iconSize: 14,
	  layout: 'horizontal',
	  align: 'center',
	  verticalAlign: 'bottom'
	};

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return _baseIsEqual(value, other);
	}

	var isEqual_1 = isEqual;

	var performanceNow$1 = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);


	});

	var root$2 = typeof window === 'undefined' ? global$1 : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root$2['request' + suffix]
	  , caf = root$2['cancel' + suffix] || root$2['cancelRequest' + suffix];

	for(var i$1 = 0; !raf && i$1 < vendors.length; i$1++) {
	  raf = root$2[vendors[i$1] + 'Request' + suffix];
	  caf = root$2[vendors[i$1] + 'Cancel' + suffix]
	      || root$2[vendors[i$1] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id$1 = 0
	    , queue$1 = []
	    , frameDuration = 1000 / 60;

	  raf = function(callback) {
	    if(queue$1.length === 0) {
	      var _now = performanceNow$1()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue$1.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue$1.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue$1.push({
	      handle: ++id$1,
	      callback: callback,
	      cancelled: false
	    });
	    return id$1
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue$1.length; i++) {
	      if(queue$1[i].handle === handle) {
	        queue$1[i].cancelled = true;
	      }
	    }
	  };
	}

	var raf_1 = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root$2, fn)
	};
	var cancel = function() {
	  caf.apply(root$2, arguments);
	};
	var polyfill = function(object) {
	  if (!object) {
	    object = root$2;
	  }
	  object.requestAnimationFrame = raf;
	  object.cancelAnimationFrame = caf;
	};
	raf_1.cancel = cancel;
	raf_1.polyfill = polyfill;

	function setRafTimeout(callback) {
	  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var currTime = -1;

	  var shouldUpdate = function shouldUpdate(now) {
	    if (currTime < 0) {
	      currTime = now;
	    }

	    if (now - currTime > timeout) {
	      callback(now);
	      currTime = -1;
	    } else {
	      raf_1(shouldUpdate);
	    }
	  };

	  raf_1(shouldUpdate);
	}

	function _typeof$4(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

	function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray$1(arr) || _nonIterableRest(); }

	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArray$1(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
	function createAnimateManager() {
	  var currStyle = {};

	  var handleChange = function handleChange() {
	    return null;
	  };

	  var shouldStop = false;

	  var setStyle = function setStyle(_style) {
	    if (shouldStop) {
	      return;
	    }

	    if (Array.isArray(_style)) {
	      if (!_style.length) {
	        return;
	      }

	      var styles = _style;

	      var _styles = _toArray(styles),
	          curr = _styles[0],
	          restStyles = _styles.slice(1);

	      if (typeof curr === 'number') {
	        setRafTimeout(setStyle.bind(null, restStyles), curr);
	        return;
	      }

	      setStyle(curr);
	      setRafTimeout(setStyle.bind(null, restStyles));
	      return;
	    }

	    if (_typeof$4(_style) === 'object') {
	      currStyle = _style;
	      handleChange(currStyle);
	    }

	    if (typeof _style === 'function') {
	      _style();
	    }
	  };

	  return {
	    stop: function stop() {
	      shouldStop = true;
	    },
	    start: function start(style) {
	      shouldStop = false;
	      setStyle(style);
	    },
	    subscribe: function subscribe(_handleChange) {
	      handleChange = _handleChange;
	      return function () {
	        handleChange = function handleChange() {
	          return null;
	        };
	      };
	    }
	  };
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * The base implementation of methods like `_.intersection`, without support
	 * for iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arrays The arrays to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of shared values.
	 */
	function baseIntersection(arrays, iteratee, comparator) {
	  var includes = comparator ? _arrayIncludesWith : _arrayIncludes$1,
	      length = arrays[0].length,
	      othLength = arrays.length,
	      othIndex = othLength,
	      caches = Array(othLength),
	      maxLength = Infinity,
	      result = [];

	  while (othIndex--) {
	    var array = arrays[othIndex];
	    if (othIndex && iteratee) {
	      array = _arrayMap(array, _baseUnary(iteratee));
	    }
	    maxLength = nativeMin(array.length, maxLength);
	    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	      ? new _SetCache(othIndex && array)
	      : undefined;
	  }
	  array = arrays[0];

	  var index = -1,
	      seen = caches[0];

	  outer:
	  while (++index < length && result.length < maxLength) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (!(seen
	          ? _cacheHas(seen, computed)
	          : includes(result, computed, comparator)
	        )) {
	      othIndex = othLength;
	      while (--othIndex) {
	        var cache = caches[othIndex];
	        if (!(cache
	              ? _cacheHas(cache, computed)
	              : includes(arrays[othIndex], computed, comparator))
	            ) {
	          continue outer;
	        }
	      }
	      if (seen) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	var _baseIntersection = baseIntersection;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	var _apply = apply;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return _apply(func, this, otherArgs);
	  };
	}

	var _overRest = overRest;

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant$1(value) {
	  return function() {
	    return value;
	  };
	}

	var constant_1 = constant$1;

	var defineProperty$2 = (function() {
	  try {
	    var func = _getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty$4 = defineProperty$2;

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !_defineProperty$4 ? identity_1 : function(func, string) {
	  return _defineProperty$4(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant_1(string),
	    'writable': true
	  });
	};

	var _baseSetToString = baseSetToString;

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	var _shortOut = shortOut;

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = _shortOut(_baseSetToString);

	var _setToString = setToString;

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return _setToString(_overRest(func, start, identity_1), func + '');
	}

	var _baseRest = baseRest;

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike_1(value) && isArrayLike_1(value);
	}

	var isArrayLikeObject_1 = isArrayLikeObject;

	/**
	 * Casts `value` to an empty array if it's not an array like object.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array|Object} Returns the cast array-like object.
	 */
	function castArrayLikeObject(value) {
	  return isArrayLikeObject_1(value) ? value : [];
	}

	var _castArrayLikeObject = castArrayLikeObject;

	/**
	 * Creates an array of unique values that are included in all given arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. The order and references of result values are
	 * determined by the first array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of intersecting values.
	 * @example
	 *
	 * _.intersection([2, 1], [2, 3]);
	 * // => [2]
	 */
	var intersection = _baseRest(function(arrays) {
	  var mapped = _arrayMap(arrays, _castArrayLikeObject);
	  return (mapped.length && mapped[0] === arrays[0])
	    ? _baseIntersection(mapped)
	    : [];
	});

	var intersection_1 = intersection;

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$5(target, key, source[key]); }); } return target; }

	function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/* eslint no-console: 0 */
	var PREFIX_LIST = ['Webkit', 'Moz', 'O', 'ms'];
	var IN_LINE_PREFIX_LIST = ['-webkit-', '-moz-', '-o-', '-ms-'];
	var IN_COMPATIBLE_PROPERTY = ['transform', 'transformOrigin', 'transition'];
	var getIntersectionKeys = function getIntersectionKeys(preObj, nextObj) {
	  return intersection_1(Object.keys(preObj), Object.keys(nextObj));
	};
	var identity$1 = function identity(param) {
	  return param;
	};
	/*
	 * @description: convert camel case to dash case
	 * string => string
	 */

	var getDashCase = function getDashCase(name) {
	  return name.replace(/([A-Z])/g, function (v) {
	    return "-".concat(v.toLowerCase());
	  });
	};
	/*
	 * @description: add compatible style prefix
	 * (string, string) => object
	 */

	var generatePrefixStyle = function generatePrefixStyle(name, value) {
	  if (IN_COMPATIBLE_PROPERTY.indexOf(name) === -1) {
	    return _defineProperty$5({}, name, value);
	  }

	  var isTransition = name === 'transition';
	  var camelName = name.replace(/(\w)/, function (v) {
	    return v.toUpperCase();
	  });
	  var styleVal = value;
	  return PREFIX_LIST.reduce(function (result, property, i) {
	    if (isTransition) {
	      styleVal = value.replace(/(transform|transform-origin)/gim, "".concat(IN_LINE_PREFIX_LIST[i], "$1"));
	    }

	    return _objectSpread$2({}, result, _defineProperty$5({}, property + camelName, styleVal));
	  }, {});
	};
	/*
	 * @description: map object on every element in this object.
	 * (function, object) => object
	 */

	var mapObject = function mapObject(fn, obj) {
	  return Object.keys(obj).reduce(function (res, key) {
	    return _objectSpread$2({}, res, _defineProperty$5({}, key, fn(key, obj[key])));
	  }, {});
	};
	/*
	 * @description: add compatible prefix to style
	 * object => object
	 */

	var translateStyle = function translateStyle(style) {
	  return Object.keys(style).reduce(function (res, key) {
	    return _objectSpread$2({}, res, generatePrefixStyle(key, res[key]));
	  }, style);
	};
	var getTransitionVal = function getTransitionVal(props, duration, easing) {
	  return props.map(function (prop) {
	    return "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing);
	  }).join(',');
	};
	var warn = function warn(condition, format, a, b, c, d, e, f) {
	  if ( typeof console !== 'undefined' && console.warn) {
	    if (format === undefined) {
	      console.warn('LogUtils requires an error message argument');
	    }

	    if (!condition) {
	      if (format === undefined) {
	        console.warn('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	      } else {
	        var args = [a, b, c, d, e, f];
	        var argIndex = 0;
	        console.warn(format.replace(/%s/g, function () {
	          return args[argIndex++];
	        }));
	      }
	    }
	  }
	};

	function _slicedToArray(arr, i) { return _arrayWithHoles$1(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest$1(); }

	function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$1(arr) { if (Array.isArray(arr)) return arr; }

	function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$2(arr) || _nonIterableSpread$1(); }

	function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$2(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }
	var ACCURACY = 1e-4;

	var cubicBezierFactor = function cubicBezierFactor(c1, c2) {
	  return [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1];
	};

	var multyTime = function multyTime(params, t) {
	  return params.map(function (param, i) {
	    return param * Math.pow(t, i);
	  }).reduce(function (pre, curr) {
	    return pre + curr;
	  });
	};

	var cubicBezier = function cubicBezier(c1, c2) {
	  return function (t) {
	    var params = cubicBezierFactor(c1, c2);
	    return multyTime(params, t);
	  };
	};

	var derivativeCubicBezier = function derivativeCubicBezier(c1, c2) {
	  return function (t) {
	    var params = cubicBezierFactor(c1, c2);

	    var newParams = _toConsumableArray$1(params.map(function (param, i) {
	      return param * i;
	    }).slice(1)).concat([0]);

	    return multyTime(newParams, t);
	  };
	}; // calculate cubic-bezier using Newton's method


	var configBezier = function configBezier() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var x1 = args[0],
	      y1 = args[1],
	      x2 = args[2],
	      y2 = args[3];

	  if (args.length === 1) {
	    switch (args[0]) {
	      case 'linear':
	        x1 = 0.0;
	        y1 = 0.0;
	        x2 = 1.0;
	        y2 = 1.0;
	        break;

	      case 'ease':
	        x1 = 0.25;
	        y1 = 0.1;
	        x2 = 0.25;
	        y2 = 1.0;
	        break;

	      case 'ease-in':
	        x1 = 0.42;
	        y1 = 0.0;
	        x2 = 1.0;
	        y2 = 1.0;
	        break;

	      case 'ease-out':
	        x1 = 0.42;
	        y1 = 0.0;
	        x2 = 0.58;
	        y2 = 1.0;
	        break;

	      case 'ease-in-out':
	        x1 = 0.0;
	        y1 = 0.0;
	        x2 = 0.58;
	        y2 = 1.0;
	        break;

	      default:
	        {
	          var easing = args[0].split('(');

	          if (easing[0] === 'cubic-bezier' && easing[1].split(')')[0].split(',').length === 4) {
	            var _easing$1$split$0$spl = easing[1].split(')')[0].split(',').map(function (x) {
	              return parseFloat(x);
	            });

	            var _easing$1$split$0$spl2 = _slicedToArray(_easing$1$split$0$spl, 4);

	            x1 = _easing$1$split$0$spl2[0];
	            y1 = _easing$1$split$0$spl2[1];
	            x2 = _easing$1$split$0$spl2[2];
	            y2 = _easing$1$split$0$spl2[3];
	          } else {
	            warn(false, '[configBezier]: arguments should be one of ' + 'oneOf \'linear\', \'ease\', \'ease-in\', \'ease-out\', ' + '\'ease-in-out\',\'cubic-bezier(x1,y1,x2,y2)\', instead received %s', args);
	          }
	        }
	    }
	  }

	  warn([x1, x2, y1, y2].every(function (num) {
	    return typeof num === 'number' && num >= 0 && num <= 1;
	  }), '[configBezier]: arguments should be x1, y1, x2, y2 of [0, 1] instead received %s', args);
	  var curveX = cubicBezier(x1, x2);
	  var curveY = cubicBezier(y1, y2);
	  var derCurveX = derivativeCubicBezier(x1, x2);

	  var rangeValue = function rangeValue(value) {
	    if (value > 1) {
	      return 1;
	    } else if (value < 0) {
	      return 0;
	    }

	    return value;
	  };

	  var bezier = function bezier(_t) {
	    var t = _t > 1 ? 1 : _t;
	    var x = t;

	    for (var i = 0; i < 8; ++i) {
	      var evalT = curveX(x) - t;
	      var derVal = derCurveX(x);

	      if (Math.abs(evalT - t) < ACCURACY || derVal < ACCURACY) {
	        return curveY(x);
	      }

	      x = rangeValue(x - evalT / derVal);
	    }

	    return curveY(x);
	  };

	  bezier.isStepper = false;
	  return bezier;
	};
	var configSpring = function configSpring() {
	  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _config$stiff = config.stiff,
	      stiff = _config$stiff === void 0 ? 100 : _config$stiff,
	      _config$damping = config.damping,
	      damping = _config$damping === void 0 ? 8 : _config$damping,
	      _config$dt = config.dt,
	      dt = _config$dt === void 0 ? 17 : _config$dt;

	  var stepper = function stepper(currX, destX, currV) {
	    var FSpring = -(currX - destX) * stiff;
	    var FDamping = currV * damping;
	    var newV = currV + (FSpring - FDamping) * dt / 1000;
	    var newX = currV * dt / 1000 + currX;

	    if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
	      return [destX, 0];
	    }

	    return [newX, newV];
	  };

	  stepper.isStepper = true;
	  stepper.dt = dt;
	  return stepper;
	};
	var configEasing = function configEasing() {
	  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  var easing = args[0];

	  if (typeof easing === 'string') {
	    switch (easing) {
	      case 'ease':
	      case 'ease-in-out':
	      case 'ease-out':
	      case 'ease-in':
	      case 'linear':
	        return configBezier(easing);

	      case 'spring':
	        return configSpring();

	      default:
	        if (easing.split('(')[0] === 'cubic-bezier') {
	          return configBezier(easing);
	        }

	        warn(false, '[configEasing]: first argument should be one of \'ease\', \'ease-in\', ' + '\'ease-out\', \'ease-in-out\',\'cubic-bezier(x1,y1,x2,y2)\', \'linear\' and \'spring\', instead  received %s', args);
	    }
	  }

	  if (typeof easing === 'function') {
	    return easing;
	  }

	  warn(false, '[configEasing]: first argument type should be function or ' + 'string, instead received %s', args);
	  return null;
	};

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	var _createBaseFor = createBaseFor;

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = _createBaseFor();

	var _baseFor = baseFor;

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && _baseFor(object, iteratee, keys_1);
	}

	var _baseForOwn = baseForOwn;

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike_1(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	var _createBaseEach = createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = _createBaseEach(_baseForOwn);

	var _baseEach = baseEach;

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  _baseEach(collection, function(value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	var _baseFilter = baseFilter;

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray_1(collection) ? _arrayFilter : _baseFilter;
	  return func(collection, _baseIteratee(predicate));
	}

	var filter_1 = filter;

	function _toConsumableArray$2(arr) { return _arrayWithoutHoles$2(arr) || _iterableToArray$3(arr) || _nonIterableSpread$2(); }

	function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$3(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$2(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } return target; }

	function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _slicedToArray$1(arr, i) { return _arrayWithHoles$2(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$2(); }

	function _nonIterableRest$2() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$1(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$2(arr) { if (Array.isArray(arr)) return arr; }

	var alpha = function alpha(begin, end, k) {
	  return begin + (end - begin) * k;
	};

	var needContinue = function needContinue(_ref) {
	  var from = _ref.from,
	      to = _ref.to;
	  return from !== to;
	};
	/*
	 * @description: cal new from value and velocity in each stepper
	 * @return: { [styleProperty]: { from, to, velocity } }
	 */


	var calStepperVals = function calStepperVals(easing, preVals, steps) {
	  var nextStepVals = mapObject(function (key, val) {
	    if (needContinue(val)) {
	      var _easing = easing(val.from, val.to, val.velocity),
	          _easing2 = _slicedToArray$1(_easing, 2),
	          newX = _easing2[0],
	          newV = _easing2[1];

	      return _objectSpread$3({}, val, {
	        from: newX,
	        velocity: newV
	      });
	    }

	    return val;
	  }, preVals);

	  if (steps < 1) {
	    return mapObject(function (key, val) {
	      if (needContinue(val)) {
	        return _objectSpread$3({}, val, {
	          velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
	          from: alpha(val.from, nextStepVals[key].from, steps)
	        });
	      }

	      return val;
	    }, preVals);
	  }

	  return calStepperVals(easing, nextStepVals, steps - 1);
	}; // configure update function


	var configUpdate = (function (from, to, easing, duration, render) {
	  var interKeys = getIntersectionKeys(from, to);
	  var timingStyle = interKeys.reduce(function (res, key) {
	    return _objectSpread$3({}, res, _defineProperty$6({}, key, [from[key], to[key]]));
	  }, {});
	  var stepperStyle = interKeys.reduce(function (res, key) {
	    return _objectSpread$3({}, res, _defineProperty$6({}, key, {
	      from: from[key],
	      velocity: 0,
	      to: to[key]
	    }));
	  }, {});
	  var cafId = -1;
	  var preTime;
	  var beginTime;

	  var update = function update() {
	    return null;
	  };

	  var getCurrStyle = function getCurrStyle() {
	    return mapObject(function (key, val) {
	      return val.from;
	    }, stepperStyle);
	  };

	  var shouldStopAnimation = function shouldStopAnimation() {
	    return !filter_1(stepperStyle, needContinue).length;
	  }; // stepper timing function like spring


	  var stepperUpdate = function stepperUpdate(now) {
	    if (!preTime) {
	      preTime = now;
	    }

	    var deltaTime = now - preTime;
	    var steps = deltaTime / easing.dt;
	    stepperStyle = calStepperVals(easing, stepperStyle, steps); // get union set and add compatible prefix

	    render(_objectSpread$3({}, from, to, getCurrStyle()));
	    preTime = now;

	    if (!shouldStopAnimation()) {
	      cafId = raf_1(update);
	    }
	  }; // t => val timing function like cubic-bezier


	  var timingUpdate = function timingUpdate(now) {
	    if (!beginTime) {
	      beginTime = now;
	    }

	    var t = (now - beginTime) / duration;
	    var currStyle = mapObject(function (key, val) {
	      return alpha.apply(void 0, _toConsumableArray$2(val).concat([easing(t)]));
	    }, timingStyle); // get union set and add compatible prefix

	    render(_objectSpread$3({}, from, to, currStyle));

	    if (t < 1) {
	      cafId = raf_1(update);
	    } else {
	      var finalStyle = mapObject(function (key, val) {
	        return alpha.apply(void 0, _toConsumableArray$2(val).concat([easing(1)]));
	      }, timingStyle);
	      render(_objectSpread$3({}, from, to, finalStyle));
	    }
	  };

	  update = easing.isStepper ? stepperUpdate : timingUpdate; // return start animation method

	  return function () {
	    raf_1(update); // return stop animation method

	    return function () {
	      cancel(cafId);
	    };
	  };
	});

	function _typeof$5(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	function _objectWithoutProperties$3(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$4(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$4(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _toConsumableArray$3(arr) { return _arrayWithoutHoles$3(arr) || _iterableToArray$4(arr) || _nonIterableSpread$3(); }

	function _nonIterableSpread$3() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$4(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$3(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$7(target, key, source[key]); }); } return target; }

	function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$3(self, call) { if (call && (_typeof$5(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$4(self); }

	function _getPrototypeOf$3(o) { _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$3(o); }

	function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$3(subClass, superClass); }

	function _setPrototypeOf$3(o, p) { _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$3(o, p); }

	function _assertThisInitialized$4(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	var Animate =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$3(Animate, _PureComponent);

	  function Animate(props, context) {
	    var _this;

	    _classCallCheck$3(this, Animate);

	    _this = _possibleConstructorReturn$3(this, _getPrototypeOf$3(Animate).call(this, props, context));
	    var _this$props = _this.props,
	        isActive = _this$props.isActive,
	        attributeName = _this$props.attributeName,
	        from = _this$props.from,
	        to = _this$props.to,
	        steps = _this$props.steps,
	        children = _this$props.children;
	    _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized$4(_assertThisInitialized$4(_this)));
	    _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized$4(_assertThisInitialized$4(_this)));

	    if (!isActive) {
	      _this.state = {
	        style: {}
	      }; // if children is a function and animation is not active, set style to 'to'

	      if (typeof children === 'function') {
	        _this.state = {
	          style: to
	        };
	      }

	      return _possibleConstructorReturn$3(_this);
	    }

	    if (steps && steps.length) {
	      _this.state = {
	        style: steps[0].style
	      };
	    } else if (from) {
	      if (typeof children === 'function') {
	        _this.state = {
	          style: from
	        };
	        return _possibleConstructorReturn$3(_this);
	      }

	      _this.state = {
	        style: attributeName ? _defineProperty$7({}, attributeName, from) : from
	      };
	    } else {
	      _this.state = {
	        style: {}
	      };
	    }

	    return _this;
	  }

	  _createClass$3(Animate, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this$props2 = this.props,
	          isActive = _this$props2.isActive,
	          canBegin = _this$props2.canBegin;
	      this.mounted = true;

	      if (!isActive || !canBegin) {
	        return;
	      }

	      this.runAnimation(this.props);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var _this$props3 = this.props,
	          isActive = _this$props3.isActive,
	          canBegin = _this$props3.canBegin,
	          attributeName = _this$props3.attributeName,
	          shouldReAnimate = _this$props3.shouldReAnimate;

	      if (!canBegin) {
	        return;
	      }

	      if (!isActive) {
	        // eslint-disable-next-line react/no-did-update-set-state
	        this.setState({
	          style: attributeName ? _defineProperty$7({}, attributeName, this.props.to) : this.props.to
	        });
	        return;
	      }

	      if (isEqual_1(prevProps.to, this.props.to) && prevProps.canBegin && prevProps.isActive) {
	        return;
	      }

	      var isTriggered = !prevProps.canBegin || !prevProps.isActive;

	      if (this.manager) {
	        this.manager.stop();
	      }

	      if (this.stopJSAnimation) {
	        this.stopJSAnimation();
	      }

	      var from = isTriggered || shouldReAnimate ? this.props.from : prevProps.to; // eslint-disable-next-line react/no-did-update-set-state

	      this.setState({
	        style: attributeName ? _defineProperty$7({}, attributeName, from) : from
	      });
	      this.runAnimation(_objectSpread$4({}, this.props, {
	        from: from,
	        begin: 0
	      }));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.mounted = false;

	      if (this.unSubscribe) {
	        this.unSubscribe();
	      }

	      if (this.manager) {
	        this.manager.stop();
	        this.manager = null;
	      }

	      if (this.stopJSAnimation) {
	        this.stopJSAnimation();
	      }
	    }
	  }, {
	    key: "runJSAnimation",
	    value: function runJSAnimation(props) {
	      var _this2 = this;

	      var from = props.from,
	          to = props.to,
	          duration = props.duration,
	          easing = props.easing,
	          begin = props.begin,
	          onAnimationEnd = props.onAnimationEnd,
	          onAnimationStart = props.onAnimationStart;
	      var startAnimation = configUpdate(from, to, configEasing(easing), duration, this.changeStyle);

	      var finalStartAnimation = function finalStartAnimation() {
	        _this2.stopJSAnimation = startAnimation();
	      };

	      this.manager.start([onAnimationStart, begin, finalStartAnimation, duration, onAnimationEnd]);
	    }
	  }, {
	    key: "runStepAnimation",
	    value: function runStepAnimation(props) {
	      var _this3 = this;

	      var steps = props.steps,
	          begin = props.begin,
	          onAnimationStart = props.onAnimationStart;
	      var _steps$ = steps[0],
	          initialStyle = _steps$.style,
	          _steps$$duration = _steps$.duration,
	          initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration;

	      var addStyle = function addStyle(sequence, nextItem, index) {
	        if (index === 0) {
	          return sequence;
	        }

	        var duration = nextItem.duration,
	            _nextItem$easing = nextItem.easing,
	            easing = _nextItem$easing === void 0 ? 'ease' : _nextItem$easing,
	            style = nextItem.style,
	            nextProperties = nextItem.properties,
	            onAnimationEnd = nextItem.onAnimationEnd;
	        var preItem = index > 0 ? steps[index - 1] : nextItem;
	        var properties = nextProperties || Object.keys(style);

	        if (typeof easing === 'function' || easing === 'spring') {
	          return _toConsumableArray$3(sequence).concat([_this3.runJSAnimation.bind(_this3, {
	            from: preItem.style,
	            to: style,
	            duration: duration,
	            easing: easing
	          }), duration]);
	        }

	        var transition = getTransitionVal(properties, duration, easing);

	        var newStyle = _objectSpread$4({}, preItem.style, style, {
	          transition: transition
	        });

	        return _toConsumableArray$3(sequence).concat([newStyle, duration, onAnimationEnd]).filter(identity$1);
	      };

	      return this.manager.start([onAnimationStart].concat(_toConsumableArray$3(steps.reduce(addStyle, [initialStyle, Math.max(initialTime, begin)])), [props.onAnimationEnd]));
	    }
	  }, {
	    key: "runAnimation",
	    value: function runAnimation(props) {
	      if (!this.manager) {
	        this.manager = createAnimateManager();
	      }

	      var begin = props.begin,
	          duration = props.duration,
	          attributeName = props.attributeName,
	          propsTo = props.to,
	          easing = props.easing,
	          onAnimationStart = props.onAnimationStart,
	          onAnimationEnd = props.onAnimationEnd,
	          steps = props.steps,
	          children = props.children;
	      var manager = this.manager;
	      this.unSubscribe = manager.subscribe(this.handleStyleChange);

	      if (typeof easing === 'function' || typeof children === 'function' || easing === 'spring') {
	        this.runJSAnimation(props);
	        return;
	      }

	      if (steps.length > 1) {
	        this.runStepAnimation(props);
	        return;
	      }

	      var to = attributeName ? _defineProperty$7({}, attributeName, propsTo) : propsTo;
	      var transition = getTransitionVal(Object.keys(to), duration, easing);
	      manager.start([onAnimationStart, begin, _objectSpread$4({}, to, {
	        transition: transition
	      }), duration, onAnimationEnd]);
	    }
	  }, {
	    key: "handleStyleChange",
	    value: function handleStyleChange(style) {
	      this.changeStyle(style);
	    }
	  }, {
	    key: "changeStyle",
	    value: function changeStyle(style) {
	      if (this.mounted) {
	        this.setState({
	          style: style
	        });
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          children = _this$props4.children,
	          begin = _this$props4.begin,
	          duration = _this$props4.duration,
	          attributeName = _this$props4.attributeName,
	          easing = _this$props4.easing,
	          isActive = _this$props4.isActive,
	          steps = _this$props4.steps,
	          from = _this$props4.from,
	          to = _this$props4.to,
	          canBegin = _this$props4.canBegin,
	          onAnimationEnd = _this$props4.onAnimationEnd,
	          shouldReAnimate = _this$props4.shouldReAnimate,
	          onAnimationReStart = _this$props4.onAnimationReStart,
	          others = _objectWithoutProperties$3(_this$props4, ["children", "begin", "duration", "attributeName", "easing", "isActive", "steps", "from", "to", "canBegin", "onAnimationEnd", "shouldReAnimate", "onAnimationReStart"]);

	      var count = react_1.count(children);
	      var stateStyle = translateStyle(this.state.style);

	      if (typeof children === 'function') {
	        return children(stateStyle);
	      }

	      if (!isActive || count === 0) {
	        return children;
	      }

	      var cloneContainer = function cloneContainer(container) {
	        var _container$props = container.props,
	            _container$props$styl = _container$props.style,
	            style = _container$props$styl === void 0 ? {} : _container$props$styl,
	            className = _container$props.className;
	        var res = react_24(container, _objectSpread$4({}, others, {
	          style: _objectSpread$4({}, style, stateStyle),
	          className: className
	        }));
	        return res;
	      };

	      if (count === 1) {
	        return cloneContainer(react_1.only(children));
	      }

	      return react.createElement("div", null, react_1.map(children, function (child) {
	        return cloneContainer(child);
	      }));
	    }
	  }]);

	  return Animate;
	}(react_4);

	Animate.displayName = 'Animate';
	Animate.propTypes = {
	  from: propTypes.oneOfType([propTypes.object, propTypes.string]),
	  to: propTypes.oneOfType([propTypes.object, propTypes.string]),
	  attributeName: propTypes.string,
	  // animation duration
	  duration: propTypes.number,
	  begin: propTypes.number,
	  easing: propTypes.oneOfType([propTypes.string, propTypes.func]),
	  steps: propTypes.arrayOf(propTypes.shape({
	    duration: propTypes.number.isRequired,
	    style: propTypes.object.isRequired,
	    easing: propTypes.oneOfType([propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']), propTypes.func]),
	    // transition css properties(dash case), optional
	    properties: propTypes.arrayOf('string'),
	    onAnimationEnd: propTypes.func
	  })),
	  children: propTypes.oneOfType([propTypes.node, propTypes.func]),
	  isActive: propTypes.bool,
	  canBegin: propTypes.bool,
	  onAnimationEnd: propTypes.func,
	  // decide if it should reanimate with initial from style when props change
	  shouldReAnimate: propTypes.bool,
	  onAnimationStart: propTypes.func,
	  onAnimationReStart: propTypes.func
	};
	Animate.defaultProps = {
	  begin: 0,
	  duration: 1000,
	  from: '',
	  to: '',
	  attributeName: '',
	  easing: 'ease',
	  isActive: true,
	  canBegin: true,
	  steps: [],
	  onAnimationEnd: function onAnimationEnd() {},
	  onAnimationStart: function onAnimationStart() {}
	};

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	unwrapExports(interopRequireDefault);

	var hasClass_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = hasClass;

	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	module.exports = exports["default"];
	});

	unwrapExports(hasClass_1);

	var addClass_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = addClass;

	var _hasClass = interopRequireDefault(hasClass_1);

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
	}

	module.exports = exports["default"];
	});

	unwrapExports(addClass_1);

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	var removeClass = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}

	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}

	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}

	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;

	function polyfill$1(Component) {
	  var prototype = Component.prototype;

	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }

	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }

	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';

	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }

	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }

	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }

	    prototype.componentWillUpdate = componentWillUpdate;

	    var componentDidUpdate = prototype.componentDidUpdate;

	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;

	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }

	  return Component;
	}

	var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		polyfill: polyfill$1
	});

	var PropTypes = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.classNamesShape = exports.timeoutsShape = void 0;

	var _propTypes = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var timeoutsShape =  _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	  enter: _propTypes.default.number,
	  exit: _propTypes.default.number,
	  appear: _propTypes.default.number
	}).isRequired]) ;
	exports.timeoutsShape = timeoutsShape;
	var classNamesShape =  _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  active: _propTypes.default.string
	}), _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  enterDone: _propTypes.default.string,
	  enterActive: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  exitDone: _propTypes.default.string,
	  exitActive: _propTypes.default.string
	})]) ;
	exports.classNamesShape = classNamesShape;
	});

	unwrapExports(PropTypes);
	var PropTypes_1 = PropTypes.classNamesShape;
	var PropTypes_2 = PropTypes.timeoutsShape;

	var Transition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

	var PropTypes$1 = _interopRequireWildcard(propTypes);

	var _react = _interopRequireDefault(react);

	var _reactDom = _interopRequireDefault(reactDom);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var UNMOUNTED = 'unmounted';
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 'exited';
	exports.EXITED = EXITED;
	var ENTERING = 'entering';
	exports.ENTERING = ENTERING;
	var ENTERED = 'entered';
	exports.ENTERED = ENTERED;
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 0 },
	 *   entered:  { opacity: 1 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	exports.EXITING = EXITING;

	var Transition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  var _proto = Transition.prototype;

	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: null // allows for nested Transitions

	    };
	  };

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  }; // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }


	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      var node = _reactDom.default.findDOMNode(this);

	      if (nextStatus === ENTERING) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }

	    this.props.onEnter(node, appearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(node, appearing);

	      _this2.onTransitionEnd(node, enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit(node) {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

	    if (!exit) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }

	    this.props.onExit(node);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      this.props.addEndListener(node, this.nextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;

	    if (typeof children === 'function') {
	      return children(status, childProps);
	    }

	    var child = _react.default.Children.only(children);

	    return _react.default.cloneElement(child, childProps);
	  };

	  return Transition;
	}(_react.default.Component);

	Transition.contextTypes = {
	  transitionGroup: PropTypes$1.object
	};
	Transition.childContextTypes = {
	  transitionGroup: function transitionGroup() {}
	};
	Transition.propTypes =  {
	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes$1.oneOfType([PropTypes$1.func.isRequired, PropTypes$1.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes$1.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes$1.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes$1.bool,

	  /**
	   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
	   * If you want to transition on the first mount set `appear` to `true`, and the
	   * component will transition in as soon as the `<Transition>` mounts.
	   *
	   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
	   */
	  appear: PropTypes$1.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes$1.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes$1.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes$1.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes$1.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes$1.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes$1.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes$1.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes$1.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes$1.func // Name the function so it is clearer in the documentation

	} ;

	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = 0;
	Transition.EXITED = 1;
	Transition.ENTERING = 2;
	Transition.ENTERED = 3;
	Transition.EXITING = 4;

	var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);

	exports.default = _default;
	});

	unwrapExports(Transition_1);
	var Transition_2 = Transition_1.EXITING;
	var Transition_3 = Transition_1.ENTERED;
	var Transition_4 = Transition_1.ENTERING;
	var Transition_5 = Transition_1.EXITED;
	var Transition_6 = Transition_1.UNMOUNTED;

	var CSSTransition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var PropTypes$1 = _interopRequireWildcard(propTypes);

	var _addClass = _interopRequireDefault(addClass_1);

	var _removeClass = _interopRequireDefault(removeClass);

	var _react = _interopRequireDefault(react);

	var _Transition = _interopRequireDefault(Transition_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var addClass = function addClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _addClass.default)(node, c);
	  });
	};

	var removeClass$1 = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _removeClass.default)(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
	 * using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity: 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**.
	 */


	var CSSTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

	    _this.onEnter = function (node, appearing) {
	      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          className = _this$getClassNames.className;

	      _this.removeClasses(node, 'exit');

	      addClass(node, className);

	      if (_this.props.onEnter) {
	        _this.props.onEnter(node, appearing);
	      }
	    };

	    _this.onEntering = function (node, appearing) {
	      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          activeClassName = _this$getClassNames2.activeClassName;

	      _this.reflowAndAddClass(node, activeClassName);

	      if (_this.props.onEntering) {
	        _this.props.onEntering(node, appearing);
	      }
	    };

	    _this.onEntered = function (node, appearing) {
	      var appearClassName = _this.getClassNames('appear').doneClassName;

	      var enterClassName = _this.getClassNames('enter').doneClassName;

	      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

	      _this.removeClasses(node, appearing ? 'appear' : 'enter');

	      addClass(node, doneClassName);

	      if (_this.props.onEntered) {
	        _this.props.onEntered(node, appearing);
	      }
	    };

	    _this.onExit = function (node) {
	      var _this$getClassNames3 = _this.getClassNames('exit'),
	          className = _this$getClassNames3.className;

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      addClass(node, className);

	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    };

	    _this.onExiting = function (node) {
	      var _this$getClassNames4 = _this.getClassNames('exit'),
	          activeClassName = _this$getClassNames4.activeClassName;

	      _this.reflowAndAddClass(node, activeClassName);

	      if (_this.props.onExiting) {
	        _this.props.onExiting(node);
	      }
	    };

	    _this.onExited = function (node) {
	      var _this$getClassNames5 = _this.getClassNames('exit'),
	          doneClassName = _this$getClassNames5.doneClassName;

	      _this.removeClasses(node, 'exit');

	      addClass(node, doneClassName);

	      if (_this.props.onExited) {
	        _this.props.onExited(node);
	      }
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
	      var className = isStringClassNames ? prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
	      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
	      return {
	        className: className,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$getClassNames6 = this.getClassNames(type),
	        className = _this$getClassNames6.className,
	        activeClassName = _this$getClassNames6.activeClassName,
	        doneClassName = _this$getClassNames6.doneClassName;

	    className && removeClass$1(node, className);
	    activeClassName && removeClass$1(node, activeClassName);
	    doneClassName && removeClass$1(node, doneClassName);
	  };

	  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
	    // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.
	    if (className) {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	      /* eslint-enable no-unused-expressions */

	      addClass(node, className);
	    }
	  };

	  _proto.render = function render() {
	    var props = _extends({}, this.props);

	    delete props.classNames;
	    return _react.default.createElement(_Transition.default, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(_react.default.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes =  _extends({}, _Transition.default.propTypes, {
	  /**
	   * The animation classNames applied to the component as it enters, exits or
	   * has finished the transition. A single name can be provided and it will be
	   * suffixed for each stage: e.g.
	   *
	   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
	   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
	   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
	   *
	   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
	   * This allows you to define different behavior for when appearing is done and
	   * when regular entering is done, using selectors like
	   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
	   * epic entrance animation when element first appears in the DOM using
	   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   * simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: PropTypes.classNamesShape,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: PropTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: PropTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: PropTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: PropTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: PropTypes$1.func
	}) ;
	var _default = CSSTransition;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(CSSTransition_1);

	var ChildMapping = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	exports.getInitialChildMapping = getInitialChildMapping;
	exports.getNextChildMapping = getNextChildMapping;



	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, react.isValidElement)(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */


	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return (0, react.cloneElement)(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}

	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!(0, react.isValidElement)(child)) return;
	    var hasPrev = key in prevChildMapping;
	    var hasNext = key in nextChildMapping;
	    var prevChild = prevChildMapping[key];
	    var isLeaving = (0, react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = (0, react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = (0, react.cloneElement)(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && (0, react.isValidElement)(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = (0, react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}
	});

	unwrapExports(ChildMapping);
	var ChildMapping_1 = ChildMapping.getChildMapping;
	var ChildMapping_2 = ChildMapping.mergeChildMappings;
	var ChildMapping_3 = ChildMapping.getInitialChildMapping;
	var ChildMapping_4 = ChildMapping.getNextChildMapping;

	var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(propTypes);

	var _react = _interopRequireDefault(react);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	  /**
	   * The `<TransitionGroup>` component manages a set of transition components
	   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	   * components, `<TransitionGroup>` is a state machine for managing the mounting
	   * and unmounting of components over time.
	   *
	   * Consider the example below. As items are removed or added to the TodoList the
	   * `in` prop is toggled automatically by the `<TransitionGroup>`.
	   *
	   * Note that `<TransitionGroup>`  does not define any animation behavior!
	   * Exactly _how_ a list item animates is up to the individual transition
	   * component. This means you can mix and match animations across different list
	   * items.
	   */

	};

	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: {
	        isMounting: !this.appeared
	      }
	    };
	  };

	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	    this.mounted = true;
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  };

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return children;
	    }

	    return _react.default.createElement(Component, props, children);
	  };

	  return TransitionGroup;
	}(_react.default.Component);

	TransitionGroup.childContextTypes = {
	  transitionGroup: _propTypes.default.object.isRequired
	};
	TransitionGroup.propTypes =  {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: _propTypes.default.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: _propTypes.default.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes.default.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: _propTypes.default.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes.default.func
	} ;
	TransitionGroup.defaultProps = defaultProps;

	var _default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup);

	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(TransitionGroup_1);

	var ReplaceTransition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _propTypes = _interopRequireDefault(propTypes);

	var _react = _interopRequireDefault(react);



	var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */
	var ReplaceTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);

	  function ReplaceTransition() {
	    var _this;

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      return _this.handleLifecycle('onEnter', 0, args);
	    };

	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      return _this.handleLifecycle('onEntering', 0, args);
	    };

	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      return _this.handleLifecycle('onEntered', 0, args);
	    };

	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }

	      return _this.handleLifecycle('onExit', 1, args);
	    };

	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }

	      return _this.handleLifecycle('onExiting', 1, args);
	    };

	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }

	      return _this.handleLifecycle('onExited', 1, args);
	    };

	    return _this;
	  }

	  var _proto = ReplaceTransition.prototype;

	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;

	    var children = this.props.children;

	    var child = _react.default.Children.toArray(children)[idx];

	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
	    if (this.props[handler]) this.props[handler]((0, reactDom.findDOMNode)(this));
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

	    var _React$Children$toArr = _react.default.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];

	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : _react.default.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };

	  return ReplaceTransition;
	}(_react.default.Component);

	ReplaceTransition.propTypes =  {
	  in: _propTypes.default.bool.isRequired,
	  children: function children(props, propName) {
	    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} ;
	var _default = ReplaceTransition;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(ReplaceTransition_1);

	var reactTransitionGroup = createCommonjsModule(function (module) {

	var _CSSTransition = _interopRequireDefault(CSSTransition_1);

	var _ReplaceTransition = _interopRequireDefault(ReplaceTransition_1);

	var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);

	var _Transition = _interopRequireDefault(Transition_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = {
	  Transition: _Transition.default,
	  TransitionGroup: _TransitionGroup.default,
	  ReplaceTransition: _ReplaceTransition.default,
	  CSSTransition: _CSSTransition.default
	};
	});

	unwrapExports(reactTransitionGroup);
	var reactTransitionGroup_1 = reactTransitionGroup.Transition;
	var reactTransitionGroup_2 = reactTransitionGroup.TransitionGroup;
	var reactTransitionGroup_3 = reactTransitionGroup.ReplaceTransition;
	var reactTransitionGroup_4 = reactTransitionGroup.CSSTransition;

	function _typeof$6(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }

	function _extends$6() { _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }

	function _objectWithoutProperties$4(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$5(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$5(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$8(target, key, source[key]); }); } return target; }

	function _defineProperty$8(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$4(self, call) { if (call && (_typeof$6(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$5(self); }

	function _assertThisInitialized$5(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$4(o) { _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$4(o); }

	function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$4(subClass, superClass); }

	function _setPrototypeOf$4(o, p) { _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$4(o, p); }

	var parseDurationOfSingleTransition = function parseDurationOfSingleTransition() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var steps = options.steps,
	      duration = options.duration;

	  if (steps && steps.length) {
	    return steps.reduce(function (result, entry) {
	      return result + (isNumber_1(entry.duration) && entry.duration > 0 ? entry.duration : 0);
	    }, 0);
	  }

	  if (isNumber_1(duration)) {
	    return duration;
	  }

	  return 0;
	};

	var AnimateGroupChild =
	/*#__PURE__*/
	function (_Component) {
	  _inherits$4(AnimateGroupChild, _Component);

	  function AnimateGroupChild() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$4(this, AnimateGroupChild);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$4(this, (_getPrototypeOf2 = _getPrototypeOf$4(AnimateGroupChild)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isActive: false
	    };

	    _this.handleEnter = function (node, isAppearing) {
	      var _this$props = _this.props,
	          appearOptions = _this$props.appearOptions,
	          enterOptions = _this$props.enterOptions;

	      _this.handleStyleActive(isAppearing ? appearOptions : enterOptions);
	    };

	    _this.handleExit = function () {
	      _this.handleStyleActive(_this.props.leaveOptions);
	    };

	    return _this;
	  }

	  _createClass$4(AnimateGroupChild, [{
	    key: "handleStyleActive",
	    value: function handleStyleActive(style) {
	      if (style) {
	        var onAnimationEnd = style.onAnimationEnd ? function () {
	          style.onAnimationEnd();
	        } : null;
	        this.setState(_objectSpread$5({}, style, {
	          onAnimationEnd: onAnimationEnd,
	          isActive: true
	        }));
	      }
	    }
	  }, {
	    key: "parseTimeout",
	    value: function parseTimeout() {
	      var _this$props2 = this.props,
	          appearOptions = _this$props2.appearOptions,
	          enterOptions = _this$props2.enterOptions,
	          leaveOptions = _this$props2.leaveOptions;
	      return parseDurationOfSingleTransition(appearOptions) + parseDurationOfSingleTransition(enterOptions) + parseDurationOfSingleTransition(leaveOptions);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props3 = this.props,
	          children = _this$props3.children,
	          appearOptions = _this$props3.appearOptions,
	          enterOptions = _this$props3.enterOptions,
	          leaveOptions = _this$props3.leaveOptions,
	          props = _objectWithoutProperties$4(_this$props3, ["children", "appearOptions", "enterOptions", "leaveOptions"]);

	      return react.createElement(reactTransitionGroup_1, _extends$6({}, props, {
	        onEnter: this.handleEnter,
	        onExit: this.handleExit,
	        timeout: this.parseTimeout()
	      }), function () {
	        return react.createElement(Animate, _this2.state, react_1.only(children));
	      });
	    }
	  }]);

	  return AnimateGroupChild;
	}(react_3);

	AnimateGroupChild.propTypes = {
	  appearOptions: propTypes.object,
	  enterOptions: propTypes.object,
	  leaveOptions: propTypes.object,
	  children: propTypes.element
	};

	function AnimateGroup(props) {
	  var component = props.component,
	      children = props.children,
	      appear = props.appear,
	      enter = props.enter,
	      leave = props.leave;
	  return react.createElement(reactTransitionGroup_2, {
	    component: component
	  }, react_1.map(children, function (child, index) {
	    return react.createElement(AnimateGroupChild, {
	      appearOptions: appear,
	      enterOptions: enter,
	      leaveOptions: leave,
	      key: "child-".concat(index)
	    }, child);
	  }));
	}

	AnimateGroup.propTypes = {
	  appear: propTypes.object,
	  enter: propTypes.object,
	  leave: propTypes.object,
	  children: propTypes.oneOfType([propTypes.array, propTypes.element]),
	  component: propTypes.any
	};
	AnimateGroup.defaultProps = {
	  component: 'span'
	};

	/** Built-in value references. */
	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray_1(value) || isArguments_1(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	var _isFlattenable = isFlattenable;

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = _isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        _arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	var _baseFlatten = baseFlatten;

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike_1(collection) ? Array(collection.length) : [];

	  _baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	var _baseMap = baseMap;

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	var _baseSortBy = baseSortBy;

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol_1(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol_1(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	var _compareAscending = compareAscending;

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = _compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	var _compareMultiple = compareMultiple;

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = _arrayMap(iteratees.length ? iteratees : [identity_1], _baseUnary(_baseIteratee));

	  var result = _baseMap(collection, function(value, key, collection) {
	    var criteria = _arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return _baseSortBy(result, function(object, other) {
	    return _compareMultiple(object, other, orders);
	  });
	}

	var _baseOrderBy = baseOrderBy;

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject_1(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike_1(object) && _isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq_1(object[index], value);
	  }
	  return false;
	}

	var _isIterateeCall = isIterateeCall;

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */
	var sortBy = _baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && _isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && _isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return _baseOrderBy(collection, _baseFlatten(iteratees, 1), []);
	});

	var sortBy_1 = sortBy;

	function _typeof$7(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }

	function _slicedToArray$2(arr, i) { return _arrayWithHoles$3(arr) || _iterableToArrayLimit$2(arr, i) || _nonIterableRest$3(); }

	function _nonIterableRest$3() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$2(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$3(arr) { if (Array.isArray(arr)) return arr; }

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(source, true).forEach(function (key) { _defineProperty$9(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$9(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$5(self, call) { if (call && (_typeof$7(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$6(self); }

	function _assertThisInitialized$6(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$5(o) { _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$5(o); }

	function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$5(subClass, superClass); }

	function _setPrototypeOf$5(o, p) { _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$5(o, p); }

	var defaultFormatter = function defaultFormatter(value) {
	  return isArray_1(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(' ~ ') : value;
	};

	var DefaultTooltipContent =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$5(DefaultTooltipContent, _PureComponent);

	  function DefaultTooltipContent() {
	    _classCallCheck$5(this, DefaultTooltipContent);

	    return _possibleConstructorReturn$5(this, _getPrototypeOf$5(DefaultTooltipContent).apply(this, arguments));
	  }

	  _createClass$5(DefaultTooltipContent, [{
	    key: "renderContent",
	    value: function renderContent() {
	      var _this$props = this.props,
	          payload = _this$props.payload,
	          separator = _this$props.separator,
	          formatter = _this$props.formatter,
	          itemStyle = _this$props.itemStyle,
	          itemSorter = _this$props.itemSorter;

	      if (payload && payload.length) {
	        var listStyle = {
	          padding: 0,
	          margin: 0
	        };
	        var items = (itemSorter ? sortBy_1(payload, itemSorter) : payload).map(function (entry, i) {
	          if (entry.type === 'none') {
	            return null;
	          }

	          var finalItemStyle = _objectSpread$6({
	            display: 'block',
	            paddingTop: 4,
	            paddingBottom: 4,
	            color: entry.color || '#000'
	          }, itemStyle);

	          var finalFormatter = entry.formatter || formatter || defaultFormatter;
	          var name = entry.name,
	              value = entry.value;

	          if (finalFormatter) {
	            var formatted = finalFormatter(value, name, entry, i);

	            if (Array.isArray(formatted)) {
	              var _formatted = _slicedToArray$2(formatted, 2);

	              value = _formatted[0];
	              name = _formatted[1];
	            } else {
	              value = formatted;
	            }
	          }

	          return (// eslint-disable-next-line react/no-array-index-key
	            react.createElement("li", {
	              className: "recharts-tooltip-item",
	              key: "tooltip-item-".concat(i),
	              style: finalItemStyle
	            }, isNumOrStr(name) ? react.createElement("span", {
	              className: "recharts-tooltip-item-name"
	            }, name) : null, isNumOrStr(name) ? react.createElement("span", {
	              className: "recharts-tooltip-item-separator"
	            }, separator) : null, react.createElement("span", {
	              className: "recharts-tooltip-item-value"
	            }, value), react.createElement("span", {
	              className: "recharts-tooltip-item-unit"
	            }, entry.unit || ''))
	          );
	        });
	        return react.createElement("ul", {
	          className: "recharts-tooltip-item-list",
	          style: listStyle
	        }, items);
	      }

	      return null;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          wrapperClassName = _this$props2.wrapperClassName,
	          contentStyle = _this$props2.contentStyle,
	          labelClassName = _this$props2.labelClassName,
	          labelStyle = _this$props2.labelStyle,
	          label = _this$props2.label,
	          labelFormatter = _this$props2.labelFormatter;

	      var finalStyle = _objectSpread$6({
	        margin: 0,
	        padding: 10,
	        backgroundColor: '#fff',
	        border: '1px solid #ccc',
	        whiteSpace: 'nowrap'
	      }, contentStyle);

	      var finalLabelStyle = _objectSpread$6({
	        margin: 0
	      }, labelStyle);

	      var hasLabel = isNumOrStr(label);
	      var finalLabel = hasLabel ? label : '';
	      var wrapperCN = classnames('recharts-default-tooltip', wrapperClassName);
	      var labelCN = classnames('recharts-tooltip-label', labelClassName);

	      if (hasLabel && labelFormatter) {
	        finalLabel = labelFormatter(label);
	      }

	      return react.createElement("div", {
	        className: wrapperCN,
	        style: finalStyle
	      }, react.createElement("p", {
	        className: labelCN,
	        style: finalLabelStyle
	      }, finalLabel), this.renderContent());
	    }
	  }]);

	  return DefaultTooltipContent;
	}(react_4);

	DefaultTooltipContent.displayName = 'DefaultTooltipContent';
	DefaultTooltipContent.propTypes = {
	  separator: propTypes.string,
	  wrapperClassName: propTypes.string,
	  labelClassName: propTypes.string,
	  formatter: propTypes.func,
	  contentStyle: propTypes.object,
	  itemStyle: propTypes.object,
	  labelStyle: propTypes.object,
	  labelFormatter: propTypes.func,
	  label: propTypes.any,
	  payload: propTypes.arrayOf(propTypes.shape({
	    name: propTypes.any,
	    value: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.array]),
	    unit: propTypes.any
	  })),
	  itemSorter: propTypes.func
	};
	DefaultTooltipContent.defaultProps = {
	  separator: ' : ',
	  contentStyle: {},
	  itemStyle: {},
	  labelStyle: {}
	};

	function _typeof$8(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(source, true).forEach(function (key) { _defineProperty$a(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$a(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$6(self, call) { if (call && (_typeof$8(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$7(self); }

	function _assertThisInitialized$7(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$6(o) { _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$6(o); }

	function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$6(subClass, superClass); }

	function _setPrototypeOf$6(o, p) { _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$6(o, p); }
	var CLS_PREFIX = 'recharts-tooltip-wrapper';
	var EPS$1 = 1;

	var defaultUniqBy$1 = function defaultUniqBy(entry) {
	  return entry.dataKey;
	};

	var getUniqPaylod$1 = function getUniqPaylod(option, payload) {
	  if (option === true) {
	    return uniqBy_1(payload, defaultUniqBy$1);
	  }

	  if (isFunction_1(option)) {
	    return uniqBy_1(payload, option);
	  }

	  return payload;
	};

	var propTypes$3 = {
	  allowEscapeViewBox: propTypes.shape({
	    x: propTypes["boolean"],
	    y: propTypes["boolean"]
	  }),
	  content: propTypes.oneOfType([propTypes.element, propTypes.func]),
	  viewBox: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number
	  }),
	  active: propTypes.bool,
	  separator: propTypes.string,
	  formatter: propTypes.func,
	  offset: propTypes.number,
	  itemStyle: propTypes.object,
	  labelStyle: propTypes.object,
	  wrapperStyle: propTypes.object,
	  contentStyle: propTypes.object,
	  cursor: propTypes.oneOfType([propTypes.bool, propTypes.element, propTypes.object]),
	  coordinate: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number
	  }),
	  position: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number
	  }),
	  label: propTypes.any,
	  payload: propTypes.arrayOf(propTypes.shape({
	    name: propTypes.any,
	    value: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.array]),
	    unit: propTypes.any,
	    type: propTypes.oneOf(TOOLTIP_TYPES)
	  })),
	  paylodUniqBy: propTypes.oneOfType([propTypes.func, propTypes.bool]),
	  isAnimationActive: propTypes.bool,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
	  itemSorter: propTypes.func,
	  filterNull: propTypes.bool,
	  useTranslate3d: propTypes.bool
	};
	var defaultProps = {
	  active: false,
	  allowEscapeViewBox: {
	    x: false,
	    y: false
	  },
	  offset: 10,
	  viewBox: {
	    x1: 0,
	    x2: 0,
	    y1: 0,
	    y2: 0
	  },
	  coordinate: {
	    x: 0,
	    y: 0
	  },
	  cursorStyle: {},
	  separator: ' : ',
	  wrapperStyle: {},
	  contentStyle: {},
	  itemStyle: {},
	  labelStyle: {},
	  cursor: true,
	  isAnimationActive: !isSsr(),
	  animationEasing: 'ease',
	  animationDuration: 400,
	  filterNull: true,
	  useTranslate3d: false
	};

	var renderContent$1 = function renderContent(content, props) {
	  if (react.isValidElement(content)) {
	    return react.cloneElement(content, props);
	  }

	  if (isFunction_1(content)) {
	    return content(props);
	  }

	  return react.createElement(DefaultTooltipContent, props);
	};

	var Tooltip =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$6(Tooltip, _PureComponent);

	  function Tooltip() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$6(this, Tooltip);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$6(this, (_getPrototypeOf2 = _getPrototypeOf$6(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      boxWidth: -1,
	      boxHeight: -1
	    };

	    _this.getTranslate = function (_ref) {
	      var key = _ref.key,
	          tooltipDimension = _ref.tooltipDimension,
	          viewBoxDimension = _ref.viewBoxDimension;
	      var _this$props = _this.props,
	          allowEscapeViewBox = _this$props.allowEscapeViewBox,
	          coordinate = _this$props.coordinate,
	          offset = _this$props.offset,
	          position = _this$props.position,
	          viewBox = _this$props.viewBox;

	      if (position && isNumber$3(position[key])) {
	        return position[key];
	      }

	      var restricted = coordinate[key] - tooltipDimension - offset;
	      var unrestricted = coordinate[key] + offset;

	      if (allowEscapeViewBox[key]) {
	        return unrestricted;
	      }

	      var tooltipBoundary = coordinate[key] + tooltipDimension + offset;
	      var viewBoxBoundary = viewBox[key] + viewBoxDimension;

	      if (tooltipBoundary > viewBoxBoundary) {
	        return Math.max(restricted, viewBox[key]);
	      }

	      return Math.max(unrestricted, viewBox[key]);
	    };

	    return _this;
	  }

	  _createClass$6(Tooltip, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateBBox();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.updateBBox();
	    }
	  }, {
	    key: "updateBBox",
	    value: function updateBBox() {
	      var _this$state = this.state,
	          boxWidth = _this$state.boxWidth,
	          boxHeight = _this$state.boxHeight;

	      if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
	        var box = this.wrapperNode.getBoundingClientRect();

	        if (Math.abs(box.width - boxWidth) > EPS$1 || Math.abs(box.height - boxHeight) > EPS$1) {
	          this.setState({
	            boxWidth: box.width,
	            boxHeight: box.height
	          });
	        }
	      } else if (boxWidth !== -1 || boxHeight !== -1) {
	        this.setState({
	          boxWidth: -1,
	          boxHeight: -1
	        });
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _classNames,
	          _this2 = this;

	      var _this$props2 = this.props,
	          payload = _this$props2.payload,
	          isAnimationActive = _this$props2.isAnimationActive,
	          animationDuration = _this$props2.animationDuration,
	          animationEasing = _this$props2.animationEasing,
	          filterNull = _this$props2.filterNull,
	          paylodUniqBy = _this$props2.paylodUniqBy;
	      var finalPayload = getUniqPaylod$1(paylodUniqBy, filterNull && payload && payload.length ? payload.filter(function (entry) {
	        return !isNil_1(entry.value);
	      }) : payload);
	      var hasPayload = finalPayload && finalPayload.length;
	      var _this$props3 = this.props,
	          content = _this$props3.content,
	          viewBox = _this$props3.viewBox,
	          coordinate = _this$props3.coordinate,
	          position = _this$props3.position,
	          active = _this$props3.active,
	          wrapperStyle = _this$props3.wrapperStyle;

	      var outerStyle = _objectSpread$7({
	        pointerEvents: 'none',
	        visibility: active && hasPayload ? 'visible' : 'hidden',
	        position: 'absolute',
	        top: 0
	      }, wrapperStyle);

	      var translateX, translateY;

	      if (position && isNumber$3(position.x) && isNumber$3(position.y)) {
	        translateX = position.x;
	        translateY = position.y;
	      } else {
	        var _this$state2 = this.state,
	            boxWidth = _this$state2.boxWidth,
	            boxHeight = _this$state2.boxHeight;

	        if (boxWidth > 0 && boxHeight > 0 && coordinate) {
	          translateX = this.getTranslate({
	            key: 'x',
	            tooltipDimension: boxWidth,
	            viewBoxDimension: viewBox.width
	          });
	          translateY = this.getTranslate({
	            key: 'y',
	            tooltipDimension: boxHeight,
	            viewBoxDimension: viewBox.height
	          });
	        } else {
	          outerStyle.visibility = 'hidden';
	        }
	      }

	      outerStyle = _objectSpread$7({}, translateStyle({
	        transform: this.props.useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
	      }), {}, outerStyle);

	      if (isAnimationActive && active) {
	        outerStyle = _objectSpread$7({}, translateStyle({
	          transition: "transform ".concat(animationDuration, "ms ").concat(animationEasing)
	        }), {}, outerStyle);
	      }

	      var cls = classnames(CLS_PREFIX, (_classNames = {}, _defineProperty$a(_classNames, "".concat(CLS_PREFIX, "-right"), isNumber$3(translateX) && coordinate && isNumber$3(coordinate.x) && translateX >= coordinate.x), _defineProperty$a(_classNames, "".concat(CLS_PREFIX, "-left"), isNumber$3(translateX) && coordinate && isNumber$3(coordinate.x) && translateX < coordinate.x), _defineProperty$a(_classNames, "".concat(CLS_PREFIX, "-bottom"), isNumber$3(translateY) && coordinate && isNumber$3(coordinate.y) && translateY >= coordinate.y), _defineProperty$a(_classNames, "".concat(CLS_PREFIX, "-top"), isNumber$3(translateY) && coordinate && isNumber$3(coordinate.y) && translateY < coordinate.y), _classNames));
	      return react.createElement("div", {
	        className: cls,
	        style: outerStyle,
	        ref: function ref(node) {
	          _this2.wrapperNode = node;
	        }
	      }, renderContent$1(content, _objectSpread$7({}, this.props, {
	        payload: finalPayload
	      })));
	    }
	  }]);

	  return Tooltip;
	}(react_4);

	Tooltip.displayName = 'Tooltip';
	Tooltip.propTypes = propTypes$3;
	Tooltip.defaultProps = defaultProps;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return _root.Date.now();
	};

	var now_1 = now;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$1(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol_1(value)) {
	    return NAN;
	  }
	  if (isObject_1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject_1(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var toNumber_1 = toNumber$1;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$1 = Math.max,
	    nativeMin$1 = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  wait = toNumber_1(wait) || 0;
	  if (isObject_1(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax$1(toNumber_1(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now_1();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now_1());
	  }

	  function debounced() {
	    var time = now_1(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	var debounce_1 = debounce;

	/**
	 * A collection of shims that provide minimal functionality of the ES6 collections.
	 *
	 * These implementations are not meant to be used outside of the ResizeObserver
	 * modules as they cover only a limited range of use cases.
	 */
	/* eslint-disable require-jsdoc, valid-jsdoc */
	var MapShim = (function () {
	    if (typeof Map !== 'undefined') {
	        return Map;
	    }
	    /**
	     * Returns index in provided array that matches the specified key.
	     *
	     * @param {Array<Array>} arr
	     * @param {*} key
	     * @returns {number}
	     */
	    function getIndex(arr, key) {
	        var result = -1;
	        arr.some(function (entry, index) {
	            if (entry[0] === key) {
	                result = index;
	                return true;
	            }
	            return false;
	        });
	        return result;
	    }
	    return /** @class */ (function () {
	        function class_1() {
	            this.__entries__ = [];
	        }
	        Object.defineProperty(class_1.prototype, "size", {
	            /**
	             * @returns {boolean}
	             */
	            get: function () {
	                return this.__entries__.length;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {*} key
	         * @returns {*}
	         */
	        class_1.prototype.get = function (key) {
	            var index = getIndex(this.__entries__, key);
	            var entry = this.__entries__[index];
	            return entry && entry[1];
	        };
	        /**
	         * @param {*} key
	         * @param {*} value
	         * @returns {void}
	         */
	        class_1.prototype.set = function (key, value) {
	            var index = getIndex(this.__entries__, key);
	            if (~index) {
	                this.__entries__[index][1] = value;
	            }
	            else {
	                this.__entries__.push([key, value]);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.delete = function (key) {
	            var entries = this.__entries__;
	            var index = getIndex(entries, key);
	            if (~index) {
	                entries.splice(index, 1);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.has = function (key) {
	            return !!~getIndex(this.__entries__, key);
	        };
	        /**
	         * @returns {void}
	         */
	        class_1.prototype.clear = function () {
	            this.__entries__.splice(0);
	        };
	        /**
	         * @param {Function} callback
	         * @param {*} [ctx=null]
	         * @returns {void}
	         */
	        class_1.prototype.forEach = function (callback, ctx) {
	            if (ctx === void 0) { ctx = null; }
	            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
	                var entry = _a[_i];
	                callback.call(ctx, entry[1], entry[0]);
	            }
	        };
	        return class_1;
	    }());
	})();

	/**
	 * Detects whether window and document objects are available in current environment.
	 */
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

	// Returns global object of a current environment.
	var global$1$1 = (function () {
	    if (typeof global$1 !== 'undefined' && global$1.Math === Math) {
	        return global$1;
	    }
	    if (typeof self !== 'undefined' && self.Math === Math) {
	        return self;
	    }
	    if (typeof window !== 'undefined' && window.Math === Math) {
	        return window;
	    }
	    // eslint-disable-next-line no-new-func
	    return Function('return this')();
	})();

	/**
	 * A shim for the requestAnimationFrame which falls back to the setTimeout if
	 * first one is not supported.
	 *
	 * @returns {number} Requests' identifier.
	 */
	var requestAnimationFrame$1 = (function () {
	    if (typeof requestAnimationFrame === 'function') {
	        // It's required to use a bounded function because IE sometimes throws
	        // an "Invalid calling object" error if rAF is invoked without the global
	        // object on the left hand side.
	        return requestAnimationFrame.bind(global$1$1);
	    }
	    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	})();

	// Defines minimum timeout before adding a trailing call.
	var trailingTimeout = 2;
	/**
	 * Creates a wrapper function which ensures that provided callback will be
	 * invoked only once during the specified delay period.
	 *
	 * @param {Function} callback - Function to be invoked after the delay period.
	 * @param {number} delay - Delay after which to invoke callback.
	 * @returns {Function}
	 */
	function throttle (callback, delay) {
	    var leadingCall = false, trailingCall = false, lastCallTime = 0;
	    /**
	     * Invokes the original callback function and schedules new invocation if
	     * the "proxy" was called during current request.
	     *
	     * @returns {void}
	     */
	    function resolvePending() {
	        if (leadingCall) {
	            leadingCall = false;
	            callback();
	        }
	        if (trailingCall) {
	            proxy();
	        }
	    }
	    /**
	     * Callback invoked after the specified delay. It will further postpone
	     * invocation of the original function delegating it to the
	     * requestAnimationFrame.
	     *
	     * @returns {void}
	     */
	    function timeoutCallback() {
	        requestAnimationFrame$1(resolvePending);
	    }
	    /**
	     * Schedules invocation of the original function.
	     *
	     * @returns {void}
	     */
	    function proxy() {
	        var timeStamp = Date.now();
	        if (leadingCall) {
	            // Reject immediately following calls.
	            if (timeStamp - lastCallTime < trailingTimeout) {
	                return;
	            }
	            // Schedule new call to be in invoked when the pending one is resolved.
	            // This is important for "transitions" which never actually start
	            // immediately so there is a chance that we might miss one if change
	            // happens amids the pending invocation.
	            trailingCall = true;
	        }
	        else {
	            leadingCall = true;
	            trailingCall = false;
	            setTimeout(timeoutCallback, delay);
	        }
	        lastCallTime = timeStamp;
	    }
	    return proxy;
	}

	// Minimum delay before invoking the update of observers.
	var REFRESH_DELAY = 20;
	// A list of substrings of CSS properties used to find transition events that
	// might affect dimensions of observed elements.
	var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
	// Check if MutationObserver is available.
	var mutationObserverSupported = typeof MutationObserver !== 'undefined';
	/**
	 * Singleton controller class which handles updates of ResizeObserver instances.
	 */
	var ResizeObserverController = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserverController.
	     *
	     * @private
	     */
	    function ResizeObserverController() {
	        /**
	         * Indicates whether DOM listeners have been added.
	         *
	         * @private {boolean}
	         */
	        this.connected_ = false;
	        /**
	         * Tells that controller has subscribed for Mutation Events.
	         *
	         * @private {boolean}
	         */
	        this.mutationEventsAdded_ = false;
	        /**
	         * Keeps reference to the instance of MutationObserver.
	         *
	         * @private {MutationObserver}
	         */
	        this.mutationsObserver_ = null;
	        /**
	         * A list of connected observers.
	         *
	         * @private {Array<ResizeObserverSPI>}
	         */
	        this.observers_ = [];
	        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	    }
	    /**
	     * Adds observer to observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be added.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.addObserver = function (observer) {
	        if (!~this.observers_.indexOf(observer)) {
	            this.observers_.push(observer);
	        }
	        // Add listeners if they haven't been added yet.
	        if (!this.connected_) {
	            this.connect_();
	        }
	    };
	    /**
	     * Removes observer from observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be removed.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.removeObserver = function (observer) {
	        var observers = this.observers_;
	        var index = observers.indexOf(observer);
	        // Remove observer if it's present in registry.
	        if (~index) {
	            observers.splice(index, 1);
	        }
	        // Remove listeners if controller has no connected observers.
	        if (!observers.length && this.connected_) {
	            this.disconnect_();
	        }
	    };
	    /**
	     * Invokes the update of observers. It will continue running updates insofar
	     * it detects changes.
	     *
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.refresh = function () {
	        var changesDetected = this.updateObservers_();
	        // Continue running updates if changes have been detected as there might
	        // be future ones caused by CSS transitions.
	        if (changesDetected) {
	            this.refresh();
	        }
	    };
	    /**
	     * Updates every observer from observers list and notifies them of queued
	     * entries.
	     *
	     * @private
	     * @returns {boolean} Returns "true" if any observer has detected changes in
	     *      dimensions of it's elements.
	     */
	    ResizeObserverController.prototype.updateObservers_ = function () {
	        // Collect observers that have active observations.
	        var activeObservers = this.observers_.filter(function (observer) {
	            return observer.gatherActive(), observer.hasActive();
	        });
	        // Deliver notifications in a separate cycle in order to avoid any
	        // collisions between observers, e.g. when multiple instances of
	        // ResizeObserver are tracking the same element and the callback of one
	        // of them changes content dimensions of the observed target. Sometimes
	        // this may result in notifications being blocked for the rest of observers.
	        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
	        return activeObservers.length > 0;
	    };
	    /**
	     * Initializes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.connect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already added.
	        if (!isBrowser || this.connected_) {
	            return;
	        }
	        // Subscription to the "Transitionend" event is used as a workaround for
	        // delayed transitions. This way it's possible to capture at least the
	        // final state of an element.
	        document.addEventListener('transitionend', this.onTransitionEnd_);
	        window.addEventListener('resize', this.refresh);
	        if (mutationObserverSupported) {
	            this.mutationsObserver_ = new MutationObserver(this.refresh);
	            this.mutationsObserver_.observe(document, {
	                attributes: true,
	                childList: true,
	                characterData: true,
	                subtree: true
	            });
	        }
	        else {
	            document.addEventListener('DOMSubtreeModified', this.refresh);
	            this.mutationEventsAdded_ = true;
	        }
	        this.connected_ = true;
	    };
	    /**
	     * Removes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.disconnect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already removed.
	        if (!isBrowser || !this.connected_) {
	            return;
	        }
	        document.removeEventListener('transitionend', this.onTransitionEnd_);
	        window.removeEventListener('resize', this.refresh);
	        if (this.mutationsObserver_) {
	            this.mutationsObserver_.disconnect();
	        }
	        if (this.mutationEventsAdded_) {
	            document.removeEventListener('DOMSubtreeModified', this.refresh);
	        }
	        this.mutationsObserver_ = null;
	        this.mutationEventsAdded_ = false;
	        this.connected_ = false;
	    };
	    /**
	     * "Transitionend" event handler.
	     *
	     * @private
	     * @param {TransitionEvent} event
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
	        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
	        // Detect whether transition may affect dimensions of an element.
	        var isReflowProperty = transitionKeys.some(function (key) {
	            return !!~propertyName.indexOf(key);
	        });
	        if (isReflowProperty) {
	            this.refresh();
	        }
	    };
	    /**
	     * Returns instance of the ResizeObserverController.
	     *
	     * @returns {ResizeObserverController}
	     */
	    ResizeObserverController.getInstance = function () {
	        if (!this.instance_) {
	            this.instance_ = new ResizeObserverController();
	        }
	        return this.instance_;
	    };
	    /**
	     * Holds reference to the controller's instance.
	     *
	     * @private {ResizeObserverController}
	     */
	    ResizeObserverController.instance_ = null;
	    return ResizeObserverController;
	}());

	/**
	 * Defines non-writable/enumerable properties of the provided target object.
	 *
	 * @param {Object} target - Object for which to define properties.
	 * @param {Object} props - Properties to be defined.
	 * @returns {Object} Target object.
	 */
	var defineConfigurable = (function (target, props) {
	    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
	        var key = _a[_i];
	        Object.defineProperty(target, key, {
	            value: props[key],
	            enumerable: false,
	            writable: false,
	            configurable: true
	        });
	    }
	    return target;
	});

	/**
	 * Returns the global object associated with provided element.
	 *
	 * @param {Object} target
	 * @returns {Object}
	 */
	var getWindowOf = (function (target) {
	    // Assume that the element is an instance of Node, which means that it
	    // has the "ownerDocument" property from which we can retrieve a
	    // corresponding global object.
	    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	    // Return the local global object if it's not possible extract one from
	    // provided element.
	    return ownerGlobal || global$1$1;
	});

	// Placeholder of an empty content rectangle.
	var emptyRect = createRectInit(0, 0, 0, 0);
	/**
	 * Converts provided string to a number.
	 *
	 * @param {number|string} value
	 * @returns {number}
	 */
	function toFloat(value) {
	    return parseFloat(value) || 0;
	}
	/**
	 * Extracts borders size from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @param {...string} positions - Borders positions (top, right, ...)
	 * @returns {number}
	 */
	function getBordersSize(styles) {
	    var positions = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        positions[_i - 1] = arguments[_i];
	    }
	    return positions.reduce(function (size, position) {
	        var value = styles['border-' + position + '-width'];
	        return size + toFloat(value);
	    }, 0);
	}
	/**
	 * Extracts paddings sizes from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @returns {Object} Paddings box.
	 */
	function getPaddings(styles) {
	    var positions = ['top', 'right', 'bottom', 'left'];
	    var paddings = {};
	    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
	        var position = positions_1[_i];
	        var value = styles['padding-' + position];
	        paddings[position] = toFloat(value);
	    }
	    return paddings;
	}
	/**
	 * Calculates content rectangle of provided SVG element.
	 *
	 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	 *      to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getSVGContentRect(target) {
	    var bbox = target.getBBox();
	    return createRectInit(0, 0, bbox.width, bbox.height);
	}
	/**
	 * Calculates content rectangle of provided HTMLElement.
	 *
	 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	 * @returns {DOMRectInit}
	 */
	function getHTMLElementContentRect(target) {
	    // Client width & height properties can't be
	    // used exclusively as they provide rounded values.
	    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	    // By this condition we can catch all non-replaced inline, hidden and
	    // detached elements. Though elements with width & height properties less
	    // than 0.5 will be discarded as well.
	    //
	    // Without it we would need to implement separate methods for each of
	    // those cases and it's not possible to perform a precise and performance
	    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	    // gives wrong results for elements with width & height less than 0.5.
	    if (!clientWidth && !clientHeight) {
	        return emptyRect;
	    }
	    var styles = getWindowOf(target).getComputedStyle(target);
	    var paddings = getPaddings(styles);
	    var horizPad = paddings.left + paddings.right;
	    var vertPad = paddings.top + paddings.bottom;
	    // Computed styles of width & height are being used because they are the
	    // only dimensions available to JS that contain non-rounded values. It could
	    // be possible to utilize the getBoundingClientRect if only it's data wasn't
	    // affected by CSS transformations let alone paddings, borders and scroll bars.
	    var width = toFloat(styles.width), height = toFloat(styles.height);
	    // Width & height include paddings and borders when the 'border-box' box
	    // model is applied (except for IE).
	    if (styles.boxSizing === 'border-box') {
	        // Following conditions are required to handle Internet Explorer which
	        // doesn't include paddings and borders to computed CSS dimensions.
	        //
	        // We can say that if CSS dimensions + paddings are equal to the "client"
	        // properties then it's either IE, and thus we don't need to subtract
	        // anything, or an element merely doesn't have paddings/borders styles.
	        if (Math.round(width + horizPad) !== clientWidth) {
	            width -= getBordersSize(styles, 'left', 'right') + horizPad;
	        }
	        if (Math.round(height + vertPad) !== clientHeight) {
	            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	        }
	    }
	    // Following steps can't be applied to the document's root element as its
	    // client[Width/Height] properties represent viewport area of the window.
	    // Besides, it's as well not necessary as the <html> itself neither has
	    // rendered scroll bars nor it can be clipped.
	    if (!isDocumentElement(target)) {
	        // In some browsers (only in Firefox, actually) CSS width & height
	        // include scroll bars size which can be removed at this step as scroll
	        // bars are the only difference between rounded dimensions + paddings
	        // and "client" properties, though that is not always true in Chrome.
	        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	        // Chrome has a rather weird rounding of "client" properties.
	        // E.g. for an element with content width of 314.2px it sometimes gives
	        // the client width of 315px and for the width of 314.7px it may give
	        // 314px. And it doesn't happen all the time. So just ignore this delta
	        // as a non-relevant.
	        if (Math.abs(vertScrollbar) !== 1) {
	            width -= vertScrollbar;
	        }
	        if (Math.abs(horizScrollbar) !== 1) {
	            height -= horizScrollbar;
	        }
	    }
	    return createRectInit(paddings.left, paddings.top, width, height);
	}
	/**
	 * Checks whether provided element is an instance of the SVGGraphicsElement.
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	var isSVGGraphicsElement = (function () {
	    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	    // interface.
	    if (typeof SVGGraphicsElement !== 'undefined') {
	        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	    }
	    // If it's so, then check that element is at least an instance of the
	    // SVGElement and that it has the "getBBox" method.
	    // eslint-disable-next-line no-extra-parens
	    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
	        typeof target.getBBox === 'function'); };
	})();
	/**
	 * Checks whether provided element is a document element (<html>).
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	function isDocumentElement(target) {
	    return target === getWindowOf(target).document.documentElement;
	}
	/**
	 * Calculates an appropriate content rectangle for provided html or svg element.
	 *
	 * @param {Element} target - Element content rectangle of which needs to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getContentRect(target) {
	    if (!isBrowser) {
	        return emptyRect;
	    }
	    if (isSVGGraphicsElement(target)) {
	        return getSVGContentRect(target);
	    }
	    return getHTMLElementContentRect(target);
	}
	/**
	 * Creates rectangle with an interface of the DOMRectReadOnly.
	 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	 *
	 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	 * @returns {DOMRectReadOnly}
	 */
	function createReadOnlyRect(_a) {
	    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	    var rect = Object.create(Constr.prototype);
	    // Rectangle's properties are not writable and non-enumerable.
	    defineConfigurable(rect, {
	        x: x, y: y, width: width, height: height,
	        top: y,
	        right: x + width,
	        bottom: height + y,
	        left: x
	    });
	    return rect;
	}
	/**
	 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	 *
	 * @param {number} x - X coordinate.
	 * @param {number} y - Y coordinate.
	 * @param {number} width - Rectangle's width.
	 * @param {number} height - Rectangle's height.
	 * @returns {DOMRectInit}
	 */
	function createRectInit(x, y, width, height) {
	    return { x: x, y: y, width: width, height: height };
	}

	/**
	 * Class that is responsible for computations of the content rectangle of
	 * provided DOM element and for keeping track of it's changes.
	 */
	var ResizeObservation = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObservation.
	     *
	     * @param {Element} target - Element to be observed.
	     */
	    function ResizeObservation(target) {
	        /**
	         * Broadcasted width of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastWidth = 0;
	        /**
	         * Broadcasted height of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastHeight = 0;
	        /**
	         * Reference to the last observed content rectangle.
	         *
	         * @private {DOMRectInit}
	         */
	        this.contentRect_ = createRectInit(0, 0, 0, 0);
	        this.target = target;
	    }
	    /**
	     * Updates content rectangle and tells whether it's width or height properties
	     * have changed since the last broadcast.
	     *
	     * @returns {boolean}
	     */
	    ResizeObservation.prototype.isActive = function () {
	        var rect = getContentRect(this.target);
	        this.contentRect_ = rect;
	        return (rect.width !== this.broadcastWidth ||
	            rect.height !== this.broadcastHeight);
	    };
	    /**
	     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	     * from the corresponding properties of the last observed content rectangle.
	     *
	     * @returns {DOMRectInit} Last observed content rectangle.
	     */
	    ResizeObservation.prototype.broadcastRect = function () {
	        var rect = this.contentRect_;
	        this.broadcastWidth = rect.width;
	        this.broadcastHeight = rect.height;
	        return rect;
	    };
	    return ResizeObservation;
	}());

	var ResizeObserverEntry = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObserverEntry.
	     *
	     * @param {Element} target - Element that is being observed.
	     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
	     */
	    function ResizeObserverEntry(target, rectInit) {
	        var contentRect = createReadOnlyRect(rectInit);
	        // According to the specification following properties are not writable
	        // and are also not enumerable in the native implementation.
	        //
	        // Property accessors are not being used as they'd require to define a
	        // private WeakMap storage which may cause memory leaks in browsers that
	        // don't support this type of collections.
	        defineConfigurable(this, { target: target, contentRect: contentRect });
	    }
	    return ResizeObserverEntry;
	}());

	var ResizeObserverSPI = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback function that is invoked
	     *      when one of the observed elements changes it's content dimensions.
	     * @param {ResizeObserverController} controller - Controller instance which
	     *      is responsible for the updates of observer.
	     * @param {ResizeObserver} callbackCtx - Reference to the public
	     *      ResizeObserver instance which will be passed to callback function.
	     */
	    function ResizeObserverSPI(callback, controller, callbackCtx) {
	        /**
	         * Collection of resize observations that have detected changes in dimensions
	         * of elements.
	         *
	         * @private {Array<ResizeObservation>}
	         */
	        this.activeObservations_ = [];
	        /**
	         * Registry of the ResizeObservation instances.
	         *
	         * @private {Map<Element, ResizeObservation>}
	         */
	        this.observations_ = new MapShim();
	        if (typeof callback !== 'function') {
	            throw new TypeError('The callback provided as parameter 1 is not a function.');
	        }
	        this.callback_ = callback;
	        this.controller_ = controller;
	        this.callbackCtx_ = callbackCtx;
	    }
	    /**
	     * Starts observing provided element.
	     *
	     * @param {Element} target - Element to be observed.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.observe = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is already being observed.
	        if (observations.has(target)) {
	            return;
	        }
	        observations.set(target, new ResizeObservation(target));
	        this.controller_.addObserver(this);
	        // Force the update of observations.
	        this.controller_.refresh();
	    };
	    /**
	     * Stops observing provided element.
	     *
	     * @param {Element} target - Element to stop observing.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.unobserve = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is not being observed.
	        if (!observations.has(target)) {
	            return;
	        }
	        observations.delete(target);
	        if (!observations.size) {
	            this.controller_.removeObserver(this);
	        }
	    };
	    /**
	     * Stops observing all elements.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.disconnect = function () {
	        this.clearActive();
	        this.observations_.clear();
	        this.controller_.removeObserver(this);
	    };
	    /**
	     * Collects observation instances the associated element of which has changed
	     * it's content rectangle.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.gatherActive = function () {
	        var _this = this;
	        this.clearActive();
	        this.observations_.forEach(function (observation) {
	            if (observation.isActive()) {
	                _this.activeObservations_.push(observation);
	            }
	        });
	    };
	    /**
	     * Invokes initial callback function with a list of ResizeObserverEntry
	     * instances collected from active resize observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.broadcastActive = function () {
	        // Do nothing if observer doesn't have active observations.
	        if (!this.hasActive()) {
	            return;
	        }
	        var ctx = this.callbackCtx_;
	        // Create ResizeObserverEntry instance for every active observation.
	        var entries = this.activeObservations_.map(function (observation) {
	            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	        });
	        this.callback_.call(ctx, entries, ctx);
	        this.clearActive();
	    };
	    /**
	     * Clears the collection of active observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.clearActive = function () {
	        this.activeObservations_.splice(0);
	    };
	    /**
	     * Tells whether observer has active observations.
	     *
	     * @returns {boolean}
	     */
	    ResizeObserverSPI.prototype.hasActive = function () {
	        return this.activeObservations_.length > 0;
	    };
	    return ResizeObserverSPI;
	}());

	// Registry of internal observers. If WeakMap is not available use current shim
	// for the Map collection as it has all required methods and because WeakMap
	// can't be fully polyfilled anyway.
	var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
	/**
	 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	 * exposing only those methods and properties that are defined in the spec.
	 */
	var ResizeObserver = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback that is invoked when
	     *      dimensions of the observed elements change.
	     */
	    function ResizeObserver(callback) {
	        if (!(this instanceof ResizeObserver)) {
	            throw new TypeError('Cannot call a class as a function.');
	        }
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        var controller = ResizeObserverController.getInstance();
	        var observer = new ResizeObserverSPI(callback, controller, this);
	        observers.set(this, observer);
	    }
	    return ResizeObserver;
	}());
	// Expose public methods of ResizeObserver.
	[
	    'observe',
	    'unobserve',
	    'disconnect'
	].forEach(function (method) {
	    ResizeObserver.prototype[method] = function () {
	        var _a;
	        return (_a = observers.get(this))[method].apply(_a, arguments);
	    };
	});

	var index$2 = (function () {
	    // Export existing implementation if available.
	    if (typeof global$1$1.ResizeObserver !== 'undefined') {
	        return global$1$1.ResizeObserver;
	    }
	    return ResizeObserver;
	})();

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT$2 = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN$1 = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag$2 = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim$1 = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary$1 = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal$1 = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt$1 = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$1 = typeof global$1 == 'object' && global$1 && global$1.Object === Object && global$1;

	/** Detect free variable `self`. */
	var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$3 = freeGlobal$1 || freeSelf$1 || Function('return this')();

	/** Used for built-in method references. */
	var objectProto$c = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$2 = objectProto$c.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$2 = Math.max,
	    nativeMin$2 = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now$1 = function() {
	  return root$3.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce$1(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$2);
	  }
	  wait = toNumber$2(wait) || 0;
	  if (isObject$3(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin$2(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now$1();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now$1());
	  }

	  function debounced() {
	    var time = now$1(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$3(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike$1(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$3(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$2);
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$2(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol$3(value)) {
	    return NAN$1;
	  }
	  if (isObject$3(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject$3(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim$1, '');
	  var isBinary = reIsBinary$1.test(value);
	  return (isBinary || reIsOctal$1.test(value))
	    ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex$1.test(value) ? NAN$1 : +value);
	}

	var lodash_debounce = debounce$1;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT$3 = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN$2 = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag$3 = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim$2 = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex$2 = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary$2 = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal$2 = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt$2 = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$2 = typeof global$1 == 'object' && global$1 && global$1.Object === Object && global$1;

	/** Detect free variable `self`. */
	var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$4 = freeGlobal$2 || freeSelf$2 || Function('return this')();

	/** Used for built-in method references. */
	var objectProto$d = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$3 = objectProto$d.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$3 = Math.max,
	    nativeMin$3 = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now$2 = function() {
	  return root$4.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce$2(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$3);
	  }
	  wait = toNumber$3(wait) || 0;
	  if (isObject$4(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax$3(toNumber$3(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin$3(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now$2();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now$2());
	  }

	  function debounced() {
	    var time = now$2(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle$1(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$3);
	  }
	  if (isObject$4(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce$2(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$4(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike$2(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$4(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike$2(value) && objectToString$3.call(value) == symbolTag$3);
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$3(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol$4(value)) {
	    return NAN$2;
	  }
	  if (isObject$4(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject$4(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim$2, '');
	  var isBinary = reIsBinary$2.test(value);
	  return (isBinary || reIsOctal$2.test(value))
	    ? freeParseInt$2(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex$2.test(value) ? NAN$2 : +value);
	}

	var lodash_throttle = throttle$1;

	var ResizeDetector_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _resizeObserverPolyfill2 = _interopRequireDefault(index$2);



	var _lodash2 = _interopRequireDefault(lodash_debounce);



	var _lodash4 = _interopRequireDefault(lodash_throttle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var listMode = { debounce: _lodash2.default, throttle: _lodash4.default };

	var styles = {
	  position: 'absolute',
	  width: 0,
	  height: 0,
	  visibility: 'hidden',
	  display: 'none'
	};

	var ResizeDetector = function (_PureComponent) {
	  _inherits(ResizeDetector, _PureComponent);

	  function ResizeDetector(props) {
	    _classCallCheck(this, ResizeDetector);

	    var _this = _possibleConstructorReturn(this, (ResizeDetector.__proto__ || Object.getPrototypeOf(ResizeDetector)).call(this, props));

	    _this.createResizeObserver = function (entries) {
	      var _this$props = _this.props,
	          handleWidth = _this$props.handleWidth,
	          handleHeight = _this$props.handleHeight,
	          onResize = _this$props.onResize;

	      entries.forEach(function (entry) {
	        var _entry$contentRect = entry.contentRect,
	            width = _entry$contentRect.width,
	            height = _entry$contentRect.height;

	        var notifyWidth = handleWidth && _this.width !== width;
	        var notifyHeight = handleHeight && _this.height !== height;
	        if (!_this.skipOnMount && (notifyWidth || notifyHeight)) {
	          onResize(width, height);
	        }
	        _this.width = width;
	        _this.height = height;
	        _this.skipOnMount = false;
	      });
	    };

	    var skipOnMount = props.skipOnMount,
	        refreshMode = props.refreshMode,
	        refreshRate = props.refreshRate;


	    _this.width = undefined;
	    _this.height = undefined;
	    _this.skipOnMount = skipOnMount;

	    var resizeObserver = listMode[refreshMode] && listMode[refreshMode](_this.createResizeObserver, refreshRate) || _this.createResizeObserver;

	    _this.ro = new _resizeObserverPolyfill2.default(resizeObserver);
	    return _this;
	  }

	  _createClass(ResizeDetector, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var resizableElementId = this.props.resizableElementId;

	      var resizableElement = resizableElementId ? document.getElementById(resizableElementId) : this.el.parentElement;
	      this.ro.observe(resizableElement);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var resizableElementId = this.props.resizableElementId;

	      var resizableElement = resizableElementId ? document.getElementById(resizableElementId) : this.el.parentElement;
	      this.ro.unobserve(resizableElement);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      return _react2.default.createElement('div', {
	        style: styles,
	        ref: function ref(el) {
	          _this2.el = el;
	        }
	      });
	    }
	  }]);

	  return ResizeDetector;
	}(react.PureComponent);

	exports.default = ResizeDetector;


	ResizeDetector.propTypes = {
	  handleWidth: _propTypes2.default.bool,
	  handleHeight: _propTypes2.default.bool,
	  skipOnMount: _propTypes2.default.bool,
	  refreshRate: _propTypes2.default.number,
	  refreshMode: _propTypes2.default.string,
	  resizableElementId: _propTypes2.default.string,
	  onResize: _propTypes2.default.func
	};

	ResizeDetector.defaultProps = {
	  handleWidth: false,
	  handleHeight: false,
	  skipOnMount: false,
	  refreshRate: 1000,
	  refreshMode: undefined,
	  resizableElementId: '',
	  onResize: function onResize(e) {
	    return e;
	  }
	};
	});

	unwrapExports(ResizeDetector_1);

	var lib = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _ResizeDetector2 = _interopRequireDefault(ResizeDetector_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _ResizeDetector2.default;
	});

	var ReactResizeDetector = unwrapExports(lib);

	/* eslint no-console: 0 */
	var warn$1 = function warn(condition, format, a, b, c, d, e, f) {
	  if ( typeof console !== 'undefined' && console.warn) {
	    if (format === undefined) {
	      console.warn('LogUtils requires an error message argument');
	    }

	    if (!condition) {
	      if (format === undefined) {
	        console.warn('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	      } else {
	        var args = [a, b, c, d, e, f];
	        var argIndex = 0;
	        console.warn(format.replace(/%s/g, function () {
	          return args[argIndex++];
	        }));
	      }
	    }
	  }
	};

	function _typeof$9(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$7(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$7(Constructor.prototype, protoProps); if (staticProps) _defineProperties$7(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$7(self, call) { if (call && (_typeof$9(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$8(self); }

	function _assertThisInitialized$8(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$7(o) { _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$7(o); }

	function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$7(subClass, superClass); }

	function _setPrototypeOf$7(o, p) { _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$7(o, p); }

	var ResponsiveContainer =
	/*#__PURE__*/
	function (_Component) {
	  _inherits$7(ResponsiveContainer, _Component);

	  function ResponsiveContainer(props) {
	    var _this;

	    _classCallCheck$7(this, ResponsiveContainer);

	    _this = _possibleConstructorReturn$7(this, _getPrototypeOf$7(ResponsiveContainer).call(this, props));

	    _this.updateDimensionsImmediate = function () {
	      if (!_this.mounted) {
	        return;
	      }

	      var newSize = _this.getContainerSize();

	      if (newSize) {
	        var _this$state = _this.state,
	            oldWidth = _this$state.containerWidth,
	            oldHeight = _this$state.containerHeight;
	        var containerWidth = newSize.containerWidth,
	            containerHeight = newSize.containerHeight;

	        if (containerWidth !== oldWidth || containerHeight !== oldHeight) {
	          _this.setState({
	            containerWidth: containerWidth,
	            containerHeight: containerHeight
	          });
	        }
	      }
	    };

	    _this.state = {
	      containerWidth: -1,
	      containerHeight: -1
	    };
	    _this.handleResize = props.debounce > 0 ? debounce_1(_this.updateDimensionsImmediate, props.debounce) : _this.updateDimensionsImmediate;
	    return _this;
	  }
	  /* eslint-disable  react/no-did-mount-set-state */


	  _createClass$7(ResponsiveContainer, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.mounted = true;
	      var size = this.getContainerSize();

	      if (size) {
	        this.setState(size);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.mounted = false;
	    }
	  }, {
	    key: "getContainerSize",
	    value: function getContainerSize() {
	      if (!this.container) {
	        return null;
	      }

	      return {
	        containerWidth: this.container.clientWidth,
	        containerHeight: this.container.clientHeight
	      };
	    }
	  }, {
	    key: "renderChart",
	    value: function renderChart() {
	      var _this$state2 = this.state,
	          containerWidth = _this$state2.containerWidth,
	          containerHeight = _this$state2.containerHeight;

	      if (containerWidth < 0 || containerHeight < 0) {
	        return null;
	      }

	      var _this$props = this.props,
	          aspect = _this$props.aspect,
	          width = _this$props.width,
	          height = _this$props.height,
	          minWidth = _this$props.minWidth,
	          minHeight = _this$props.minHeight,
	          maxHeight = _this$props.maxHeight,
	          children = _this$props.children;
	      warn$1(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
	      warn$1(!aspect || aspect > 0, 'The aspect(%s) must be greater than zero.', aspect);
	      var calculatedWidth = isPercent(width) ? containerWidth : width;
	      var calculatedHeight = isPercent(height) ? containerHeight : height;

	      if (aspect && aspect > 0) {
	        // Preserve the desired aspect ratio
	        if (calculatedWidth) {
	          // Will default to using width for aspect ratio
	          calculatedHeight = calculatedWidth / aspect;
	        } else if (calculatedHeight) {
	          // But we should also take height into consideration
	          calculatedWidth = calculatedHeight * aspect;
	        } // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight


	        if (maxHeight && calculatedHeight > maxHeight) {
	          calculatedHeight = maxHeight;
	        }
	      }

	      warn$1(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight);
	      return react.cloneElement(children, {
	        width: calculatedWidth,
	        height: calculatedHeight
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          minWidth = _this$props2.minWidth,
	          minHeight = _this$props2.minHeight,
	          width = _this$props2.width,
	          height = _this$props2.height,
	          maxHeight = _this$props2.maxHeight,
	          id = _this$props2.id,
	          className = _this$props2.className;
	      var style = {
	        width: width,
	        height: height,
	        minWidth: minWidth,
	        minHeight: minHeight,
	        maxHeight: maxHeight
	      };
	      return react.createElement("div", {
	        id: id,
	        className: classnames('recharts-responsive-container', className),
	        style: style,
	        ref: function ref(node) {
	          _this2.container = node;
	        }
	      }, this.renderChart(), react.createElement(ReactResizeDetector, {
	        handleWidth: true,
	        handleHeight: true,
	        onResize: this.handleResize
	      }));
	    }
	  }]);

	  return ResponsiveContainer;
	}(react_3);

	ResponsiveContainer.displayName = 'ResponsiveContainer';
	ResponsiveContainer.propTypes = {
	  aspect: propTypes.number,
	  width: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  height: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  minHeight: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  minWidth: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  maxHeight: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  children: propTypes.node.isRequired,
	  debounce: propTypes.number,
	  id: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  className: propTypes.oneOfType([propTypes.string, propTypes.number])
	};
	ResponsiveContainer.defaultProps = {
	  width: '100%',
	  height: '100%',
	  debounce: 0
	};

	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(source, true).forEach(function (key) { _defineProperty$b(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$b(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function Cell() {
	  return null;
	}

	Cell.propTypes = _objectSpread$8({}, PRESENTATION_ATTRIBUTES);
	Cell.displayName = 'Cell';

	var balancedMatch = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);

	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}

	var balancedMatch$1 = balanced$1;
	function balanced$1(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch$1(a, str);
	  if (b instanceof RegExp) b = maybeMatch$1(b, str);

	  var r = range$1(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	function maybeMatch$1(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}

	balanced$1.range = range$1;
	function range$1(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}

	/*
	 * Module dependencies
	 */


	/**
	 * Expose `reduceFunctionCall`
	 *
	 * @type {Function}
	 */
	var reduceFunctionCall_1 = reduceFunctionCall;

	/**
	 * Walkthrough all expressions, evaluate them and insert them into the declaration
	 *
	 * @param {Array} expressions
	 * @param {Object} declaration
	 */

	function reduceFunctionCall(string, functionRE, callback) {
	  var call = string;
	  return getFunctionCalls(string, functionRE).reduce(function(string, obj) {
	    return string.replace(obj.functionIdentifier + "(" + obj.matches.body + ")", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE))
	  }, string)
	}

	/**
	 * Parses expressions in a value
	 *
	 * @param {String} value
	 * @returns {Array}
	 * @api private
	 */

	function getFunctionCalls(call, functionRE) {
	  var expressions = [];

	  var fnRE = typeof functionRE === "string" ? new RegExp("\\b(" + functionRE + ")\\(") : functionRE;
	  do {
	    var searchMatch = fnRE.exec(call);
	    if (!searchMatch) {
	      return expressions
	    }
	    if (searchMatch[1] === undefined) {
	      throw new Error("Missing the first couple of parenthesis to get the function identifier in " + functionRE)
	    }
	    var fn = searchMatch[1];
	    var startIndex = searchMatch.index;
	    var matches = balancedMatch$1("(", ")", call.substring(startIndex));

	    if (!matches || matches.start !== searchMatch[0].length - 1) {
	      throw new SyntaxError(fn + "(): missing closing ')' in the value '" + call + "'")
	    }

	    expressions.push({matches: matches, functionIdentifier: fn});
	    call = matches.post;
	  }
	  while (fnRE.test(call))

	  return expressions
	}

	/**
	 * Evaluates an expression
	 *
	 * @param {String} expression
	 * @returns {String}
	 * @api private
	 */

	function evalFunctionCall (string, functionIdentifier, callback, call, functionRE) {
	  // allow recursivity
	  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call)
	}

	var Mexp=function(parsed){
			this.value=parsed;

		};

		Mexp.math={
			isDegree:true, //mode of calculator
			acos:function(x){
				return (Mexp.math.isDegree?180/Math.PI*Math.acos(x):Math.acos(x));
			},
			add:function(a,b){
				return a+b;
			},
			asin:function(x){
				return (Mexp.math.isDegree?180/Math.PI*Math.asin(x):Math.asin(x));
			},
			atan:function(x){
				return (Mexp.math.isDegree?180/Math.PI*Math.atan(x):Math.atan(x));
			},
			acosh:function(x){
				return Math.log(x+Math.sqrt(x*x-1));
			},
			asinh:function(x){
				return Math.log(x+Math.sqrt(x*x+1));
			},
			atanh:function(x){
				return Math.log((1+x)/(1-x));
			},
			C:function(n,r){
				var pro=1,other=n-r,choice=r;
				if(choice<other){
				choice=other;
				other=r;
				}
				for(var i=choice+1;i<=n;i++)
					pro*=i;
				return pro/Mexp.math.fact(other);
			},
			changeSign:function(x){
				return -x;
			},
			cos:function(x){
				if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
				return Math.cos(x);
			},
			cosh:function(x){
				return (Math.pow(Math.E,x)+Math.pow(Math.E,-1*x))/2;
			},
			div:function(a,b){
			return a/b;
			},
			fact:function(n) {
			if(n%1!==0)return "NAN";
				var pro=1;
				for(var i=2;i<=n;i++)
					pro*=i;
				return pro;
			},
			inverse:function(x){
				return 1/x;
			},
			log:function(i){
				return Math.log(i)/Math.log(10);
			},
			mod:function(a,b){
			return a%b;
			},
			mul:function(a,b){
			return a*b;
			},
			P:function(n,r){var pro=1;
				 for(var i=Math.floor(n)-Math.floor(r)+1;i<=Math.floor(n);i++)
						pro*=i;
						return pro;

			},
			Pi:function(low,high,ex){
				var pro=1;
				for(var i=low;i<=high;i++){
					pro*=Number(ex.postfixEval({n:i}));
				}
				return pro;
			},
			pow10x:function(e){
				var x=1;
				while(e--){x*=10;}
				return x;
			},
			sigma:function(low,high,ex){
				var sum=0;
				for(var i=low;i<=high;i++){
					sum+=Number(ex.postfixEval({n:i}));
				}
				return sum;
			},
			sin:function(x){
				if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
				return Math.sin(x);
			},
			sinh:function(x){
				return (Math.pow(Math.E,x)-Math.pow(Math.E,-1*x))/2;
			},
			sub:function(a,b){
			return a-b;
			},
			tan:function(x){
				if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
				return Math.tan(x);
			},
			tanh:function(x){
				return Mexp.sinha(x)/Mexp.cosha(x);
			},
			toRadian:function(x){
				return x*Math.PI/180;
			}
		};
		Mexp.exception=function(message){
			this.message=message;
		};
	    var math_function=Mexp;

	function inc(arr,val){
			for(var i=0;i<arr.length;i++)
				arr[i]+=val;
			return arr;
		}
		var token=['sin','cos','tan','pi','(',')','P','C',
			  'asin','acos','atan','7','8','9','int',
			  'cosh','acosh','ln','^','root','4','5','6','/','!',
			  'tanh','atanh','Mod','1','2','3','*',
			  'sinh','asinh','e','log','0','.','+','-',',','Sigma','n','Pi','pow'];
		var show=['sin','cos','tan','&pi;','(',')','P','C',
			'asin','acos','atan','7','8','9','Int',
			'cosh','acosh',' ln','^','root','4','5','6','&divide;','!',
			'tanh','atanh',' Mod ','1','2','3','&times;',
			'sinh','asinh','e',' log','0','.','+','-',',','&Sigma;','n','&Pi;','pow'];
		var eva=[math_function.math.sin,math_function.math.cos,math_function.math.tan,'PI','(',')',math_function.math.P,math_function.math.C,
			math_function.math.asin,math_function.math.acos,math_function.math.atan,'7','8','9',Math.floor,
			math_function.math.cosh,math_function.math.acosh,Math.log,Math.pow,Math.sqrt,'4','5','6',math_function.math.div,math_function.math.fact,
			math_function.math.tanh,math_function.math.atanh,math_function.math.mod,'1','2','3',math_function.math.mul,
			math_function.math.sinh,math_function.math.asinh,'E',math_function.math.log,'0','.',math_function.math.add,math_function.math.sub,',',math_function.math.sigma,'n',math_function.math.Pi,Math.pow];
		var preced={0:11,1:0,2:3,3:0,4:0,5:0,6:0,7:11,8:11,9:1,10:10,11:0,12:11,13:0};
		var type$1=[0,0,0,3,4,5,10,10,
			0,0,0,1,1,1,0,
			0,0,0,10,0,1,1,1,2,7,
			0,0,2,1,1,1,2,
			0,0,3,0,1,6,9,9,11,12,13,12,8];
		 /*
		0 : function with syntax function_name(Maths_exp)
		1 : numbers
		2 : binary operators like * / Mod left associate and same precedence
		3 : Math constant values like e,pi,Cruncher ans
		4 : opening bracket
		5 : closing bracket
		6 : decimal
		7 : function with syntax (Math_exp)function_name
		8: function with syntax function_name(Math_exp1,Math_exp2)
		9 : binary operator like +,-
		10: binary operator like P C or ^
		11: ,
		12: function with , seperated three parameters
		13: variable of Sigma function
		 */
		var type0={0:true,1:true,3:true,4:true,6:true,8:true,9:true,12:true,13:true},//type2:true,type4:true,type9:true,type11:true,type21:true,type22
		type1={0:true,1:true,2:true,3:true,4:true,5:true,6:true,7:true,8:true,9:true,10:true,11:true,12:true,13:true},//type3:true,type5:true,type7:true,type23
		type_1={0:true,3:true,4:true,8:true,12:true,13:true},
		empty={},
		type_3={0:true,1:true,3:true,4:true,6:true,8:true,12:true,13:true},//type_5:true,type_7:true,type_23
		type6={1:true},
		newAr=[[],
				["1","2","3","7","8","9","4","5","6","+","-","*","/","(",")","^","!","P","C","e","0",".",",","n"],
				["pi","ln","Pi"],
				["sin","cos","tan","Del","int","Mod","log","pow"],
				["asin","acos","atan","cosh","root","tanh","sinh"],
				["acosh","atanh","asinh","Sigma"]];
		function match$1(str1,str2,i,x){
			for(var f=0;f<x;f++){
				if (str1[i+f]!==str2[f])
					return false;
			}
			return true;
		}
		math_function.addToken=function(tokens){
			for(i=0;i<tokens.length;i++){
				x=tokens[i].token.length;
				var temp=-1;

				//newAr is a specially designed data structure in which 1D array at location one of 2d array has all string with length 1 2 with 2 and so on

				if (x<newAr.length)	//match to check if token is really huge and not existing
									//if not checked it will break in next line as undefined index
					for(y=0;y<newAr[x].length;y++){
						if (tokens[i].token===newAr[x][y]){
							temp=token.indexOf(newAr[x][y]);
							break;
						}
					}
				if (temp===-1) {
					token.push(tokens[i].token);
					type$1.push(tokens[i].type);
					if(newAr.length<=tokens[i].token.length)
						newAr[tokens[i].token.length]=[];
					newAr[tokens[i].token.length].push(tokens[i].token);
					eva.push(tokens[i].value);
					show.push(tokens[i].show);
				}
				else {
					token[temp]=tokens[i].token;
					type$1[temp]=tokens[i].type;
					eva[temp]=tokens[i].value;
					show[temp]=tokens[i].show;
				}
			}
		};
		math_function.lex=function(inp,tokens){
			var str=[{type:4,value:"(",show:"(",pre:0}];
			var ptc=[];	//Parenthesis to close at the beginning is after one token
			var inpStr=inp;
			var key;
	        var pcounter=0;
			var allowed=type0;
			var bracToClose=0;
			var asterick=empty;
			var prevKey='';
			var i,x,y;
			if(typeof tokens!=="undefined")
				math_function.addToken(tokens);
			var obj={};
			for(i=0;i<inpStr.length;i++){
				if (inpStr[i]==' ') {
					continue;
				}
				key='';
				sec:for(x=(inpStr.length-i>(newAr.length-2)?newAr.length-1:inpStr.length-i);x>0;x--){
					for(y=0;y<newAr[x].length;y++){
						if (match$1(inpStr,newAr[x][y],i,x)){
							key=newAr[x][y];
							break sec;
						}
					}
				}
				i+=key.length-1;
				if(key===''){
					throw(new math_function.exception("Can't understand after "+inpStr.slice(i)));
				}
				var index=token.indexOf(key);
				var cToken=key;
				var cType=type$1[index];
				var cEv=eva[index];
				var cPre=preced[cType];
				var	cShow=show[index];
				var pre=str[str.length-1];
				for(j=ptc.length;j--;){	//loop over ptc
					if(ptc[j]===0){
						if([0,2,3,5,9,11,12,13].indexOf(cType)!==-1){
							if(allowed[cType]!==true){
								throw(new math_function.exception(key+" is not allowed after "+prevKey));
							}
							str.push({value:")",type:5,pre:0,show:")"});
							allowed=type1;
							asterick=type_3;
							inc(ptc,-1).pop();
						}
					}
				}
				if(allowed[cType]!==true){
					throw(new math_function.exception(key+" is not allowed after "+prevKey));
				}
				if(asterick[cType]===true){
					cType=2;
					cEv=math_function.math.mul;
					cShow="&times;";
					cPre=3;
					i=i-key.length;
			 	}
				obj={value:cEv,type:cType,pre:cPre,show:cShow};
				if(cType===0){
					allowed=type0;
					asterick=empty;
					inc(ptc,2).push(2);
					str.push(obj);
					str.push({value:"(",type:4,pre:0,show:"("});
				}
				else if(cType===1){
					if(pre.type===1){
						pre.value+=cEv;
						inc(ptc,1);
					}
					else {
						str.push(obj);
					}
					allowed=type1;
					asterick=type_1;
				}
				else if(cType===2){
					allowed=type0;
					asterick=empty;
					inc(ptc,2);
					str.push(obj);
				}
				else if(cType===3){//constant
					str.push(obj);
					allowed=type1;
					asterick=type_3;
				}
				else if(cType===4){
	                pcounter+=ptc.length;
	                ptc=[];
					bracToClose++;
					allowed=type0;
					asterick=empty;
					str.push(obj);
				}
				else if(cType===5){
					if(!bracToClose){
						throw(new math_function.exception("Closing parenthesis are more than opening one, wait What!!!"));
					}
	                while(pcounter--){	//loop over ptc
	    						str.push({value:")",type:5,pre:0,show:")"});
	    			}
	                pcounter=0;
					bracToClose--;
					allowed=type1;
					asterick=type_3;
					str.push(obj);
				}
				else if(cType===6){
					if(pre.hasDec){
						throw(new math_function.exception("Two decimals are not allowed in one number"));
					}
					if(pre.type!==1){
						pre={value:0,type:1,pre:0};	//pre needs to be changed as it will the last value now to be safe in later code
						str.push(pre);
						inc(ptc,-1);
					}
					allowed=type6;
					inc(ptc,1);
					asterick=empty;
					pre.value+=cEv;
					pre.hasDec=true;
				}
				else if(cType===7){
					allowed=type1;
					asterick=type_3;
					inc(ptc,1);
					str.push(obj);
				}
				if(cType===8){
					allowed=type0;
					asterick=empty;
					inc(ptc,4).push(4);
					str.push(obj);
					str.push({value:"(",type:4,pre:0,show:"("});
				}
				else if(cType===9){
					if(pre.type===9){
						if(pre.value===math_function.math.add){
							pre.value=cEv;
							pre.show=cShow;
							inc(ptc,1);
						}
						else if(pre.value===math_function.math.sub&&cShow==='-'){
							pre.value=math_function.math.add;
							pre.show='+';
							inc(ptc,1);
						}
					}
					else if(pre.type!==5&&pre.type!==7&&pre.type!==1&&pre.type!==3&&pre.type!==13){//changesign only when negative is found
						if(cToken==='-'){//do nothing for + token
										//don't add with the above if statement as that will run the else statement of parent if on Ctoken +
							allowed=type0;
							asterick=empty;
							inc(ptc,2).push(2);
							str.push({value:math_function.math.changeSign,type:0,pre:21,show:"-"});
							str.push({value:"(",type:4,pre:0,show:"("});
						}
					}
					else{
						str.push(obj);
						inc(ptc,2);
					}
					allowed=type0;
					asterick=empty;
				}
				else if(cType===10){
					allowed=type0;
					asterick=empty;
					inc(ptc,2);
					str.push(obj);
				}
				else if(cType===11){
					allowed=type0;
					asterick=empty;
					str.push(obj);
				}
				else if(cType===12){
					allowed=type0;
					asterick=empty;
					inc(ptc,6).push(6);
					str.push(obj);
					str.push({value:"(",type:4,pre:0});
				}
				else if(cType===13){
					allowed=type1;
					asterick=type_3;
					str.push(obj);
				}
				inc(ptc,-1);
				prevKey=key;
			}
			for(var j=ptc.length;j--;){	//loop over ptc
				if(ptc[j]===0){

					str.push({value:")",show:")",type:5,pre:3});
					inc(ptc,-1).pop();
				}
			}
			if (allowed[5]!==true) {
				throw(new math_function.exception("complete the expression"));
			}
			while(bracToClose--)
				str.push({value:")",show:")",type:5,pre:3});

			str.push({type:5,value:")",show:")",pre:0});
	//        console.log(str);
			return new math_function(str);
		};
	    var lexer=math_function;

	lexer.prototype.toPostfix = function () {
			var post=[],elem,popped,prep,pre,ele;
	    	var stack=[{value:"(",type:4,pre:0}];
			var arr=this.value;
			for (var i=1; i < arr.length; i++) {
				if(arr[i].type===1||arr[i].type===3||arr[i].type===13){	//if token is number,constant,or n(which is also a special constant in our case)
					if(arr[i].type===1)
						arr[i].value=Number(arr[i].value);
					post.push(arr[i]);
				}
				else if(arr[i].type===4){
					stack.push(arr[i]);
				}
				else if(arr[i].type===5){
					while((popped=stack.pop()).type!==4){
						post.push(popped);
					}
				}
				else if(arr[i].type===11){
					while((popped=stack.pop()).type!==4){
						post.push(popped);
					}
					stack.push(popped);
				}
				else {
					elem=arr[i];
					pre=elem.pre;
					ele=stack[stack.length-1];
					prep=ele.pre;
					var flag=ele.value=='Math.pow'&&elem.value=='Math.pow';
					if(pre>prep)stack.push(elem);
					else {
						while(prep>=pre&&!flag||flag&&pre<prep){
							popped=stack.pop();
							ele=stack[stack.length-1];
							post.push(popped);
							prep=ele.pre;
							flag=elem.value=='Math.pow'&&ele.value=='Math.pow';
						}
						stack.push(elem);
					}
				}
			}
			return new lexer(post);
		};
	    var postfix=lexer;

	postfix.prototype.postfixEval = function (UserDefined) {
		UserDefined=UserDefined||{};
		UserDefined.PI=Math.PI;
		UserDefined.E=Math.E;
		var stack=[],pop1,pop2,pop3;
		var arr=this.value;
		var bool=(typeof UserDefined.n!=="undefined");
		for(var i=0;i<arr.length;i++){
			if(arr[i].type===1){
				stack.push({value:arr[i].value,type:1});
			}
			else if(arr[i].type===3){
				stack.push({value:UserDefined[arr[i].value],type:1});
			}
			else if(arr[i].type===0){
				if(typeof stack[stack.length-1].type==="undefined"){
					stack[stack.length-1].value.push(arr[i]);
				}
				else stack[stack.length-1].value=arr[i].value(stack[stack.length-1].value);
			}
			else if(arr[i].type===7){
				if(typeof stack[stack.length-1].type==="undefined"){
					stack[stack.length-1].value.push(arr[i]);
				}
				else stack[stack.length-1].value=arr[i].value(stack[stack.length-1].value);
			}
			else if(arr[i].type===8){
				pop1=stack.pop();
				pop2=stack.pop();
				stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
			}
			else if(arr[i].type===10){
				pop1=stack.pop();
				pop2=stack.pop();
				if(typeof pop2.type==="undefined"){
					pop2.value=pop2.concat(pop1);
					pop2.value.push(arr[i]);
					stack.push(pop2);
				}
				else if (typeof pop1.type==="undefined") {
					pop1.unshift(pop2);
					pop1.push(arr[i]);
					stack.push(pop1);
				}
				else{
					stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
	            }
			}
			else if(arr[i].type===2||arr[i].type===9){
				pop1=stack.pop();
				pop2=stack.pop();
				if(typeof pop2.type==="undefined"){
	                console.log(pop2);
					pop2=pop2.concat(pop1);
					pop2.push(arr[i]);
					stack.push(pop2);
				}
				else if (typeof pop1.type==="undefined") {
					pop1.unshift(pop2);
					pop1.push(arr[i]);
					stack.push(pop1);
				}
				else{
					stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
				}
			}
			else if(arr[i].type===12){
				pop1=stack.pop();
				if (typeof pop1.type!=="undefined") {
					pop1=[pop1];
				}
				pop2=stack.pop();
				pop3=stack.pop();
				stack.push({type:1,value:arr[i].value(pop3.value,pop2.value,new postfix(pop1))});
			}
			else if(arr[i].type===13){
				if(bool){
					stack.push({value:UserDefined[arr[i].value],type:3});
				}
				else stack.push([arr[i]]);
			}
		}
		if (stack.length>1) {
			throw(new postfix.exception("Uncaught Syntax error"));
		}
		return stack[0].value>1000000000000000?"Infinity":parseFloat(stack[0].value.toFixed(15));
	};
	postfix.eval=function(str,tokens,obj){
		if (typeof tokens==="undefined") {
			return this.lex(str).toPostfix().postfixEval();
		}
		else if (typeof obj==="undefined") {
			if (typeof tokens.length!=="undefined") 
				return this.lex(str,tokens).toPostfix().postfixEval();
			else
				return this.lex(str).toPostfix().postfixEval(tokens);
		}
		else
			return this.lex(str,tokens).toPostfix().postfixEval(obj);
	};
	var postfix_evaluator=postfix;

	postfix_evaluator.prototype.formulaEval = function () {
		var pop1,pop2,pop3;
		var disp=[];
		var arr=this.value;
		for(var i=0;i<arr.length;i++){
			if(arr[i].type===1||arr[i].type===3){
				disp.push({value:arr[i].type===3?arr[i].show:arr[i].value,type:1});
			}
			else if(arr[i].type===13){
				disp.push({value:arr[i].show,type:1});
			}
			else if(arr[i].type===0){
				disp[disp.length-1]={value:arr[i].show+(arr[i].show!="-"?"(":"")+disp[disp.length-1].value+(arr[i].show!="-"?")":""),type:0};
			}
			else if(arr[i].type===7){
				disp[disp.length-1]={value:(disp[disp.length-1].type!=1?"(":"")+disp[disp.length-1].value+(disp[disp.length-1].type!=1?")":"")+arr[i].show,type:7};
			}
			else if(arr[i].type===10){
				pop1=disp.pop();
				pop2=disp.pop();
				if(arr[i].show==='P'||arr[i].show==='C')disp.push({value:"<sup>"+pop2.value+"</sup>"+arr[i].show+"<sub>"+pop1.value+"</sub>",type:10});
				else disp.push({value:(pop2.type!=1?"(":"")+pop2.value+(pop2.type!=1?")":"")+"<sup>"+pop1.value+"</sup>",type:1});
			}
			else if(arr[i].type===2||arr[i].type===9){
				pop1=disp.pop();
				pop2=disp.pop();
				disp.push({value:(pop2.type!=1?"(":"")+pop2.value+(pop2.type!=1?")":"")+arr[i].show+(pop1.type!=1?"(":"")+pop1.value+(pop1.type!=1?")":""),type:arr[i].type});
			}
			else if(arr[i].type===12){
				pop1=disp.pop();
				pop2=disp.pop();
				pop3=disp.pop();
				disp.push({value:arr[i].show+"("+pop3.value+","+pop2.value+","+pop1.value+")",type:12});
			}
		}
		return disp[0].value;
	};
	var formula_evaluator=postfix_evaluator;

	/**
	 * Module dependencies
	 */




	/**
	 * Constantes
	 */
	var MAX_STACK = 100; // should be enough for a single calc()...
	var NESTED_CALC_RE = /(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g;

	/**
	 * Global variables
	 */
	var stack;

	/**
	 * Expose reduceCSSCalc plugin
	 *
	 * @type {Function}
	 */
	var reduceCssCalc = reduceCSSCalc;

	/**
	 * Reduce CSS calc() in a string, whenever it's possible
	 *
	 * @param {String} value css input
	 */
	function reduceCSSCalc(value, decimalPrecision) {
	  stack = 0;
	  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision);

	  // Allow calc() on multiple lines
	  value = value.replace(/\n+/g, " ");

	  /**
	   * Evaluates an expression
	   *
	   * @param {String} expression
	   * @returns {String}
	   */
	  function evaluateExpression (expression, functionIdentifier, call) {
	    if (stack++ > MAX_STACK) {
	      stack = 0;
	      throw new Error("Call stack overflow for " + call)
	    }

	    if (expression === "") {
	      throw new Error(functionIdentifier + "(): '" + call + "' must contain a non-whitespace string")
	    }

	    expression = evaluateNestedExpression(expression, call);

	    var units = getUnitsInExpression(expression);

	    // If the expression contains multiple units or CSS variables,
	    // then let the expression be (i.e. browser calc())
	    if (units.length > 1 || expression.indexOf("var(") > -1) {
	      return functionIdentifier + "(" + expression + ")"
	    }

	    var unit = units[0] || "";

	    if (unit === "%") {
	      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):
	      // console.log(expression)
	      expression = expression.replace(/\b[0-9\.]+%/g, function(percent) {
	        return parseFloat(percent.slice(0, -1)) * 0.01
	      });
	    }

	    // Remove units in expression:
	    var toEvaluate = expression.replace(new RegExp(unit, "gi"), "");
	    var result;

	    try {
	      result = formula_evaluator.eval(toEvaluate);
	    }
	    catch (e) {
	      return functionIdentifier + "(" + expression + ")"
	    }

	    // Transform back to a percentage result:
	    if (unit === "%") {
	      result *= 100;
	    }

	    // adjust rounding shit
	    // (0.1 * 0.2 === 0.020000000000000004)
	    if (functionIdentifier.length || unit === "%") {
	      result = Math.round(result * decimalPrecision) / decimalPrecision;
	    }

	    // Add unit
	    result += unit;

	    return result
	  }

	  /**
	   * Evaluates nested expressions
	   *
	   * @param {String} expression
	   * @returns {String}
	   */
	  function evaluateNestedExpression(expression, call) {
	    // Remove the calc part from nested expressions to ensure
	    // better browser compatibility
	    expression = expression.replace(/((?:\-[a-z]+\-)?calc)/g, "");
	    var evaluatedPart = "";
	    var nonEvaluatedPart = expression;
	    var matches;
	    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {
	      if (matches[0].index > 0) {
	        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);
	      }

	      var balancedExpr = balancedMatch("(", ")", nonEvaluatedPart.substring([0].index));
	      if (balancedExpr.body === "") {
	        throw new Error("'" + expression + "' must contain a non-whitespace string")
	      }

	      var evaluated = evaluateExpression(balancedExpr.body, "", call);

	      evaluatedPart += balancedExpr.pre + evaluated;
	      nonEvaluatedPart = balancedExpr.post;
	    }

	    return evaluatedPart + nonEvaluatedPart
	  }

	  return reduceFunctionCall_1(value, /((?:\-[a-z]+\-)?calc)\(/, evaluateExpression)
	}

	/**
	 * Checks what units are used in an expression
	 *
	 * @param {String} expression
	 * @returns {Array}
	 */

	function getUnitsInExpression(expression) {
	  var uniqueUnits = [];
	  var uniqueLowerCaseUnits = [];
	  var unitRegEx = /[\.0-9]([%a-z]+)/gi;
	  var matches = unitRegEx.exec(expression);

	  while (matches) {
	    if (!matches || !matches[1]) {
	      continue
	    }

	    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {
	      uniqueUnits.push(matches[1]);
	      uniqueLowerCaseUnits.push(matches[1].toLowerCase());
	    }

	    matches = unitRegEx.exec(expression);
	  }

	  return uniqueUnits
	}

	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(source, true).forEach(function (key) { _defineProperty$c(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$c(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray$4(arr) { return _arrayWithoutHoles$4(arr) || _iterableToArray$5(arr) || _nonIterableSpread$4(); }

	function _nonIterableSpread$4() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$5(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$4(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }
	var stringCache = {
	  widthCache: {},
	  cacheCount: 0
	};
	var MAX_CACHE_NUM = 2000;
	var SPAN_STYLE = {
	  position: 'absolute',
	  top: '-20000px',
	  left: 0,
	  padding: 0,
	  margin: 0,
	  border: 'none',
	  whiteSpace: 'pre'
	};
	var STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'lineHeight', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];
	var MEASUREMENT_SPAN_ID = 'recharts_measurement_span';

	function autoCompleteStyle(name, value) {
	  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {
	    return "".concat(value, "px");
	  }

	  return value;
	}

	function camelToMiddleLine(text) {
	  var strs = text.split('');
	  var formatStrs = strs.reduce(function (result, entry) {
	    if (entry === entry.toUpperCase()) {
	      return [].concat(_toConsumableArray$4(result), ['-', entry.toLowerCase()]);
	    }

	    return [].concat(_toConsumableArray$4(result), [entry]);
	  }, []);
	  return formatStrs.join('');
	}

	var getStyleString = function getStyleString(style) {
	  return Object.keys(style).reduce(function (result, s) {
	    return "".concat(result).concat(camelToMiddleLine(s), ":").concat(autoCompleteStyle(s, style[s]), ";");
	  }, '');
	};
	var getStringSize = function getStringSize(text) {
	  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (text === undefined || text === null || isSsr()) {
	    return {
	      width: 0,
	      height: 0
	    };
	  }

	  var str = "".concat(text);
	  var styleString = getStyleString(style);
	  var cacheKey = "".concat(str, "-").concat(styleString);

	  if (stringCache.widthCache[cacheKey]) {
	    return stringCache.widthCache[cacheKey];
	  }

	  try {
	    var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);

	    if (!measurementSpan) {
	      measurementSpan = document.createElement('span');
	      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);
	      document.body.appendChild(measurementSpan);
	    } // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)
	    // https://en.wikipedia.org/wiki/Content_Security_Policy


	    var measurementSpanStyle = _objectSpread$9({}, SPAN_STYLE, {}, style);

	    Object.keys(measurementSpanStyle).map(function (styleKey) {
	      measurementSpan.style[styleKey] = measurementSpanStyle[styleKey];
	      return styleKey;
	    });
	    measurementSpan.textContent = str;
	    var rect = measurementSpan.getBoundingClientRect();
	    var result = {
	      width: rect.width,
	      height: rect.height
	    };
	    stringCache.widthCache[cacheKey] = result;

	    if (++stringCache.cacheCount > MAX_CACHE_NUM) {
	      stringCache.cacheCount = 0;
	      stringCache.widthCache = {};
	    }

	    return result;
	  } catch (e) {
	    return {
	      width: 0,
	      height: 0
	    };
	  }
	};
	var getOffset = function getOffset(el) {
	  var html = el.ownerDocument.documentElement;
	  var box = {
	    top: 0,
	    left: 0
	  }; // If we don't have gBCR, just use 0,0 rather than error
	  // BlackBerry 5, iOS 3 (original iPhone)

	  if (typeof el.getBoundingClientRect !== 'undefined') {
	    box = el.getBoundingClientRect();
	  }

	  return {
	    top: box.top + window.pageYOffset - html.clientTop,
	    left: box.left + window.pageXOffset - html.clientLeft
	  };
	};
	/**
	 * Calculate coordinate of cursor in chart
	 * @param  {Object} event  Event object
	 * @param  {Object} offset The offset of main part in the svg element
	 * @return {Object}        {chartX, chartY}
	 */

	var calculateChartCoordinate = function calculateChartCoordinate(event, offset) {
	  return {
	    chartX: Math.round(event.pageX - offset.left),
	    chartY: Math.round(event.pageY - offset.top)
	  };
	};

	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(source, true).forEach(function (key) { _defineProperty$d(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$d(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$a(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$a = function _typeof(obj) { return typeof obj; }; } else { _typeof$a = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$a(obj); }

	function _extends$7() { _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }

	function _objectWithoutProperties$5(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$6(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$6(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$8(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$8(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$8(Constructor.prototype, protoProps); if (staticProps) _defineProperties$8(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$8(self, call) { if (call && (_typeof$a(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$9(self); }

	function _assertThisInitialized$9(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$8(o) { _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$8(o); }

	function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$8(subClass, superClass); }

	function _setPrototypeOf$8(o, p) { _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$8(o, p); }
	var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;

	var calculateWordWidths = function calculateWordWidths(props) {
	  try {
	    var words = !isNil_1(props.children) ? props.children.toString().split(BREAKING_SPACES) : [];
	    var wordsWithComputedWidth = words.map(function (word) {
	      return {
	        word: word,
	        width: getStringSize(word, props.style).width
	      };
	    });
	    var spaceWidth = getStringSize("\xA0", props.style).width;
	    return {
	      wordsWithComputedWidth: wordsWithComputedWidth,
	      spaceWidth: spaceWidth
	    };
	  } catch (e) {
	    return null;
	  }
	};

	var Text =
	/*#__PURE__*/
	function (_Component) {
	  _inherits$8(Text, _Component);

	  function Text(_props) {
	    var _this;

	    _classCallCheck$8(this, Text);

	    _this = _possibleConstructorReturn$8(this, _getPrototypeOf$8(Text).call(this, _props));

	    _this.getWordsWithoutCalculate = function (props) {
	      var words = !isNil_1(props.children) ? props.children.toString().split(BREAKING_SPACES) : [];
	      return [{
	        words: words
	      }];
	    };

	    _this.state = {
	      wordsByLines: _this.getWordsByLines(_props, true)
	    };
	    return _this;
	  }

	  _createClass$8(Text, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateWordsByLines(this.props, true);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      if (prevProps.width !== this.props.width || prevProps.scaleToFit !== this.props.scaleToFit || prevProps.children !== this.props.children || prevProps.style !== this.props.style) {
	        var needCalculate = this.props.children !== prevProps.children || this.props.style !== prevProps.style;
	        this.updateWordsByLines(this.props, needCalculate);
	      }
	    }
	  }, {
	    key: "updateWordsByLines",
	    value: function updateWordsByLines(props, needCalculate) {
	      this.setState({
	        wordsByLines: this.getWordsByLines(props, needCalculate)
	      });
	    }
	  }, {
	    key: "getWordsByLines",
	    value: function getWordsByLines(props, needCalculate) {
	      // Only perform calculations if using features that require them (multiline, scaleToFit)
	      if ((props.width || props.scaleToFit) && !isSsr()) {
	        if (needCalculate) {
	          var wordWidths = calculateWordWidths(props);

	          if (wordWidths) {
	            var wordsWithComputedWidth = wordWidths.wordsWithComputedWidth,
	                spaceWidth = wordWidths.spaceWidth;
	            this.wordsWithComputedWidth = wordsWithComputedWidth;
	            this.spaceWidth = spaceWidth;
	          } else {
	            return this.getWordsWithoutCalculate(props);
	          }
	        }

	        return this.calculateWordsByLines(this.wordsWithComputedWidth, this.spaceWidth, props.width);
	      }

	      return this.getWordsWithoutCalculate(props);
	    }
	  }, {
	    key: "calculateWordsByLines",
	    value: function calculateWordsByLines(wordsWithComputedWidth, spaceWidth, lineWidth) {
	      var scaleToFit = this.props.scaleToFit;
	      return (wordsWithComputedWidth || []).reduce(function (result, _ref) {
	        var word = _ref.word,
	            width = _ref.width;
	        var currentLine = result[result.length - 1];

	        if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < lineWidth)) {
	          // Word can be added to an existing line
	          currentLine.words.push(word);
	          currentLine.width += width + spaceWidth;
	        } else {
	          // Add first word to line or word is too long to scaleToFit on existing line
	          var newLine = {
	            words: [word],
	            width: width
	          };
	          result.push(newLine);
	        }

	        return result;
	      }, []);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          dx = _this$props.dx,
	          dy = _this$props.dy,
	          textAnchor = _this$props.textAnchor,
	          verticalAnchor = _this$props.verticalAnchor,
	          scaleToFit = _this$props.scaleToFit,
	          angle = _this$props.angle,
	          lineHeight = _this$props.lineHeight,
	          capHeight = _this$props.capHeight,
	          className = _this$props.className,
	          textProps = _objectWithoutProperties$5(_this$props, ["dx", "dy", "textAnchor", "verticalAnchor", "scaleToFit", "angle", "lineHeight", "capHeight", "className"]);

	      var wordsByLines = this.state.wordsByLines;

	      if (!isNumOrStr(textProps.x) || !isNumOrStr(textProps.y)) {
	        return null;
	      }

	      var x = textProps.x + (isNumber$3(dx) ? dx : 0);
	      var y = textProps.y + (isNumber$3(dy) ? dy : 0);
	      var startDy;

	      switch (verticalAnchor) {
	        case 'start':
	          startDy = reduceCssCalc("calc(".concat(capHeight, ")"));
	          break;

	        case 'middle':
	          startDy = reduceCssCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
	          break;

	        default:
	          startDy = reduceCssCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
	          break;
	      }

	      var transforms = [];

	      if (scaleToFit) {
	        var lineWidth = wordsByLines[0].width;
	        transforms.push("scale(".concat(this.props.width / lineWidth, ")"));
	      }

	      if (angle) {
	        transforms.push("rotate(".concat(angle, ", ").concat(x, ", ").concat(y, ")"));
	      }

	      if (transforms.length) {
	        textProps.transform = transforms.join(' ');
	      }

	      return react.createElement("text", _extends$7({}, getPresentationAttributes(textProps), filterEventAttributes(textProps), {
	        x: x,
	        y: y,
	        className: classnames('recharts-text', className),
	        textAnchor: textAnchor
	      }), wordsByLines.map(function (line, index) {
	        return (// eslint-disable-next-line react/no-array-index-key
	          react.createElement("tspan", {
	            x: x,
	            dy: index === 0 ? startDy : lineHeight,
	            key: index
	          }, line.words.join(' '))
	        );
	      }));
	    }
	  }]);

	  return Text;
	}(react_3);

	Text.propTypes = _objectSpread$a({}, PRESENTATION_ATTRIBUTES, {
	  scaleToFit: propTypes.bool,
	  angle: propTypes.number,
	  textAnchor: propTypes.oneOf(['start', 'middle', 'end', 'inherit']),
	  verticalAnchor: propTypes.oneOf(['start', 'middle', 'end']),
	  style: propTypes.object
	});
	Text.defaultProps = {
	  x: 0,
	  y: 0,
	  lineHeight: '1em',
	  capHeight: '0.71em',
	  // Magic number from d3
	  scaleToFit: false,
	  textAnchor: 'start',
	  verticalAnchor: 'end' // Maintain compat with existing charts / default SVG behavior

	};

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined
	          ? (current === current && !isSymbol_1(current))
	          : comparator(current, computed)
	        )) {
	      var computed = current,
	          result = value;
	    }
	  }
	  return result;
	}

	var _baseExtremum = baseExtremum;

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */
	function baseGt(value, other) {
	  return value > other;
	}

	var _baseGt = baseGt;

	/**
	 * Computes the maximum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * _.max([4, 2, 8, 6]);
	 * // => 8
	 *
	 * _.max([]);
	 * // => undefined
	 */
	function max$1(array) {
	  return (array && array.length)
	    ? _baseExtremum(array, identity_1, _baseGt)
	    : undefined;
	}

	var max_1 = max$1;

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	var _baseLt = baseLt;

	/**
	 * Computes the minimum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => undefined
	 */
	function min$2(array) {
	  return (array && array.length)
	    ? _baseExtremum(array, identity_1, _baseLt)
	    : undefined;
	}

	var min_1 = min$2;

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map$2(collection, iteratee) {
	  var func = isArray_1(collection) ? _arrayMap : _baseMap;
	  return func(collection, _baseIteratee(iteratee));
	}

	var map_1 = map$2;

	/**
	 * Creates a flattened array of values by running each element in `collection`
	 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [n, n];
	 * }
	 *
	 * _.flatMap([1, 2], duplicate);
	 * // => [1, 1, 2, 2]
	 */
	function flatMap(collection, iteratee) {
	  return _baseFlatten(map_1(collection, iteratee), 1);
	}

	var flatMap_1 = flatMap;

	/*
	 *  decimal.js-light v2.5.0
	 *  An arbitrary-precision Decimal type for JavaScript.
	 *  https://github.com/MikeMcl/decimal.js-light
	 *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
	 *  MIT Expat Licence
	 */


	// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //


	// The limit on the value of `precision`, and on the value of the first argument to
	// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	var MAX_DIGITS = 1e9,                        // 0 to 1e9


	  // The initial configuration properties of the Decimal constructor.
	  defaults$1 = {

	    // These values must be integers within the stated ranges (inclusive).
	    // Most of these values can be changed during run-time using `Decimal.config`.

	    // The maximum number of significant digits of the result of a calculation or base conversion.
	    // E.g. `Decimal.config({ precision: 20 });`
	    precision: 20,                         // 1 to MAX_DIGITS

	    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
	    // `toFixed`, `toPrecision` and `toSignificantDigits`.
	    //
	    // ROUND_UP         0 Away from zero.
	    // ROUND_DOWN       1 Towards zero.
	    // ROUND_CEIL       2 Towards +Infinity.
	    // ROUND_FLOOR      3 Towards -Infinity.
	    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	    //
	    // E.g.
	    // `Decimal.rounding = 4;`
	    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	    rounding: 4,                           // 0 to 8

	    // The exponent value at and beneath which `toString` returns exponential notation.
	    // JavaScript numbers: -7
	    toExpNeg: -7,                          // 0 to -MAX_E

	    // The exponent value at and above which `toString` returns exponential notation.
	    // JavaScript numbers: 21
	    toExpPos:  21,                         // 0 to MAX_E

	    // The natural logarithm of 10.
	    // 115 digits
	    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'
	  },


	// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //


	  Decimal,
	  external = true,

	  decimalError = '[DecimalError] ',
	  invalidArgument = decimalError + 'Invalid argument: ',
	  exponentOutOfRange = decimalError + 'Exponent out of range: ',

	  mathfloor = Math.floor,
	  mathpow = Math.pow,

	  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

	  ONE,
	  BASE = 1e7,
	  LOG_BASE = 7,
	  MAX_SAFE_INTEGER$2 = 9007199254740991,
	  MAX_E = mathfloor(MAX_SAFE_INTEGER$2 / LOG_BASE),    // 1286742750677284

	  // Decimal.prototype object
	  P = {};


	// Decimal prototype methods


	/*
	 *  absoluteValue                       abs
	 *  comparedTo                          cmp
	 *  decimalPlaces                       dp
	 *  dividedBy                           div
	 *  dividedToIntegerBy                  idiv
	 *  equals                              eq
	 *  exponent
	 *  greaterThan                         gt
	 *  greaterThanOrEqualTo                gte
	 *  isInteger                           isint
	 *  isNegative                          isneg
	 *  isPositive                          ispos
	 *  isZero
	 *  lessThan                            lt
	 *  lessThanOrEqualTo                   lte
	 *  logarithm                           log
	 *  minus                               sub
	 *  modulo                              mod
	 *  naturalExponential                  exp
	 *  naturalLogarithm                    ln
	 *  negated                             neg
	 *  plus                                add
	 *  precision                           sd
	 *  squareRoot                          sqrt
	 *  times                               mul
	 *  toDecimalPlaces                     todp
	 *  toExponential
	 *  toFixed
	 *  toInteger                           toint
	 *  toNumber
	 *  toPower                             pow
	 *  toPrecision
	 *  toSignificantDigits                 tosd
	 *  toString
	 *  valueOf                             val
	 */


	/*
	 * Return a new Decimal whose value is the absolute value of this Decimal.
	 *
	 */
	P.absoluteValue = P.abs = function () {
	  var x = new this.constructor(this);
	  if (x.s) x.s = 1;
	  return x;
	};


	/*
	 * Return
	 *   1    if the value of this Decimal is greater than the value of `y`,
	 *  -1    if the value of this Decimal is less than the value of `y`,
	 *   0    if they have the same value
	 *
	 */
	P.comparedTo = P.cmp = function (y) {
	  var i, j, xdL, ydL,
	    x = this;

	  y = new x.constructor(y);

	  // Signs differ?
	  if (x.s !== y.s) return x.s || -y.s;

	  // Compare exponents.
	  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;

	  xdL = x.d.length;
	  ydL = y.d.length;

	  // Compare digit by digit.
	  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;
	  }

	  // Compare lengths.
	  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;
	};


	/*
	 * Return the number of decimal places of the value of this Decimal.
	 *
	 */
	P.decimalPlaces = P.dp = function () {
	  var x = this,
	    w = x.d.length - 1,
	    dp = (w - x.e) * LOG_BASE;

	  // Subtract the number of trailing zeros of the last word.
	  w = x.d[w];
	  if (w) for (; w % 10 == 0; w /= 10) dp--;

	  return dp < 0 ? 0 : dp;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to
	 * `precision` significant digits.
	 *
	 */
	P.dividedBy = P.div = function (y) {
	  return divide$1(this, new this.constructor(y));
	};


	/*
	 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	 * by the value of `y`, truncated to `precision` significant digits.
	 *
	 */
	P.dividedToIntegerBy = P.idiv = function (y) {
	  var x = this,
	    Ctor = x.constructor;
	  return round(divide$1(x, new Ctor(y), 0, 1), Ctor.precision);
	};


	/*
	 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	 *
	 */
	P.equals = P.eq = function (y) {
	  return !this.cmp(y);
	};


	/*
	 * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).
	 *
	 */
	P.exponent = function () {
	  return getBase10Exponent(this);
	};


	/*
	 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	 * false.
	 *
	 */
	P.greaterThan = P.gt = function (y) {
	  return this.cmp(y) > 0;
	};


	/*
	 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	 * otherwise return false.
	 *
	 */
	P.greaterThanOrEqualTo = P.gte = function (y) {
	  return this.cmp(y) >= 0;
	};


	/*
	 * Return true if the value of this Decimal is an integer, otherwise return false.
	 *
	 */
	P.isInteger = P.isint = function () {
	  return this.e > this.d.length - 2;
	};


	/*
	 * Return true if the value of this Decimal is negative, otherwise return false.
	 *
	 */
	P.isNegative = P.isneg = function () {
	  return this.s < 0;
	};


	/*
	 * Return true if the value of this Decimal is positive, otherwise return false.
	 *
	 */
	P.isPositive = P.ispos = function () {
	  return this.s > 0;
	};


	/*
	 * Return true if the value of this Decimal is 0, otherwise return false.
	 *
	 */
	P.isZero = function () {
	  return this.s === 0;
	};


	/*
	 * Return true if the value of this Decimal is less than `y`, otherwise return false.
	 *
	 */
	P.lessThan = P.lt = function (y) {
	  return this.cmp(y) < 0;
	};


	/*
	 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	 *
	 */
	P.lessThanOrEqualTo = P.lte = function (y) {
	  return this.cmp(y) < 1;
	};


	/*
	 * Return the logarithm of the value of this Decimal to the specified base, truncated to
	 * `precision` significant digits.
	 *
	 * If no base is specified, return log[10](x).
	 *
	 * log[base](x) = ln(x) / ln(base)
	 *
	 * The maximum error of the result is 1 ulp (unit in the last place).
	 *
	 * [base] {number|string|Decimal} The base of the logarithm.
	 *
	 */
	P.logarithm = P.log = function (base) {
	  var r,
	    x = this,
	    Ctor = x.constructor,
	    pr = Ctor.precision,
	    wpr = pr + 5;

	  // Default base is 10.
	  if (base === void 0) {
	    base = new Ctor(10);
	  } else {
	    base = new Ctor(base);

	    // log[-b](x) = NaN
	    // log[0](x)  = NaN
	    // log[1](x)  = NaN
	    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');
	  }

	  // log[b](-x) = NaN
	  // log[b](0) = -Infinity
	  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));

	  // log[b](1) = 0
	  if (x.eq(ONE)) return new Ctor(0);

	  external = false;
	  r = divide$1(ln(x, wpr), ln(base, wpr), wpr);
	  external = true;

	  return round(r, pr);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to
	 * `precision` significant digits.
	 *
	 */
	P.minus = P.sub = function (y) {
	  var x = this;
	  y = new x.constructor(y);
	  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to
	 * `precision` significant digits.
	 *
	 */
	P.modulo = P.mod = function (y) {
	  var q,
	    x = this,
	    Ctor = x.constructor,
	    pr = Ctor.precision;

	  y = new Ctor(y);

	  // x % 0 = NaN
	  if (!y.s) throw Error(decimalError + 'NaN');

	  // Return x if x is 0.
	  if (!x.s) return round(new Ctor(x), pr);

	  // Prevent rounding of intermediate calculations.
	  external = false;
	  q = divide$1(x, y, 0, 1).times(y);
	  external = true;

	  return x.minus(q);
	};


	/*
	 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	 * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`
	 * significant digits.
	 *
	 */
	P.naturalExponential = P.exp = function () {
	  return exp$3(this);
	};


	/*
	 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	 * truncated to `precision` significant digits.
	 *
	 */
	P.naturalLogarithm = P.ln = function () {
	  return ln(this);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	 * -1.
	 *
	 */
	P.negated = P.neg = function () {
	  var x = new this.constructor(this);
	  x.s = -x.s || 0;
	  return x;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to
	 * `precision` significant digits.
	 *
	 */
	P.plus = P.add = function (y) {
	  var x = this;
	  y = new x.constructor(y);
	  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));
	};


	/*
	 * Return the number of significant digits of the value of this Decimal.
	 *
	 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	 *
	 */
	P.precision = P.sd = function (z) {
	  var e, sd, w,
	    x = this;

	  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

	  e = getBase10Exponent(x) + 1;
	  w = x.d.length - 1;
	  sd = w * LOG_BASE + 1;
	  w = x.d[w];

	  // If non-zero...
	  if (w) {

	    // Subtract the number of trailing zeros of the last word.
	    for (; w % 10 == 0; w /= 10) sd--;

	    // Add the number of digits of the first word.
	    for (w = x.d[0]; w >= 10; w /= 10) sd++;
	  }

	  return z && e > sd ? e : sd;
	};


	/*
	 * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`
	 * significant digits.
	 *
	 */
	P.squareRoot = P.sqrt = function () {
	  var e, n, pr, r, s, t, wpr,
	    x = this,
	    Ctor = x.constructor;

	  // Negative or zero?
	  if (x.s < 1) {
	    if (!x.s) return new Ctor(0);

	    // sqrt(-x) = NaN
	    throw Error(decimalError + 'NaN');
	  }

	  e = getBase10Exponent(x);
	  external = false;

	  // Initial estimate.
	  s = Math.sqrt(+x);

	  // Math.sqrt underflow/overflow?
	  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	  if (s == 0 || s == 1 / 0) {
	    n = digitsToString(x.d);
	    if ((n.length + e) % 2 == 0) n += '0';
	    s = Math.sqrt(n);
	    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

	    if (s == 1 / 0) {
	      n = '1e' + e;
	    } else {
	      n = s.toExponential();
	      n = n.slice(0, n.indexOf('e') + 1) + e;
	    }

	    r = new Ctor(n);
	  } else {
	    r = new Ctor(s.toString());
	  }

	  pr = Ctor.precision;
	  s = wpr = pr + 3;

	  // Newton-Raphson iteration.
	  for (;;) {
	    t = r;
	    r = t.plus(divide$1(x, t, wpr + 2)).times(0.5);

	    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {
	      n = n.slice(wpr - 3, wpr + 1);

	      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	      // 4999, i.e. approaching a rounding boundary, continue the iteration.
	      if (s == wpr && n == '4999') {

	        // On the first iteration only, check to see if rounding up gives the exact result as the
	        // nines may infinitely repeat.
	        round(t, pr + 1, 0);

	        if (t.times(t).eq(x)) {
	          r = t;
	          break;
	        }
	      } else if (n != '9999') {
	        break;
	      }

	      wpr += 4;
	    }
	  }

	  external = true;

	  return round(r, pr);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to
	 * `precision` significant digits.
	 *
	 */
	P.times = P.mul = function (y) {
	  var carry, e, i, k, r, rL, t, xdL, ydL,
	    x = this,
	    Ctor = x.constructor,
	    xd = x.d,
	    yd = (y = new Ctor(y)).d;

	  // Return 0 if either is 0.
	  if (!x.s || !y.s) return new Ctor(0);

	  y.s *= x.s;
	  e = x.e + y.e;
	  xdL = xd.length;
	  ydL = yd.length;

	  // Ensure xd points to the longer array.
	  if (xdL < ydL) {
	    r = xd;
	    xd = yd;
	    yd = r;
	    rL = xdL;
	    xdL = ydL;
	    ydL = rL;
	  }

	  // Initialise the result array with zeros.
	  r = [];
	  rL = xdL + ydL;
	  for (i = rL; i--;) r.push(0);

	  // Multiply!
	  for (i = ydL; --i >= 0;) {
	    carry = 0;
	    for (k = xdL + i; k > i;) {
	      t = r[k] + yd[i] * xd[k - i - 1] + carry;
	      r[k--] = t % BASE | 0;
	      carry = t / BASE | 0;
	    }

	    r[k] = (r[k] + carry) % BASE | 0;
	  }

	  // Remove trailing zeros.
	  for (; !r[--rL];) r.pop();

	  if (carry) ++e;
	  else r.shift();

	  y.d = r;
	  y.e = e;

	  return external ? round(y, Ctor.precision) : y;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	 *
	 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toDecimalPlaces = P.todp = function (dp, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  x = new Ctor(x);
	  if (dp === void 0) return x;

	  checkInt32(dp, 0, MAX_DIGITS);

	  if (rm === void 0) rm = Ctor.rounding;
	  else checkInt32(rm, 0, 8);

	  return round(x, dp + getBase10Exponent(x) + 1, rm);
	};


	/*
	 * Return a string representing the value of this Decimal in exponential notation rounded to
	 * `dp` fixed decimal places using rounding mode `rounding`.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toExponential = function (dp, rm) {
	  var str,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) {
	    str = toString$4(x, true);
	  } else {
	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = round(new Ctor(x), dp + 1, rm);
	    str = toString$4(x, true, dp + 1);
	  }

	  return str;
	};


	/*
	 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	 * omitted.
	 *
	 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	 * (-0).toFixed(3) is '0.000'.
	 * (-0.5).toFixed(0) is '-0'.
	 *
	 */
	P.toFixed = function (dp, rm) {
	  var str, y,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) return toString$4(x);

	  checkInt32(dp, 0, MAX_DIGITS);

	  if (rm === void 0) rm = Ctor.rounding;
	  else checkInt32(rm, 0, 8);

	  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);
	  str = toString$4(y.abs(), false, dp + getBase10Exponent(y) + 1);

	  // To determine whether to add the minus sign look at the value before it was rounded,
	  // i.e. look at `x` rather than `y`.
	  return x.isneg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	 * rounding mode `rounding`.
	 *
	 */
	P.toInteger = P.toint = function () {
	  var x = this,
	    Ctor = x.constructor;
	  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);
	};


	/*
	 * Return the value of this Decimal converted to a number primitive.
	 *
	 */
	P.toNumber = function () {
	  return +this;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,
	 * truncated to `precision` significant digits.
	 *
	 * For non-integer or very large exponents pow(x, y) is calculated using
	 *
	 *   x^y = exp(y*ln(x))
	 *
	 * The maximum error is 1 ulp (unit in last place).
	 *
	 * y {number|string|Decimal} The power to which to raise this Decimal.
	 *
	 */
	P.toPower = P.pow = function (y) {
	  var e, k, pr, r, sign, yIsInt,
	    x = this,
	    Ctor = x.constructor,
	    guard = 12,
	    yn = +(y = new Ctor(y));

	  // pow(x, 0) = 1
	  if (!y.s) return new Ctor(ONE);

	  x = new Ctor(x);

	  // pow(0, y > 0) = 0
	  // pow(0, y < 0) = Infinity
	  if (!x.s) {
	    if (y.s < 1) throw Error(decimalError + 'Infinity');
	    return x;
	  }

	  // pow(1, y) = 1
	  if (x.eq(ONE)) return x;

	  pr = Ctor.precision;

	  // pow(x, 1) = x
	  if (y.eq(ONE)) return round(x, pr);

	  e = y.e;
	  k = y.d.length - 1;
	  yIsInt = e >= k;
	  sign = x.s;

	  if (!yIsInt) {

	    // pow(x < 0, y non-integer) = NaN
	    if (sign < 0) throw Error(decimalError + 'NaN');

	  // If y is a small integer use the 'exponentiation by squaring' algorithm.
	  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER$2) {
	    r = new Ctor(ONE);

	    // Max k of 9007199254740991 takes 53 loop iterations.
	    // Maximum digits array length; leaves [28, 34] guard digits.
	    e = Math.ceil(pr / LOG_BASE + 4);

	    external = false;

	    for (;;) {
	      if (k % 2) {
	        r = r.times(x);
	        truncate$1(r.d, e);
	      }

	      k = mathfloor(k / 2);
	      if (k === 0) break;

	      x = x.times(x);
	      truncate$1(x.d, e);
	    }

	    external = true;

	    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
	  }

	  // Result is negative if x is negative and the last digit of integer y is odd.
	  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;

	  x.s = 1;
	  external = false;
	  r = y.times(ln(x, pr + guard));
	  external = true;
	  r = exp$3(r);
	  r.s = sign;

	  return r;
	};


	/*
	 * Return a string representing the value of this Decimal rounded to `sd` significant digits
	 * using rounding mode `rounding`.
	 *
	 * Return exponential notation if `sd` is less than the number of digits necessary to represent
	 * the integer part of the value in normal notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toPrecision = function (sd, rm) {
	  var e, str,
	    x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    e = getBase10Exponent(x);
	    str = toString$4(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = round(new Ctor(x), sd, rm);
	    e = getBase10Exponent(x);
	    str = toString$4(x, sd <= e || e <= Ctor.toExpNeg, sd);
	  }

	  return str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	 * omitted.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toSignificantDigits = P.tosd = function (sd, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    sd = Ctor.precision;
	    rm = Ctor.rounding;
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	  }

	  return round(new Ctor(x), sd, rm);
	};


	/*
	 * Return a string representing the value of this Decimal.
	 *
	 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	 *
	 */
	P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {
	  var x = this,
	    e = getBase10Exponent(x),
	    Ctor = x.constructor;

	  return toString$4(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
	};


	// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


	/*
	 *  add                 P.minus, P.plus
	 *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd
	 *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln
	 *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln
	 *  exp                 P.exp, P.pow
	 *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,
	 *                      P.toString, divide, round, toString, exp, ln
	 *  getLn10             P.log, ln
	 *  getZeroString       digitsToString, toString
	 *  ln                  P.log, P.ln, P.pow, exp
	 *  parseDecimal        Decimal
	 *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,
	 *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,
	 *                      divide, getLn10, exp, ln
	 *  subtract            P.minus, P.plus
	 *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf
	 *  truncate            P.pow
	 *
	 *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,
	 *                      getLn10, exp, ln, parseDecimal, Decimal, config
	 */


	function add(x, y) {
	  var carry, d, e, i, k, len, xd, yd,
	    Ctor = x.constructor,
	    pr = Ctor.precision;

	  // If either is zero...
	  if (!x.s || !y.s) {

	    // Return x if y is zero.
	    // Return y if y is non-zero.
	    if (!y.s) y = new Ctor(x);
	    return external ? round(y, pr) : y;
	  }

	  xd = x.d;
	  yd = y.d;

	  // x and y are finite, non-zero numbers with the same sign.

	  k = x.e;
	  e = y.e;
	  xd = xd.slice();
	  i = k - e;

	  // If base 1e7 exponents differ...
	  if (i) {
	    if (i < 0) {
	      d = xd;
	      i = -i;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = k;
	      len = xd.length;
	    }

	    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	    k = Math.ceil(pr / LOG_BASE);
	    len = k > len ? k + 1 : len + 1;

	    if (i > len) {
	      i = len;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	    d.reverse();
	    for (; i--;) d.push(0);
	    d.reverse();
	  }

	  len = xd.length;
	  i = yd.length;

	  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
	  if (len - i < 0) {
	    i = len;
	    d = yd;
	    yd = xd;
	    xd = d;
	  }

	  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	  for (carry = 0; i;) {
	    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	    xd[i] %= BASE;
	  }

	  if (carry) {
	    xd.unshift(carry);
	    ++e;
	  }

	  // Remove trailing zeros.
	  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	  for (len = xd.length; xd[--len] == 0;) xd.pop();

	  y.d = xd;
	  y.e = e;

	  return external ? round(y, pr) : y;
	}


	function checkInt32(i, min, max) {
	  if (i !== ~~i || i < min || i > max) {
	    throw Error(invalidArgument + i);
	  }
	}


	function digitsToString(d) {
	  var i, k, ws,
	    indexOfLastWord = d.length - 1,
	    str = '',
	    w = d[0];

	  if (indexOfLastWord > 0) {
	    str += w;
	    for (i = 1; i < indexOfLastWord; i++) {
	      ws = d[i] + '';
	      k = LOG_BASE - ws.length;
	      if (k) str += getZeroString(k);
	      str += ws;
	    }

	    w = d[i];
	    ws = w + '';
	    k = LOG_BASE - ws.length;
	    if (k) str += getZeroString(k);
	  } else if (w === 0) {
	    return '0';
	  }

	  // Remove trailing zeros of last w.
	  for (; w % 10 === 0;) w /= 10;

	  return str + w;
	}


	var divide$1 = (function () {

	  // Assumes non-zero x and k, and hence non-zero result.
	  function multiplyInteger(x, k) {
	    var temp,
	      carry = 0,
	      i = x.length;

	    for (x = x.slice(); i--;) {
	      temp = x[i] * k + carry;
	      x[i] = temp % BASE | 0;
	      carry = temp / BASE | 0;
	    }

	    if (carry) x.unshift(carry);

	    return x;
	  }

	  function compare(a, b, aL, bL) {
	    var i, r;

	    if (aL != bL) {
	      r = aL > bL ? 1 : -1;
	    } else {
	      for (i = r = 0; i < aL; i++) {
	        if (a[i] != b[i]) {
	          r = a[i] > b[i] ? 1 : -1;
	          break;
	        }
	      }
	    }

	    return r;
	  }

	  function subtract(a, b, aL) {
	    var i = 0;

	    // Subtract b from a.
	    for (; aL--;) {
	      a[aL] -= i;
	      i = a[aL] < b[aL] ? 1 : 0;
	      a[aL] = i * BASE + a[aL] - b[aL];
	    }

	    // Remove leading zeros.
	    for (; !a[0] && a.length > 1;) a.shift();
	  }

	  return function (x, y, pr, dp) {
	    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,
	      Ctor = x.constructor,
	      sign = x.s == y.s ? 1 : -1,
	      xd = x.d,
	      yd = y.d;

	    // Either 0?
	    if (!x.s) return new Ctor(x);
	    if (!y.s) throw Error(decimalError + 'Division by zero');

	    e = x.e - y.e;
	    yL = yd.length;
	    xL = xd.length;
	    q = new Ctor(sign);
	    qd = q.d = [];

	    // Result exponent may be one less than e.
	    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;
	    if (yd[i] > (xd[i] || 0)) --e;

	    if (pr == null) {
	      sd = pr = Ctor.precision;
	    } else if (dp) {
	      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;
	    } else {
	      sd = pr;
	    }

	    if (sd < 0) return new Ctor(0);

	    // Convert precision in number of base 10 digits to base 1e7 digits.
	    sd = sd / LOG_BASE + 2 | 0;
	    i = 0;

	    // divisor < 1e7
	    if (yL == 1) {
	      k = 0;
	      yd = yd[0];
	      sd++;

	      // k is the carry.
	      for (; (i < xL || k) && sd--; i++) {
	        t = k * BASE + (xd[i] || 0);
	        qd[i] = t / yd | 0;
	        k = t % yd | 0;
	      }

	    // divisor >= 1e7
	    } else {

	      // Normalise xd and yd so highest order digit of yd is >= BASE/2
	      k = BASE / (yd[0] + 1) | 0;

	      if (k > 1) {
	        yd = multiplyInteger(yd, k);
	        xd = multiplyInteger(xd, k);
	        yL = yd.length;
	        xL = xd.length;
	      }

	      xi = yL;
	      rem = xd.slice(0, yL);
	      remL = rem.length;

	      // Add zeros to make remainder as long as divisor.
	      for (; remL < yL;) rem[remL++] = 0;

	      yz = yd.slice();
	      yz.unshift(0);
	      yd0 = yd[0];

	      if (yd[1] >= BASE / 2) ++yd0;

	      do {
	        k = 0;

	        // Compare divisor and remainder.
	        cmp = compare(yd, rem, yL, remL);

	        // If divisor < remainder.
	        if (cmp < 0) {

	          // Calculate trial digit, k.
	          rem0 = rem[0];
	          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);

	          // k will be how many times the divisor goes into the current remainder.
	          k = rem0 / yd0 | 0;

	          //  Algorithm:
	          //  1. product = divisor * trial digit (k)
	          //  2. if product > remainder: product -= divisor, k--
	          //  3. remainder -= product
	          //  4. if product was < remainder at 2:
	          //    5. compare new remainder and divisor
	          //    6. If remainder > divisor: remainder -= divisor, k++

	          if (k > 1) {
	            if (k >= BASE) k = BASE - 1;

	            // product = divisor * trial digit.
	            prod = multiplyInteger(yd, k);
	            prodL = prod.length;
	            remL = rem.length;

	            // Compare product and remainder.
	            cmp = compare(prod, rem, prodL, remL);

	            // product > remainder.
	            if (cmp == 1) {
	              k--;

	              // Subtract divisor from product.
	              subtract(prod, yL < prodL ? yz : yd, prodL);
	            }
	          } else {

	            // cmp is -1.
	            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	            // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	            if (k == 0) cmp = k = 1;
	            prod = yd.slice();
	          }

	          prodL = prod.length;
	          if (prodL < remL) prod.unshift(0);

	          // Subtract product from remainder.
	          subtract(rem, prod, remL);

	          // If product was < previous remainder.
	          if (cmp == -1) {
	            remL = rem.length;

	            // Compare divisor and new remainder.
	            cmp = compare(yd, rem, yL, remL);

	            // If divisor < new remainder, subtract divisor from remainder.
	            if (cmp < 1) {
	              k++;

	              // Subtract divisor from remainder.
	              subtract(rem, yL < remL ? yz : yd, remL);
	            }
	          }

	          remL = rem.length;
	        } else if (cmp === 0) {
	          k++;
	          rem = [0];
	        }    // if cmp === 1, k will be 0

	        // Add the next digit, k, to the result array.
	        qd[i++] = k;

	        // Update the remainder.
	        if (cmp && rem[0]) {
	          rem[remL++] = xd[xi] || 0;
	        } else {
	          rem = [xd[xi]];
	          remL = 1;
	        }

	      } while ((xi++ < xL || rem[0] !== void 0) && sd--);
	    }

	    // Leading zero?
	    if (!qd[0]) qd.shift();

	    q.e = e;

	    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
	  };
	})();


	/*
	 * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`
	 * significant digits.
	 *
	 * Taylor/Maclaurin series.
	 *
	 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	 *
	 * Argument reduction:
	 *   Repeat x = x / 32, k += 5, until |x| < 0.1
	 *   exp(x) = exp(x / 2^k)^(2^k)
	 *
	 * Previously, the argument was initially reduced by
	 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	 * found to be slower than just dividing repeatedly by 32 as above.
	 *
	 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	 *
	 *  exp(x) is non-terminating for any finite, non-zero x.
	 *
	 */
	function exp$3(x, sd) {
	  var denominator, guard, pow, sum, t, wpr,
	    i = 0,
	    k = 0,
	    Ctor = x.constructor,
	    pr = Ctor.precision;

	  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));

	  // exp(0) = 1
	  if (!x.s) return new Ctor(ONE);

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  t = new Ctor(0.03125);

	  while (x.abs().gte(0.1)) {
	    x = x.times(t);    // x = x / 2^5
	    k += 5;
	  }

	  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.
	  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	  wpr += guard;
	  denominator = pow = sum = new Ctor(ONE);
	  Ctor.precision = wpr;

	  for (;;) {
	    pow = round(pow.times(x), wpr);
	    denominator = denominator.times(++i);
	    t = sum.plus(divide$1(pow, denominator, wpr));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      while (k--) sum = round(sum.times(sum), wpr);
	      Ctor.precision = pr;
	      return sd == null ? (external = true, round(sum, pr)) : sum;
	    }

	    sum = t;
	  }
	}


	// Calculate the base 10 exponent from the base 1e7 exponent.
	function getBase10Exponent(x) {
	  var e = x.e * LOG_BASE,
	    w = x.d[0];

	  // Add the number of digits of the first word of the digits array.
	  for (; w >= 10; w /= 10) e++;
	  return e;
	}


	function getLn10(Ctor, sd, pr) {

	  if (sd > Ctor.LN10.sd()) {


	    // Reset global state in case the exception is caught.
	    external = true;
	    if (pr) Ctor.precision = pr;
	    throw Error(decimalError + 'LN10 precision limit exceeded');
	  }

	  return round(new Ctor(Ctor.LN10), sd);
	}


	function getZeroString(k) {
	  var zs = '';
	  for (; k--;) zs += '0';
	  return zs;
	}


	/*
	 * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant
	 * digits.
	 *
	 *  ln(n) is non-terminating (n != 1)
	 *
	 */
	function ln(y, sd) {
	  var c, c0, denominator, e, numerator, sum, t, wpr, x2,
	    n = 1,
	    guard = 10,
	    x = y,
	    xd = x.d,
	    Ctor = x.constructor,
	    pr = Ctor.precision;

	  // ln(-x) = NaN
	  // ln(0) = -Infinity
	  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));

	  // ln(1) = 0
	  if (x.eq(ONE)) return new Ctor(0);

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  if (x.eq(10)) {
	    if (sd == null) external = true;
	    return getLn10(Ctor, wpr);
	  }

	  wpr += guard;
	  Ctor.precision = wpr;
	  c = digitsToString(xd);
	  c0 = c.charAt(0);
	  e = getBase10Exponent(x);

	  if (Math.abs(e) < 1.5e15) {

	    // Argument reduction.
	    // The series converges faster the closer the argument is to 1, so using
	    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	    // later be divided by this number, then separate out the power of 10 using
	    // ln(a*10^b) = ln(a) + b*ln(10).

	    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	    // max n is 6 (gives 0.7 - 1.3)
	    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	      x = x.times(y);
	      c = digitsToString(x.d);
	      c0 = c.charAt(0);
	      n++;
	    }

	    e = getBase10Exponent(x);

	    if (c0 > 1) {
	      x = new Ctor('0.' + c);
	      e++;
	    } else {
	      x = new Ctor(c0 + '.' + c.slice(1));
	    }
	  } else {

	    // The argument reduction method above may result in overflow if the argument y is a massive
	    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	    // function using ln(x*10^e) = ln(x) + e*ln(10).
	    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);

	    Ctor.precision = pr;
	    return sd == null ? (external = true, round(x, pr)) : x;
	  }

	  // x is reduced to a value near 1.

	  // Taylor series.
	  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	  // where x = (y - 1)/(y + 1)    (|x| < 1)
	  sum = numerator = x = divide$1(x.minus(ONE), x.plus(ONE), wpr);
	  x2 = round(x.times(x), wpr);
	  denominator = 3;

	  for (;;) {
	    numerator = round(numerator.times(x2), wpr);
	    t = sum.plus(divide$1(numerator, new Ctor(denominator), wpr));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      sum = sum.times(2);

	      // Reverse the argument reduction.
	      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	      sum = divide$1(sum, new Ctor(n), wpr);

	      Ctor.precision = pr;
	      return sd == null ? (external = true, round(sum, pr)) : sum;
	    }

	    sum = t;
	    denominator += 2;
	  }
	}


	/*
	 * Parse the value of a new Decimal `x` from string `str`.
	 */
	function parseDecimal(x, str) {
	  var e, i, len;

	  // Decimal point?
	  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	  // Exponential form?
	  if ((i = str.search(/e/i)) > 0) {

	    // Determine exponent.
	    if (e < 0) e = i;
	    e += +str.slice(i + 1);
	    str = str.substring(0, i);
	  } else if (e < 0) {

	    // Integer.
	    e = str.length;
	  }

	  // Determine leading zeros.
	  for (i = 0; str.charCodeAt(i) === 48;) ++i;

	  // Determine trailing zeros.
	  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;
	  str = str.slice(i, len);

	  if (str) {
	    len -= i;
	    e = e - i - 1;
	    x.e = mathfloor(e / LOG_BASE);
	    x.d = [];

	    // Transform base

	    // e is the base 10 exponent.
	    // i is where to slice str to get the first word of the digits array.
	    i = (e + 1) % LOG_BASE;
	    if (e < 0) i += LOG_BASE;

	    if (i < len) {
	      if (i) x.d.push(+str.slice(0, i));
	      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
	      str = str.slice(i);
	      i = LOG_BASE - str.length;
	    } else {
	      i -= len;
	    }

	    for (; i--;) str += '0';
	    x.d.push(+str);

	    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);
	  } else {

	    // Zero.
	    x.s = 0;
	    x.e = 0;
	    x.d = [0];
	  }

	  return x;
	}


	/*
	 * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).
	 */
	 function round(x, sd, rm) {
	  var i, j, k, n, rd, doRound, w, xdi,
	    xd = x.d;

	  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	  // w: the word of xd which contains the rounding digit, a base 1e7 number.
	  // xdi: the index of w within xd.
	  // n: the number of digits of w.
	  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	  // they had leading zeros)
	  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

	  // Get the length of the first word of the digits array xd.
	  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;
	  i = sd - n;

	  // Is the rounding digit in the first word of xd?
	  if (i < 0) {
	    i += LOG_BASE;
	    j = sd;
	    w = xd[xdi = 0];
	  } else {
	    xdi = Math.ceil((i + 1) / LOG_BASE);
	    k = xd.length;
	    if (xdi >= k) return x;
	    w = k = xd[xdi];

	    // Get the number of digits of w.
	    for (n = 1; k >= 10; k /= 10) n++;

	    // Get the index of rd within w.
	    i %= LOG_BASE;

	    // Get the index of rd within w, adjusted for leading zeros.
	    // The number of leading zeros of w is given by LOG_BASE - n.
	    j = i - LOG_BASE + n;
	  }

	  if (rm !== void 0) {
	    k = mathpow(10, n - j - 1);

	    // Get the rounding digit at index j of w.
	    rd = w / k % 10 | 0;

	    // Are there any non-zero digits after the rounding digit?
	    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;

	    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the
	    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give
	    // 714.

	    doRound = rm < 4
	      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&

	        // Check whether the digit to the left of the rounding digit is odd.
	        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
	          rm == (x.s < 0 ? 8 : 7));
	  }

	  if (sd < 1 || !xd[0]) {
	    if (doRound) {
	      k = getBase10Exponent(x);
	      xd.length = 1;

	      // Convert sd to decimal places.
	      sd = sd - k - 1;

	      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	      x.e = mathfloor(-sd / LOG_BASE) || 0;
	    } else {
	      xd.length = 1;

	      // Zero.
	      xd[0] = x.e = x.s = 0;
	    }

	    return x;
	  }

	  // Remove excess digits.
	  if (i == 0) {
	    xd.length = xdi;
	    k = 1;
	    xdi--;
	  } else {
	    xd.length = xdi + 1;
	    k = mathpow(10, LOG_BASE - i);

	    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	    // j > 0 means i > number of leading zeros of w.
	    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;
	  }

	  if (doRound) {
	    for (;;) {

	      // Is the digit to be rounded up in the first word of xd?
	      if (xdi == 0) {
	        if ((xd[0] += k) == BASE) {
	          xd[0] = 1;
	          ++x.e;
	        }

	        break;
	      } else {
	        xd[xdi] += k;
	        if (xd[xdi] != BASE) break;
	        xd[xdi--] = 0;
	        k = 1;
	      }
	    }
	  }

	  // Remove trailing zeros.
	  for (i = xd.length; xd[--i] === 0;) xd.pop();

	  if (external && (x.e > MAX_E || x.e < -MAX_E)) {
	    throw Error(exponentOutOfRange + getBase10Exponent(x));
	  }

	  return x;
	}


	function subtract(x, y) {
	  var d, e, i, j, k, len, xd, xe, xLTy, yd,
	    Ctor = x.constructor,
	    pr = Ctor.precision;

	  // Return y negated if x is zero.
	  // Return x if y is zero and x is non-zero.
	  if (!x.s || !y.s) {
	    if (y.s) y.s = -y.s;
	    else y = new Ctor(x);
	    return external ? round(y, pr) : y;
	  }

	  xd = x.d;
	  yd = y.d;

	  // x and y are non-zero numbers with the same sign.

	  e = y.e;
	  xe = x.e;
	  xd = xd.slice();
	  k = xe - e;

	  // If exponents differ...
	  if (k) {
	    xLTy = k < 0;

	    if (xLTy) {
	      d = xd;
	      k = -k;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = xe;
	      len = xd.length;
	    }

	    // Numbers with massively different exponents would result in a very high number of zeros
	    // needing to be prepended, but this can be avoided while still ensuring correct rounding by
	    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

	    if (k > i) {
	      k = i;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents.
	    d.reverse();
	    for (i = k; i--;) d.push(0);
	    d.reverse();

	  // Base 1e7 exponents equal.
	  } else {

	    // Check digits to determine which is the bigger number.

	    i = xd.length;
	    len = yd.length;
	    xLTy = i < len;
	    if (xLTy) len = i;

	    for (i = 0; i < len; i++) {
	      if (xd[i] != yd[i]) {
	        xLTy = xd[i] < yd[i];
	        break;
	      }
	    }

	    k = 0;
	  }

	  if (xLTy) {
	    d = xd;
	    xd = yd;
	    yd = d;
	    y.s = -y.s;
	  }

	  len = xd.length;

	  // Append zeros to xd if shorter.
	  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.
	  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

	  // Subtract yd from xd.
	  for (i = yd.length; i > k;) {
	    if (xd[--i] < yd[i]) {
	      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
	      --xd[j];
	      xd[i] += BASE;
	    }

	    xd[i] -= yd[i];
	  }

	  // Remove trailing zeros.
	  for (; xd[--len] === 0;) xd.pop();

	  // Remove leading zeros and adjust exponent accordingly.
	  for (; xd[0] === 0; xd.shift()) --e;

	  // Zero?
	  if (!xd[0]) return new Ctor(0);

	  y.d = xd;
	  y.e = e;

	  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;
	  return external ? round(y, pr) : y;
	}


	function toString$4(x, isExp, sd) {
	  var k,
	    e = getBase10Exponent(x),
	    str = digitsToString(x.d),
	    len = str.length;

	  if (isExp) {
	    if (sd && (k = sd - len) > 0) {
	      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	    } else if (len > 1) {
	      str = str.charAt(0) + '.' + str.slice(1);
	    }

	    str = str + (e < 0 ? 'e' : 'e+') + e;
	  } else if (e < 0) {
	    str = '0.' + getZeroString(-e - 1) + str;
	    if (sd && (k = sd - len) > 0) str += getZeroString(k);
	  } else if (e >= len) {
	    str += getZeroString(e + 1 - len);
	    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	  } else {
	    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
	    if (sd && (k = sd - len) > 0) {
	      if (e + 1 === len) str += '.';
	      str += getZeroString(k);
	    }
	  }

	  return x.s < 0 ? '-' + str : str;
	}


	// Does not strip trailing zeros.
	function truncate$1(arr, len) {
	  if (arr.length > len) {
	    arr.length = len;
	    return true;
	  }
	}


	// Decimal methods


	/*
	 *  clone
	 *  config/set
	 */


	/*
	 * Create and return a Decimal constructor with the same configuration properties as this Decimal
	 * constructor.
	 *
	 */
	function clone(obj) {
	  var i, p, ps;

	  /*
	   * The Decimal constructor and exported function.
	   * Return a new Decimal instance.
	   *
	   * value {number|string|Decimal} A numeric value.
	   *
	   */
	  function Decimal(value) {
	    var x = this;

	    // Decimal called without new.
	    if (!(x instanceof Decimal)) return new Decimal(value);

	    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	    // which points to Object.
	    x.constructor = Decimal;

	    // Duplicate.
	    if (value instanceof Decimal) {
	      x.s = value.s;
	      x.e = value.e;
	      x.d = (value = value.d) ? value.slice() : value;
	      return;
	    }

	    if (typeof value === 'number') {

	      // Reject Infinity/NaN.
	      if (value * 0 !== 0) {
	        throw Error(invalidArgument + value);
	      }

	      if (value > 0) {
	        x.s = 1;
	      } else if (value < 0) {
	        value = -value;
	        x.s = -1;
	      } else {
	        x.s = 0;
	        x.e = 0;
	        x.d = [0];
	        return;
	      }

	      // Fast path for small integers.
	      if (value === ~~value && value < 1e7) {
	        x.e = 0;
	        x.d = [value];
	        return;
	      }

	      return parseDecimal(x, value.toString());
	    } else if (typeof value !== 'string') {
	      throw Error(invalidArgument + value);
	    }

	    // Minus sign?
	    if (value.charCodeAt(0) === 45) {
	      value = value.slice(1);
	      x.s = -1;
	    } else {
	      x.s = 1;
	    }

	    if (isDecimal.test(value)) parseDecimal(x, value);
	    else throw Error(invalidArgument + value);
	  }

	  Decimal.prototype = P;

	  Decimal.ROUND_UP = 0;
	  Decimal.ROUND_DOWN = 1;
	  Decimal.ROUND_CEIL = 2;
	  Decimal.ROUND_FLOOR = 3;
	  Decimal.ROUND_HALF_UP = 4;
	  Decimal.ROUND_HALF_DOWN = 5;
	  Decimal.ROUND_HALF_EVEN = 6;
	  Decimal.ROUND_HALF_CEIL = 7;
	  Decimal.ROUND_HALF_FLOOR = 8;

	  Decimal.clone = clone;
	  Decimal.config = Decimal.set = config$1;

	  if (obj === void 0) obj = {};
	  if (obj) {
	    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];
	    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	  }

	  Decimal.config(obj);

	  return Decimal;
	}


	/*
	 * Configure global settings for a Decimal constructor.
	 *
	 * `obj` is an object with one or more of the following properties,
	 *
	 *   precision  {number}
	 *   rounding   {number}
	 *   toExpNeg   {number}
	 *   toExpPos   {number}
	 *
	 * E.g. Decimal.config({ precision: 20, rounding: 4 })
	 *
	 */
	function config$1(obj) {
	  if (!obj || typeof obj !== 'object') {
	    throw Error(decimalError + 'Object expected');
	  }
	  var i, p, v,
	    ps = [
	      'precision', 1, MAX_DIGITS,
	      'rounding', 0, 8,
	      'toExpNeg', -1 / 0, 0,
	      'toExpPos', 0, 1 / 0
	    ];

	  for (i = 0; i < ps.length; i += 3) {
	    if ((v = obj[p = ps[i]]) !== void 0) {
	      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
	      else throw Error(invalidArgument + p + ': ' + v);
	    }
	  }

	  if ((v = obj[p = 'LN10']) !== void 0) {
	      if (v == Math.LN10) this[p] = new this(v);
	      else throw Error(invalidArgument + p + ': ' + v);
	  }

	  return this;
	}


	// Create and configure initial Decimal constructor.
	var Decimal = clone(defaults$1);

	// Internal constant.
	ONE = new Decimal(1);

	var Decimal$1 = Decimal;

	function _toConsumableArray$5(arr) { return _arrayWithoutHoles$5(arr) || _iterableToArray$6(arr) || _nonIterableSpread$5(); }

	function _nonIterableSpread$5() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$6(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$5(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	var identity$2 = function identity(i) {
	  return i;
	};

	var PLACE_HOLDER = {
	  '@@functional/placeholder': true
	};

	var isPlaceHolder = function isPlaceHolder(val) {
	  return val === PLACE_HOLDER;
	};

	var curry0 = function curry0(fn) {
	  return function _curried() {
	    if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? undefined : arguments[0])) {
	      return _curried;
	    }

	    return fn.apply(void 0, arguments);
	  };
	};

	var curryN = function curryN(n, fn) {
	  if (n === 1) {
	    return fn;
	  }

	  return curry0(function () {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var argsLength = args.filter(function (arg) {
	      return arg !== PLACE_HOLDER;
	    }).length;

	    if (argsLength >= n) {
	      return fn.apply(void 0, args);
	    }

	    return curryN(n - argsLength, curry0(function () {
	      for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        restArgs[_key2] = arguments[_key2];
	      }

	      var newArgs = args.map(function (arg) {
	        return isPlaceHolder(arg) ? restArgs.shift() : arg;
	      });
	      return fn.apply(void 0, _toConsumableArray$5(newArgs).concat(restArgs));
	    }));
	  });
	};

	var curry = function curry(fn) {
	  return curryN(fn.length, fn);
	};
	var range$2 = function range(begin, end) {
	  var arr = [];

	  for (var i = begin; i < end; ++i) {
	    arr[i - begin] = i;
	  }

	  return arr;
	};
	var map$3 = curry(function (fn, arr) {
	  if (Array.isArray(arr)) {
	    return arr.map(fn);
	  }

	  return Object.keys(arr).map(function (key) {
	    return arr[key];
	  }).map(fn);
	});
	var compose$1 = function compose() {
	  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  if (!args.length) {
	    return identity$2;
	  }

	  var fns = args.reverse(); // first function can receive multiply arguments

	  var firstFn = fns[0];
	  var tailsFn = fns.slice(1);
	  return function () {
	    return tailsFn.reduce(function (res, fn) {
	      return fn(res);
	    }, firstFn.apply(void 0, arguments));
	  };
	};
	var reverse = function reverse(arr) {
	  if (Array.isArray(arr)) {
	    return arr.reverse();
	  } // can be string


	  return arr.split('').reverse.join('');
	};
	var memoize$2 = function memoize(fn) {
	  var lastArgs = null;
	  var lastResult = null;
	  return function () {
	    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    if (lastArgs && args.every(function (val, i) {
	      return val === lastArgs[i];
	    })) {
	      return lastResult;
	    }

	    lastArgs = args;
	    lastResult = fn.apply(void 0, args);
	    return lastResult;
	  };
	};

	/**
	 * @fileOverview 一些公用的运算方法
	 * @author xile611
	 * @date 2015-09-17
	 */
	/**
	 * 获取数值的位数
	 * 其中绝对值属于区间[0.1, 1)， 得到的值为0
	 * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1
	 * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2
	 *
	 * @param  {Number} value 数值
	 * @return {Integer} 位数
	 */

	function getDigitCount(value) {
	  var result;

	  if (value === 0) {
	    result = 1;
	  } else {
	    result = Math.floor(new Decimal$1(value).abs().log(10).toNumber()) + 1;
	  }

	  return result;
	}
	/**
	 * 按照固定的步长获取[start, end)这个区间的数据
	 * 并且需要处理js计算精度的问题
	 *
	 * @param  {Decimal} start 起点
	 * @param  {Decimal} end   终点，不包含该值
	 * @param  {Decimal} step  步长
	 * @return {Array}         若干数值
	 */


	function rangeStep(start, end, step) {
	  var num = new Decimal$1(start);
	  var i = 0;
	  var result = []; // magic number to prevent infinite loop

	  while (num.lt(end) && i < 100000) {
	    result.push(num.toNumber());
	    num = num.add(step);
	    i++;
	  }

	  return result;
	}
	/**
	 * 对数值进行线性插值
	 *
	 * @param  {Number} a  定义域的极点
	 * @param  {Number} b  定义域的极点
	 * @param  {Number} t  [0, 1]内的某个值
	 * @return {Number}    定义域内的某个值
	 */


	var interpolateNumber$1 = curry(function (a, b, t) {
	  var newA = +a;
	  var newB = +b;
	  return newA + t * (newB - newA);
	});
	/**
	 * 线性插值的逆运算
	 *
	 * @param  {Number} a 定义域的极点
	 * @param  {Number} b 定义域的极点
	 * @param  {Number} x 可以认为是插值后的一个输出值
	 * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]
	 */

	var uninterpolateNumber = curry(function (a, b, x) {
	  var diff = b - +a;
	  diff = diff || Infinity;
	  return (x - a) / diff;
	});
	/**
	 * 线性插值的逆运算，并且有截断的操作
	 *
	 * @param  {Number} a 定义域的极点
	 * @param  {Number} b 定义域的极点
	 * @param  {Number} x 可以认为是插值后的一个输出值
	 * @return {Number}   当x在 a ~ b这个区间内时，返回值属于[0, 1]，
	 * 当x不在 a ~ b这个区间时，会截断到 a ~ b 这个区间
	 */

	var uninterpolateTruncation = curry(function (a, b, x) {
	  var diff = b - +a;
	  diff = diff || Infinity;
	  return Math.max(0, Math.min(1, (x - a) / diff));
	});
	var Arithmetic = {
	  rangeStep: rangeStep,
	  getDigitCount: getDigitCount,
	  interpolateNumber: interpolateNumber$1,
	  uninterpolateNumber: uninterpolateNumber,
	  uninterpolateTruncation: uninterpolateTruncation
	};

	function _toConsumableArray$6(arr) { return _arrayWithoutHoles$6(arr) || _iterableToArray$7(arr) || _nonIterableSpread$6(); }

	function _nonIterableSpread$6() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$7(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$6(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _slicedToArray$3(arr, i) { return _arrayWithHoles$4(arr) || _iterableToArrayLimit$3(arr, i) || _nonIterableRest$4(); }

	function _nonIterableRest$4() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$3(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$4(arr) { if (Array.isArray(arr)) return arr; }
	/**
	 * Calculate a interval of a minimum value and a maximum value
	 *
	 * @param  {Number} min       The minimum value
	 * @param  {Number} max       The maximum value
	 * @return {Array} An interval
	 */

	function getValidInterval(_ref) {
	  var _ref2 = _slicedToArray$3(_ref, 2),
	      min = _ref2[0],
	      max = _ref2[1];

	  var validMin = min,
	      validMax = max; // exchange

	  if (min > max) {
	    validMin = max;
	    validMax = min;
	  }

	  return [validMin, validMax];
	}
	/**
	 * Calculate the step which is easy to understand between ticks, like 10, 20, 25
	 *
	 * @param  {Decimal} roughStep        The rough step calculated by deviding the
	 * difference by the tickCount
	 * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not
	 * @param  {Integer} correctionFactor A correction factor
	 * @return {Decimal} The step which is easy to understand between two ticks
	 */


	function getFormatStep(roughStep, allowDecimals, correctionFactor) {
	  if (roughStep.lte(0)) {
	    return new Decimal$1(0);
	  }

	  var digitCount = Arithmetic.getDigitCount(roughStep.toNumber()); // The ratio between the rough step and the smallest number which has a bigger
	  // order of magnitudes than the rough step

	  var digitCountValue = new Decimal$1(10).pow(digitCount);
	  var stepRatio = roughStep.div(digitCountValue); // When an integer and a float multiplied, the accuracy of result may be wrong

	  var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
	  var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
	  var formatStep = amendStepRatio.mul(digitCountValue);
	  return allowDecimals ? formatStep : new Decimal$1(Math.ceil(formatStep));
	}
	/**
	 * calculate the ticks when the minimum value equals to the maximum value
	 *
	 * @param  {Number}  value         The minimum valuue which is also the maximum value
	 * @param  {Integer} tickCount     The count of ticks
	 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
	 * @return {Array}                 ticks
	 */


	function getTickOfSingleValue(value, tickCount, allowDecimals) {
	  var step = 1; // calculate the middle value of ticks

	  var middle = new Decimal$1(value);

	  if (!middle.isint() && allowDecimals) {
	    var absVal = Math.abs(value);

	    if (absVal < 1) {
	      // The step should be a float number when the difference is smaller than 1
	      step = new Decimal$1(10).pow(Arithmetic.getDigitCount(value) - 1);
	      middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step);
	    } else if (absVal > 1) {
	      // Return the maximum integer which is smaller than 'value' when 'value' is greater than 1
	      middle = new Decimal$1(Math.floor(value));
	    }
	  } else if (value === 0) {
	    middle = new Decimal$1(Math.floor((tickCount - 1) / 2));
	  } else if (!allowDecimals) {
	    middle = new Decimal$1(Math.floor(value));
	  }

	  var middleIndex = Math.floor((tickCount - 1) / 2);
	  var fn = compose$1(map$3(function (n) {
	    return middle.add(new Decimal$1(n - middleIndex).mul(step)).toNumber();
	  }), range$2);
	  return fn(0, tickCount);
	}
	/**
	 * Calculate the step
	 *
	 * @param  {Number}  min              The minimum value of an interval
	 * @param  {Number}  max              The maximum value of an interval
	 * @param  {Integer} tickCount        The count of ticks
	 * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not
	 * @param  {Number}  correctionFactor A correction factor
	 * @return {Object}  The step, minimum value of ticks, maximum value of ticks
	 */


	function calculateStep(min, max, tickCount, allowDecimals) {
	  var correctionFactor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

	  // dirty hack (for recharts' test)
	  if (!Number.isFinite((max - min) / (tickCount - 1))) {
	    return {
	      step: new Decimal$1(0),
	      tickMin: new Decimal$1(0),
	      tickMax: new Decimal$1(0)
	    };
	  } // The step which is easy to understand between two ticks


	  var step = getFormatStep(new Decimal$1(max).sub(min).div(tickCount - 1), allowDecimals, correctionFactor); // A medial value of ticks

	  var middle; // When 0 is inside the interval, 0 should be a tick

	  if (min <= 0 && max >= 0) {
	    middle = new Decimal$1(0);
	  } else {
	    // calculate the middle value
	    middle = new Decimal$1(min).add(max).div(2); // minus modulo value

	    middle = middle.sub(new Decimal$1(middle).mod(step));
	  }

	  var belowCount = Math.ceil(middle.sub(min).div(step).toNumber());
	  var upCount = Math.ceil(new Decimal$1(max).sub(middle).div(step).toNumber());
	  var scaleCount = belowCount + upCount + 1;

	  if (scaleCount > tickCount) {
	    // When more ticks need to cover the interval, step should be bigger.
	    return calculateStep(min, max, tickCount, allowDecimals, correctionFactor + 1);
	  }

	  if (scaleCount < tickCount) {
	    // When less ticks can cover the interval, we should add some additional ticks
	    upCount = max > 0 ? upCount + (tickCount - scaleCount) : upCount;
	    belowCount = max > 0 ? belowCount : belowCount + (tickCount - scaleCount);
	  }

	  return {
	    step: step,
	    tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
	    tickMax: middle.add(new Decimal$1(upCount).mul(step))
	  };
	}
	/**
	 * Calculate the ticks of an interval, the count of ticks will be guraranteed
	 *
	 * @param  {Number}  min, max      min: The minimum value, max: The maximum value
	 * @param  {Integer} tickCount     The count of ticks
	 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
	 * @return {Array}   ticks
	 */


	function getNiceTickValuesFn(_ref3) {
	  var _ref4 = _slicedToArray$3(_ref3, 2),
	      min = _ref4[0],
	      max = _ref4[1];

	  var tickCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
	  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  // More than two ticks should be return
	  var count = Math.max(tickCount, 2);

	  var _getValidInterval = getValidInterval([min, max]),
	      _getValidInterval2 = _slicedToArray$3(_getValidInterval, 2),
	      cormin = _getValidInterval2[0],
	      cormax = _getValidInterval2[1];

	  if (cormin === -Infinity || cormax === Infinity) {
	    var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray$6(range$2(0, tickCount - 1).map(function () {
	      return Infinity;
	    }))) : _toConsumableArray$6(range$2(0, tickCount - 1).map(function () {
	      return -Infinity;
	    })).concat([cormax]);

	    return min > max ? reverse(_values) : _values;
	  }

	  if (cormin === cormax) {
	    return getTickOfSingleValue(cormin, tickCount, allowDecimals);
	  } // Get the step between two ticks


	  var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals),
	      step = _calculateStep.step,
	      tickMin = _calculateStep.tickMin,
	      tickMax = _calculateStep.tickMax;

	  var values = Arithmetic.rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step);
	  return min > max ? reverse(values) : values;
	}
	/**
	 * Calculate the ticks of an interval, the count of ticks won't be guraranteed,
	 * but the domain will be guaranteed
	 *
	 * @param  {Number}  min, max      min: The minimum value, max: The maximum value
	 * @param  {Integer} tickCount     The count of ticks
	 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
	 * @return {Array}   ticks
	 */


	function getTickValuesFixedDomainFn(_ref7, tickCount) {
	  var _ref8 = _slicedToArray$3(_ref7, 2),
	      min = _ref8[0],
	      max = _ref8[1];

	  var allowDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	  // More than two ticks should be return
	  var _getValidInterval5 = getValidInterval([min, max]),
	      _getValidInterval6 = _slicedToArray$3(_getValidInterval5, 2),
	      cormin = _getValidInterval6[0],
	      cormax = _getValidInterval6[1];

	  if (cormin === -Infinity || cormax === Infinity) {
	    return [min, max];
	  }

	  if (cormin === cormax) {
	    return [cormin];
	  }

	  var count = Math.max(tickCount, 2);
	  var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count - 1), allowDecimals, 0);

	  var values = _toConsumableArray$6(Arithmetic.rangeStep(new Decimal$1(cormin), new Decimal$1(cormax).sub(new Decimal$1(0.99).mul(step)), step)).concat([cormax]);

	  return min > max ? reverse(values) : values;
	}

	var getNiceTickValues = memoize$2(getNiceTickValuesFn);
	var getTickValuesFixedDomain = memoize$2(getTickValuesFixedDomainFn);

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function bisector(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	}

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;

	function number$1(x) {
	  return x === null ? NaN : +x;
	}

	function sequence(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	}

	var e10 = Math.sqrt(50),
	    e5 = Math.sqrt(10),
	    e2 = Math.sqrt(2);

	function ticks(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;

	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }

	  if (reverse) ticks.reverse();

	  return ticks;
	}

	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	function threshold(values, p, valueof) {
	  if (valueof == null) valueof = number$1;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	}

	function initRange(domain, range) {
	  switch (arguments.length) {
	    case 0: break;
	    case 1: this.range(domain); break;
	    default: this.range(range).domain(domain); break;
	  }
	  return this;
	}

	function initInterpolator(domain, interpolator) {
	  switch (arguments.length) {
	    case 0: break;
	    case 1: this.interpolator(domain); break;
	    default: this.interpolator(interpolator).domain(domain); break;
	  }
	  return this;
	}

	var prefix$1 = "$";

	function Map$2() {}

	Map$2.prototype = map$4.prototype = {
	  constructor: Map$2,
	  has: function(key) {
	    return (prefix$1 + key) in this;
	  },
	  get: function(key) {
	    return this[prefix$1 + key];
	  },
	  set: function(key, value) {
	    this[prefix$1 + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix$1 + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix$1) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix$1) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix$1) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix$1) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix$1) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix$1) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix$1) f(this[property], property.slice(1), this);
	  }
	};

	function map$4(object, f) {
	  var map = new Map$2;

	  // Copy constructor.
	  if (object instanceof Map$2) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	function Set$2() {}

	var proto$1 = map$4.prototype;

	Set$2.prototype = set.prototype = {
	  constructor: Set$2,
	  has: proto$1.has,
	  add: function(value) {
	    value += "";
	    this[prefix$1 + value] = value;
	    return this;
	  },
	  remove: proto$1.remove,
	  clear: proto$1.clear,
	  values: proto$1.keys,
	  size: proto$1.size,
	  empty: proto$1.empty,
	  each: proto$1.each
	};

	function set(object, f) {
	  var set = new Set$2;

	  // Copy constructor.
	  if (object instanceof Set$2) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var array = Array.prototype;

	var map$5 = array.map;
	var slice$1 = array.slice;

	var implicit = {name: "implicit"};

	function ordinal() {
	  var index = map$4(),
	      domain = [],
	      range = [],
	      unknown = implicit;

	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$4();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$1.call(_), scale) : range.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return ordinal(domain, range).unknown(unknown);
	  };

	  initRange.apply(scale, arguments);

	  return scale;
	}

	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;

	  delete scale.unknown;

	  function rescale() {
	    var n = domain().length,
	        reverse = range[1] < range[0],
	        start = range[reverse - 0],
	        stop = range[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range = [+_[0], +_[1]], round = true, rescale();
	  };

	  scale.bandwidth = function() {
	    return bandwidth;
	  };

	  scale.step = function() {
	    return step;
	  };

	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };

	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
	  };

	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
	  };

	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
	  };

	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };

	  scale.copy = function() {
	    return band(domain(), range)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };

	  return initRange.apply(rescale(), arguments);
	}

	function pointish(scale) {
	  var copy = scale.copy;

	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;

	  scale.copy = function() {
	    return pointish(copy());
	  };

	  return scale;
	}

	function point$2() {
	  return pointish(band.apply(null, arguments).paddingInner(1));
	}

	function define(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}

	function extend$1(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex = /^#([0-9a-f]{3,8})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  copy: function(channels) {
	    return Object.assign(new this.constructor, this, channels);
	  },
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  hex: color_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: color_formatHex,
	  formatHsl: color_formatHsl,
	  formatRgb: color_formatRgb,
	  toString: color_formatRgb
	});

	function color_formatHex() {
	  return this.rgb().formatHex();
	}

	function color_formatHsl() {
	  return hslConvert(this).formatHsl();
	}

	function color_formatRgb() {
	  return this.rgb().formatRgb();
	}

	function color(format) {
	  var m, l;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
	      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
	      : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
	      : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
	      : null) // invalid hex
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (-0.5 <= this.r && this.r < 255.5)
	        && (-0.5 <= this.g && this.g < 255.5)
	        && (-0.5 <= this.b && this.b < 255.5)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: rgb_formatHex,
	  formatRgb: rgb_formatRgb,
	  toString: rgb_formatRgb
	}));

	function rgb_formatHex() {
	  return "#" + hex$1(this.r) + hex$1(this.g) + hex$1(this.b);
	}

	function rgb_formatRgb() {
	  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	  return (a === 1 ? "rgb(" : "rgba(")
	      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	      + (a === 1 ? ")" : ", " + a + ")");
	}

	function hex$1(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  formatHsl: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "hsl(" : "hsla(")
	        + (this.h || 0) + ", "
	        + (this.s || 0) * 100 + "%, "
	        + (this.l || 0) * 100 + "%"
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	// https://observablehq.com/@mbostock/lab-and-rgb
	var K = 18,
	    Xn = 0.96422,
	    Yn = 1,
	    Zn = 0.82521,
	    t0 = 4 / 29,
	    t1 = 6 / 29,
	    t2 = 3 * t1 * t1,
	    t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) return hcl2lab(o);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = rgb2lrgb(o.r),
	      g = rgb2lrgb(o.g),
	      b = rgb2lrgb(o.b),
	      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
	  if (r === g && g === b) x = z = y; else {
	    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
	    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
	  }
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Lab, lab, extend$1(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    x = Xn * lab2xyz(x);
	    y = Yn * lab2xyz(y);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
	      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
	      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
	      this.opacity
	    );
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function lrgb2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2lrgb(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	function hcl2lab(o) {
	  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
	  var h = o.h * deg2rad;
	  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	}

	define(Hcl, hcl, extend$1(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return hcl2lab(this).rgb();
	  }
	}));

	var A = -0.14861,
	    B = +1.78277,
	    C = -0.29227,
	    D = -0.90649,
	    E = +1.97294,
	    ED = E * D,
	    EB = E * B,
	    BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Cubehelix, cubehelix, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));

	function constant$2(x) {
	  return function() {
	    return x;
	  };
	}

	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);
	}

	var rgb$1 = (function rgbGamma(y) {
	  var color = gamma(y);

	  function rgb$1(start, end) {
	    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$1.gamma = rgbGamma;

	  return rgb$1;
	})(1);

	function numberArray(a, b) {
	  if (!b) b = [];
	  var n = a ? Math.min(b.length, a.length) : 0,
	      c = b.slice(),
	      i;
	  return function(t) {
	    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
	    return c;
	  };
	}

	function isNumberArray(x) {
	  return ArrayBuffer.isView(x) && !(x instanceof DataView);
	}

	function genericArray(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];

	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	}

	function date(a, b) {
	  var d = new Date;
	  return a = +a, b = +b, function(t) {
	    return d.setTime(a * (1 - t) + b * t), d;
	  };
	}

	function interpolateNumber$2(a, b) {
	  return a = +a, b = +b, function(t) {
	    return a * (1 - t) + b * t;
	  };
	}

	function object(a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	}

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero$2(b) {
	  return function() {
	    return b;
	  };
	}

	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}

	function string(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: interpolateNumber$2(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero$2(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	}

	function interpolateValue(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$2(b)
	      : (t === "number" ? interpolateNumber$2
	      : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
	      : b instanceof color ? rgb$1
	      : b instanceof Date ? date
	      : isNumberArray(b) ? numberArray
	      : Array.isArray(b) ? genericArray
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
	      : interpolateNumber$2)(a, b);
	}

	function interpolateRound(a, b) {
	  return a = +a, b = +b, function(t) {
	    return Math.round(a * (1 - t) + b * t);
	  };
	}

	function constant$3(x) {
	  return function() {
	    return x;
	  };
	}

	function number$2(x) {
	  return +x;
	}

	var unit = [0, 1];

	function identity$3(x) {
	  return x;
	}

	function normalize(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$3(isNaN(b) ? NaN : 0.5);
	}

	function clamper(domain) {
	  var a = domain[0], b = domain[domain.length - 1], t;
	  if (a > b) t = a, a = b, b = t;
	  return function(x) { return Math.max(a, Math.min(b, x)); };
	}

	// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
	function bimap(domain, range, interpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
	  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
	  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}

	function polymap(domain, range, interpolate) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;

	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = normalize(domain[i], domain[i + 1]);
	    r[i] = interpolate(range[i], range[i + 1]);
	  }

	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp())
	      .unknown(source.unknown());
	}

	function transformer() {
	  var domain = unit,
	      range = unit,
	      interpolate = interpolateValue,
	      transform,
	      untransform,
	      unknown,
	      clamp = identity$3,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
	  }

	  scale.invert = function(y) {
	    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber$2)))(y)));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$5.call(_, number$2), clamp === identity$3 || (clamp = clamper(domain)), rescale()) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$1.call(_), rescale()) : range.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range = slice$1.call(_), interpolate = interpolateRound, rescale();
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = _ ? clamper(domain) : identity$3, scale) : clamp !== identity$3;
	  };

	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate = _, rescale()) : interpolate;
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  return function(t, u) {
	    transform = t, untransform = u;
	    return rescale();
	  };
	}

	function continuous(transform, untransform) {
	  return transformer()(transform, untransform);
	}

	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	function formatDecimal(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);

	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	}

	function exponent(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	}

	function formatGroup(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	}

	function formatNumerals(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	}

	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

	function formatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  return new FormatSpecifier({
	    fill: match[1],
	    align: match[2],
	    sign: match[3],
	    symbol: match[4],
	    zero: match[5],
	    width: match[6],
	    comma: match[7],
	    precision: match[8] && match[8].slice(1),
	    trim: match[9],
	    type: match[10]
	  });
	}

	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
	  this.align = specifier.align === undefined ? ">" : specifier.align + "";
	  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
	  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
	  this.zero = !!specifier.zero;
	  this.width = specifier.width === undefined ? undefined : +specifier.width;
	  this.comma = !!specifier.comma;
	  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
	  this.trim = !!specifier.trim;
	  this.type = specifier.type === undefined ? "" : specifier.type + "";
	}

	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
	      + (this.trim ? "~" : "")
	      + this.type;
	};

	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	function formatTrim(s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;
	    }
	  }
	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	}

	var prefixExponent;

	function formatPrefixAuto(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}

	function formatRounded(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}

	var formatTypes = {
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};

	function identity$4(x) {
	  return x;
	}

	var map$6 = Array.prototype.map,
	    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

	function formatLocale(locale) {
	  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$4 : formatGroup(map$6.call(locale.grouping, Number), locale.thousands + ""),
	      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
	      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
	      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
	      numerals = locale.numerals === undefined ? identity$4 : formatNumerals(map$6.call(locale.numerals, String)),
	      percent = locale.percent === undefined ? "%" : locale.percent + "",
	      minus = locale.minus === undefined ? "-" : locale.minus + "",
	      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);

	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type;

	    // The "n" type is an alias for ",g".
	    if (type === "n") comma = true, type = "g";

	    // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

	    // If zero fill is specified, padding goes after sign and before digits.
	    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = /[defgprs%]/.test(type);

	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision === undefined ? 6
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;

	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

	        // Trim insignificant zeros.
	        if (trim) value = formatTrim(value);

	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;

	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;

	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }

	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);

	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";

	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }

	      return numerals(value);
	    }

	    format.toString = function() {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}

	var locale;
	var format$3;
	var formatPrefix;

	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""],
	  minus: "-"
	});

	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  format$3 = locale.format;
	  formatPrefix = locale.formatPrefix;
	  return locale;
	}

	function precisionFixed(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	}

	function precisionPrefix(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	}

	function precisionRound(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	}

	function tickFormat(start, stop, count, specifier) {
	  var step = tickStep(start, stop, count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return format$3(specifier);
	}

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function(count, specifier) {
	    var d = domain();
	    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
	  };

	  scale.nice = function(count) {
	    if (count == null) count = 10;

	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    step = tickIncrement(start, stop, count);

	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = tickIncrement(start, stop, count);
	    }

	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }

	    return scale;
	  };

	  return scale;
	}

	function linear$1() {
	  var scale = continuous(identity$3, identity$3);

	  scale.copy = function() {
	    return copy(scale, linear$1());
	  };

	  initRange.apply(scale, arguments);

	  return linearish(scale);
	}

	function identity$5(domain) {
	  var unknown;

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : x;
	  }

	  scale.invert = scale;

	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$5.call(_, number$2), scale) : domain.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return identity$5(domain).unknown(unknown);
	  };

	  domain = arguments.length ? map$5.call(domain, number$2) : [0, 1];

	  return linearish(scale);
	}

	function nice(domain, interval) {
	  domain = domain.slice();

	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	}

	function transformLog(x) {
	  return Math.log(x);
	}

	function transformExp(x) {
	  return Math.exp(x);
	}

	function transformLogn(x) {
	  return -Math.log(-x);
	}

	function transformExpn(x) {
	  return -Math.exp(-x);
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}

	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}

	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}

	function loggish(transform) {
	  var scale = transform(transformLog, transformExp),
	      domain = scale.domain,
	      base = 10,
	      logs,
	      pows;

	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) {
	      logs = reflect(logs), pows = reflect(pows);
	      transform(transformLogn, transformExpn);
	    } else {
	      transform(transformLog, transformExp);
	    }
	    return scale;
	  }

	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;

	    if (r = v < u) i = u, u = v, v = i;

	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = format$3(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };

	  return scale;
	}

	function log$2() {
	  var scale = loggish(transformer()).domain([1, 10]);

	  scale.copy = function() {
	    return copy(scale, log$2()).base(scale.base());
	  };

	  initRange.apply(scale, arguments);

	  return scale;
	}

	function transformSymlog(c) {
	  return function(x) {
	    return Math.sign(x) * Math.log1p(Math.abs(x / c));
	  };
	}

	function transformSymexp(c) {
	  return function(x) {
	    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
	  };
	}

	function symlogish(transform) {
	  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

	  scale.constant = function(_) {
	    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
	  };

	  return linearish(scale);
	}

	function symlog() {
	  var scale = symlogish(transformer());

	  scale.copy = function() {
	    return copy(scale, symlog()).constant(scale.constant());
	  };

	  return initRange.apply(scale, arguments);
	}

	function transformPow(exponent) {
	  return function(x) {
	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	  };
	}

	function transformSqrt(x) {
	  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
	}

	function transformSquare(x) {
	  return x < 0 ? -x * x : x * x;
	}

	function powish(transform) {
	  var scale = transform(identity$3, identity$3),
	      exponent = 1;

	  function rescale() {
	    return exponent === 1 ? transform(identity$3, identity$3)
	        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
	        : transform(transformPow(exponent), transformPow(1 / exponent));
	  }

	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, rescale()) : exponent;
	  };

	  return linearish(scale);
	}

	function pow$2() {
	  var scale = powish(transformer());

	  scale.copy = function() {
	    return copy(scale, pow$2()).exponent(scale.exponent());
	  };

	  initRange.apply(scale, arguments);

	  return scale;
	}

	function sqrt$1() {
	  return pow$2.apply(null, arguments).exponent(0.5);
	}

	function quantile() {
	  var domain = [],
	      range = [],
	      thresholds = [],
	      unknown;

	  function rescale() {
	    var i = 0, n = Math.max(1, range.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];
	  }

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$1.call(_), rescale()) : range.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.quantiles = function() {
	    return thresholds.slice();
	  };

	  scale.copy = function() {
	    return quantile()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };

	  return initRange.apply(scale, arguments);
	}

	function quantize() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range = [0, 1],
	      unknown;

	  function scale(x) {
	    return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
	  }

	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };

	  scale.range = function(_) {
	    return arguments.length ? (n = (range = slice$1.call(_)).length - 1, rescale()) : range.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : scale;
	  };

	  scale.thresholds = function() {
	    return domain.slice();
	  };

	  scale.copy = function() {
	    return quantize()
	        .domain([x0, x1])
	        .range(range)
	        .unknown(unknown);
	  };

	  return initRange.apply(linearish(scale), arguments);
	}

	function threshold$1() {
	  var domain = [0.5],
	      range = [0, 1],
	      unknown,
	      n = 1;

	  function scale(x) {
	    return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$1.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$1.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };

	  return initRange.apply(scale, arguments);
	}

	var t0$1 = new Date,
	    t1$1 = new Date;

	function newInterval(floori, offseti, count, field) {

	  function interval(date) {
	    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
	  }

	  interval.floor = function(date) {
	    return floori(date = new Date(+date)), date;
	  };

	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function(start, stop, step) {
	    var range = [], previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    while (previous < start && start < stop);
	    return range;
	  };

	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };

	  if (count) {
	    interval.count = function(start, end) {
	      t0$1.setTime(+start), t1$1.setTime(+end);
	      floori(t0$1), floori(t1$1);
	      return Math.floor(count(t0$1, t1$1));
	    };

	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }

	  return interval;
	}

	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});

	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};

	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;

	var second = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds());
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});

	var minute = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});

	var hour = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});

	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});

	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});

	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});

	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};

	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});

	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});

	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});

	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});

	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});

	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newDate(y, m, d) {
	  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
	}

	function formatLocale$1(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;

	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);

	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "q": formatQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };

	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "q": formatUTCQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };

	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "q": parseQuarter,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };

	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;

	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, Z) {
	    return function(string) {
	      var d = newDate(1900, undefined, 1),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week, day$1;
	      if (i != string.length) return null;

	      // If a UNIX timestamp is specified, return it.
	      if ("Q" in d) return new Date(d.Q);
	      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

	      // If this is utcParse, never use the local timezone.
	      if (Z && !("Z" in d)) d.Z = 0;

	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;

	      // If the month was not specified, inherit from the quarter.
	      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;
	        if ("Z" in d) {
	          week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
	          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
	          week = utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
	          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
	          week = day.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
	      }

	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }

	      // Otherwise, all fields are in local time.
	      return localDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatQuarter(d) {
	    return 1 + ~~(d.getMonth() / 3);
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  function formatUTCQuarter(d) {
	    return 1 + ~~(d.getUTCMonth() / 3);
	  }

	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", false);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier += "", true);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}

	var pads = {"-": "", "_": " ", "0": "0"},
	    numberRe = /^\s*\d+/, // note: ignores next directive
	    percentRe = /^%/,
	    requoteRe = /[\\^$*+?|[\]().{}]/g;

	function pad$1(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}

	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseQuarter(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}

	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.s = +n[0], i + n[0].length) : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad$1(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad$1(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad$1(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad$1(1 + day.count(year(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad$1(d.getMilliseconds(), p, 3);
	}

	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}

	function formatMonthNumber(d, p) {
	  return pad$1(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad$1(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad$1(d.getSeconds(), p, 2);
	}

	function formatWeekdayNumberMonday(d) {
	  var day = d.getDay();
	  return day === 0 ? 7 : day;
	}

	function formatWeekNumberSunday(d, p) {
	  return pad$1(sunday.count(year(d) - 1, d), p, 2);
	}

	function formatWeekNumberISO(d, p) {
	  var day = d.getDay();
	  d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
	  return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
	}

	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad$1(monday.count(year(d) - 1, d), p, 2);
	}

	function formatYear(d, p) {
	  return pad$1(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad$1(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad$1(z / 60 | 0, "0", 2)
	      + pad$1(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad$1(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad$1(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad$1(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad$1(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}

	function formatUTCMonthNumber(d, p) {
	  return pad$1(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad$1(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad$1(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad$1(utcSunday.count(utcYear(d) - 1, d), p, 2);
	}

	function formatUTCWeekNumberISO(d, p) {
	  var day = d.getUTCDay();
	  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
	  return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
	}

	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad$1(utcMonday.count(utcYear(d) - 1, d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	function formatUnixTimestamp(d) {
	  return +d;
	}

	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}

	var locale$1;
	var timeFormat;
	var timeParse;
	var utcFormat;
	var utcParse;

	defaultLocale$1({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});

	function defaultLocale$1(definition) {
	  locale$1 = formatLocale$1(definition);
	  timeFormat = locale$1.format;
	  timeParse = locale$1.parse;
	  utcFormat = locale$1.utcFormat;
	  utcParse = locale$1.utcParse;
	  return locale$1;
	}

	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

	function formatIsoNative(date) {
	  return date.toISOString();
	}

	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : utcFormat(isoSpecifier);

	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}

	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : utcParse(isoSpecifier);

	var durationSecond$1 = 1000,
	    durationMinute$1 = durationSecond$1 * 60,
	    durationHour$1 = durationMinute$1 * 60,
	    durationDay$1 = durationHour$1 * 24,
	    durationWeek$1 = durationDay$1 * 7,
	    durationMonth = durationDay$1 * 30,
	    durationYear = durationDay$1 * 365;

	function date$1(t) {
	  return new Date(t);
	}

	function number$3(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}

	function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
	  var scale = continuous(identity$3, identity$3),
	      invert = scale.invert,
	      domain = scale.domain;

	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");

	  var tickIntervals = [
	    [second,  1,      durationSecond$1],
	    [second,  5,  5 * durationSecond$1],
	    [second, 15, 15 * durationSecond$1],
	    [second, 30, 30 * durationSecond$1],
	    [minute,  1,      durationMinute$1],
	    [minute,  5,  5 * durationMinute$1],
	    [minute, 15, 15 * durationMinute$1],
	    [minute, 30, 30 * durationMinute$1],
	    [  hour,  1,      durationHour$1  ],
	    [  hour,  3,  3 * durationHour$1  ],
	    [  hour,  6,  6 * durationHour$1  ],
	    [  hour, 12, 12 * durationHour$1  ],
	    [   day,  1,      durationDay$1   ],
	    [   day,  2,  2 * durationDay$1   ],
	    [  week,  1,      durationWeek$1  ],
	    [ month,  1,      durationMonth ],
	    [ month,  3,  3 * durationMonth ],
	    [  year,  1,      durationYear  ]
	  ];

	  function tickFormat(date) {
	    return (second(date) < date ? formatMillisecond
	        : minute(date) < date ? formatSecond
	        : hour(date) < date ? formatMinute
	        : day(date) < date ? formatHour
	        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year(date) < date ? formatMonth
	        : formatYear)(date);
	  }

	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;

	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = Math.max(tickStep(start, stop, interval), 1);
	        interval = millisecond;
	      }
	    }

	    return step == null ? interval : interval.every(step);
	  }

	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? domain(map$5.call(_, number$3)) : domain().map(date$1);
	  };

	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };

	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };

	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };

	  scale.copy = function() {
	    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
	  };

	  return scale;
	}

	function time() {
	  return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
	}

	function utcTime() {
	  return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
	}

	function transformer$1() {
	  var x0 = 0,
	      x1 = 1,
	      t0,
	      t1,
	      k10,
	      transform,
	      interpolator = identity$3,
	      clamp = false,
	      unknown;

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  return function(t) {
	    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
	    return scale;
	  };
	}

	function copy$1(source, target) {
	  return target
	      .domain(source.domain())
	      .interpolator(source.interpolator())
	      .clamp(source.clamp())
	      .unknown(source.unknown());
	}

	function sequential() {
	  var scale = linearish(transformer$1()(identity$3));

	  scale.copy = function() {
	    return copy$1(scale, sequential());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function sequentialLog() {
	  var scale = loggish(transformer$1()).domain([1, 10]);

	  scale.copy = function() {
	    return copy$1(scale, sequentialLog()).base(scale.base());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function sequentialSymlog() {
	  var scale = symlogish(transformer$1());

	  scale.copy = function() {
	    return copy$1(scale, sequentialSymlog()).constant(scale.constant());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function sequentialPow() {
	  var scale = powish(transformer$1());

	  scale.copy = function() {
	    return copy$1(scale, sequentialPow()).exponent(scale.exponent());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function sequentialSqrt() {
	  return sequentialPow.apply(null, arguments).exponent(0.5);
	}

	function sequentialQuantile() {
	  var domain = [],
	      interpolator = identity$3;

	  function scale(x) {
	    if (!isNaN(x = +x)) return interpolator((bisectRight(domain, x) - 1) / (domain.length - 1));
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return scale;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return sequentialQuantile(interpolator).domain(domain);
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function transformer$2() {
	  var x0 = 0,
	      x1 = 0.5,
	      x2 = 1,
	      t0,
	      t1,
	      t2,
	      k10,
	      k21,
	      interpolator = identity$3,
	      transform,
	      clamp = false,
	      unknown;

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  return function(t) {
	    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
	    return scale;
	  };
	}

	function diverging() {
	  var scale = linearish(transformer$2()(identity$3));

	  scale.copy = function() {
	    return copy$1(scale, diverging());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function divergingLog() {
	  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

	  scale.copy = function() {
	    return copy$1(scale, divergingLog()).base(scale.base());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function divergingSymlog() {
	  var scale = symlogish(transformer$2());

	  scale.copy = function() {
	    return copy$1(scale, divergingSymlog()).constant(scale.constant());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function divergingPow() {
	  var scale = powish(transformer$2());

	  scale.copy = function() {
	    return copy$1(scale, divergingPow()).exponent(scale.exponent());
	  };

	  return initInterpolator.apply(scale, arguments);
	}

	function divergingSqrt() {
	  return divergingPow.apply(null, arguments).exponent(0.5);
	}



	var d3Scales = /*#__PURE__*/Object.freeze({
		__proto__: null,
		scaleBand: band,
		scalePoint: point$2,
		scaleIdentity: identity$5,
		scaleLinear: linear$1,
		scaleLog: log$2,
		scaleSymlog: symlog,
		scaleOrdinal: ordinal,
		scaleImplicit: implicit,
		scalePow: pow$2,
		scaleSqrt: sqrt$1,
		scaleQuantile: quantile,
		scaleQuantize: quantize,
		scaleThreshold: threshold$1,
		scaleTime: time,
		scaleUtc: utcTime,
		scaleSequential: sequential,
		scaleSequentialLog: sequentialLog,
		scaleSequentialPow: sequentialPow,
		scaleSequentialSqrt: sequentialSqrt,
		scaleSequentialSymlog: sequentialSymlog,
		scaleSequentialQuantile: sequentialQuantile,
		scaleDiverging: diverging,
		scaleDivergingLog: divergingLog,
		scaleDivergingPow: divergingPow,
		scaleDivergingSqrt: divergingSqrt,
		scaleDivergingSymlog: divergingSymlog,
		tickFormat: tickFormat
	});

	function _typeof$b(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$b = function _typeof(obj) { return typeof obj; }; } else { _typeof$b = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$b(obj); }

	function _extends$8() { _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }

	function _slicedToArray$4(arr, i) { return _arrayWithHoles$5(arr) || _iterableToArrayLimit$4(arr, i) || _nonIterableRest$5(); }

	function _nonIterableRest$5() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$4(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$5(arr) { if (Array.isArray(arr)) return arr; }

	function _objectWithoutProperties$6(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$7(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$7(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$9(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$9(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$9(Constructor.prototype, protoProps); if (staticProps) _defineProperties$9(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$9(self, call) { if (call && (_typeof$b(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$a(self); }

	function _assertThisInitialized$a(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$9(o) { _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$9(o); }

	function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$9(subClass, superClass); }

	function _setPrototypeOf$9(o, p) { _setPrototypeOf$9 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$9(o, p); }

	var ErrorBar =
	/*#__PURE__*/
	function (_Component) {
	  _inherits$9(ErrorBar, _Component);

	  function ErrorBar() {
	    _classCallCheck$9(this, ErrorBar);

	    return _possibleConstructorReturn$9(this, _getPrototypeOf$9(ErrorBar).apply(this, arguments));
	  }

	  _createClass$9(ErrorBar, [{
	    key: "renderErrorBars",
	    value: function renderErrorBars() {
	      var _this$props = this.props,
	          offset = _this$props.offset,
	          layout = _this$props.layout,
	          width = _this$props.width,
	          dataKey = _this$props.dataKey,
	          data = _this$props.data,
	          dataPointFormatter = _this$props.dataPointFormatter,
	          xAxis = _this$props.xAxis,
	          yAxis = _this$props.yAxis,
	          others = _objectWithoutProperties$6(_this$props, ["offset", "layout", "width", "dataKey", "data", "dataPointFormatter", "xAxis", "yAxis"]);

	      var props = getPresentationAttributes(others);
	      return data.map(function (entry, i) {
	        var _dataPointFormatter = dataPointFormatter(entry, dataKey),
	            x = _dataPointFormatter.x,
	            y = _dataPointFormatter.y,
	            value = _dataPointFormatter.value,
	            errorVal = _dataPointFormatter.errorVal;

	        if (!errorVal) {
	          return null;
	        }

	        var xMid, yMid, xMin, yMin, xMax, yMax, scale, coordsTop, coordsMid, coordsBot, lowBound, highBound;

	        if (Array.isArray(errorVal)) {
	          var _errorVal = _slicedToArray$4(errorVal, 2);

	          lowBound = _errorVal[0];
	          highBound = _errorVal[1];
	        } else {
	          lowBound = highBound = errorVal;
	        }

	        if (layout === 'vertical') {
	          scale = xAxis.scale;
	          xMid = value;
	          yMid = y + offset;
	          xMin = scale(xMid - lowBound);
	          yMin = yMid + width;
	          xMax = scale(xMid + highBound);
	          yMax = yMid - width;
	          coordsTop = {
	            x1: xMax,
	            y1: yMin,
	            x2: xMax,
	            y2: yMax
	          };
	          coordsMid = {
	            x1: xMin,
	            y1: yMid,
	            x2: xMax,
	            y2: yMid
	          };
	          coordsBot = {
	            x1: xMin,
	            y1: yMin,
	            x2: xMin,
	            y2: yMax
	          };
	        } else if (layout === 'horizontal') {
	          scale = yAxis.scale;
	          xMid = x + offset;
	          yMid = value;
	          xMin = xMid - width;
	          xMax = xMid + width;
	          yMin = scale(yMid - lowBound);
	          yMax = scale(yMid + highBound);
	          coordsTop = {
	            x1: xMin,
	            y1: yMax,
	            x2: xMax,
	            y2: yMax
	          };
	          coordsMid = {
	            x1: xMid,
	            y1: yMin,
	            x2: xMid,
	            y2: yMax
	          };
	          coordsBot = {
	            x1: xMin,
	            y1: yMin,
	            x2: xMax,
	            y2: yMin
	          };
	        }

	        return (// eslint-disable-next-line react/no-array-index-key
	          react.createElement(Layer, _extends$8({
	            className: "recharts-errorBar",
	            key: "bar-".concat(i)
	          }, props), react.createElement("line", coordsTop), react.createElement("line", coordsMid), react.createElement("line", coordsBot))
	        );
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return react.createElement(Layer, {
	        className: "recharts-errorBars"
	      }, this.renderErrorBars());
	    }
	  }]);

	  return ErrorBar;
	}(react_3);

	ErrorBar.propTypes = {
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  data: propTypes.array,
	  xAxis: propTypes.object,
	  yAxis: propTypes.object,
	  layout: propTypes.string,
	  dataPointFormatter: propTypes.func,
	  stroke: propTypes.string,
	  strokeWidth: propTypes.number,
	  width: propTypes.number,
	  offset: propTypes.number
	};
	ErrorBar.defaultProps = {
	  stroke: 'black',
	  strokeWidth: 1.5,
	  width: 5,
	  offset: 0,
	  layout: 'horizontal'
	};

	function _toConsumableArray$7(arr) { return _arrayWithoutHoles$7(arr) || _iterableToArray$8(arr) || _nonIterableSpread$7(); }

	function _nonIterableSpread$7() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$8(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$7(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(source, true).forEach(function (key) { _defineProperty$e(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$e(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	var getValueByDataKey = function getValueByDataKey(obj, dataKey, defaultValue) {
	  if (isNil_1(obj) || isNil_1(dataKey)) {
	    return defaultValue;
	  }

	  if (isNumOrStr(dataKey)) {
	    return get_1(obj, dataKey, defaultValue);
	  }

	  if (isFunction_1(dataKey)) {
	    return dataKey(obj);
	  }

	  return defaultValue;
	};
	/**
	 * Get domain of data by key
	 * @param  {Array}   data      The data displayed in the chart
	 * @param  {String}  key       The unique key of a group of data
	 * @param  {String}  type      The type of axis
	 * @param  {Boolean} filterNil Whether or not filter nil values
	 * @return {Array} Domain of data
	 */

	var getDomainOfDataByKey = function getDomainOfDataByKey(data, key, type, filterNil) {
	  var flattenData = flatMap_1(data, function (entry) {
	    return getValueByDataKey(entry, key);
	  });

	  if (type === 'number') {
	    var domain = flattenData.filter(function (entry) {
	      return isNumber$3(entry) || parseFloat(entry, 10);
	    });
	    return domain.length ? [min_1(domain), max_1(domain)] : [Infinity, -Infinity];
	  }

	  var validateData = filterNil ? flattenData.filter(function (entry) {
	    return !isNil_1(entry);
	  }) : flattenData;
	  return validateData.map(function (entry) {
	    return isNumOrStr(entry) ? entry : '';
	  });
	};
	var calculateActiveTickIndex = function calculateActiveTickIndex(coordinate, ticks, unsortedTicks, axis) {
	  var index = -1;
	  var len = ticks.length;

	  if (len > 1) {
	    if (axis && axis.axisType === 'angleAxis' && Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6) {
	      var range = axis.range; // ticks are distributed in a circle

	      for (var i = 0; i < len; i++) {
	        var before = i > 0 ? unsortedTicks[i - 1].coordinate : unsortedTicks[len - 1].coordinate;
	        var cur = unsortedTicks[i].coordinate;
	        var after = i >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i + 1].coordinate;
	        var sameDirectionCoord = void 0;

	        if (mathSign(cur - before) !== mathSign(after - cur)) {
	          var diffInterval = [];

	          if (mathSign(after - cur) === mathSign(range[1] - range[0])) {
	            sameDirectionCoord = after;
	            var curInRange = cur + range[1] - range[0];
	            diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
	            diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
	          } else {
	            sameDirectionCoord = before;
	            var afterInRange = after + range[1] - range[0];
	            diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
	            diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
	          }

	          var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];

	          if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
	            index = unsortedTicks[i].index;
	            break;
	          }
	        } else {
	          var min = Math.min(before, after);
	          var max = Math.max(before, after);

	          if (coordinate > (min + cur) / 2 && coordinate <= (max + cur) / 2) {
	            index = unsortedTicks[i].index;
	            break;
	          }
	        }
	      }
	    } else {
	      // ticks are distributed in a single direction
	      for (var _i = 0; _i < len; _i++) {
	        if (_i === 0 && coordinate <= (ticks[_i].coordinate + ticks[_i + 1].coordinate) / 2 || _i > 0 && _i < len - 1 && coordinate > (ticks[_i].coordinate + ticks[_i - 1].coordinate) / 2 && coordinate <= (ticks[_i].coordinate + ticks[_i + 1].coordinate) / 2 || _i === len - 1 && coordinate > (ticks[_i].coordinate + ticks[_i - 1].coordinate) / 2) {
	          index = ticks[_i].index;
	          break;
	        }
	      }
	    }
	  } else {
	    index = 0;
	  }

	  return index;
	};
	/**
	 * Get the main color of each graphic item
	 * @param  {ReactElement} item A graphic item
	 * @return {String}            Color
	 */

	var getMainColorOfGraphicItem = function getMainColorOfGraphicItem(item) {
	  var displayName = item.type.displayName;
	  var _item$props = item.props,
	      stroke = _item$props.stroke,
	      fill = _item$props.fill;
	  var result;

	  switch (displayName) {
	    case 'Line':
	      result = stroke;
	      break;

	    case 'Area':
	    case 'Radar':
	      result = stroke && stroke !== 'none' ? stroke : fill;
	      break;

	    default:
	      result = fill;
	      break;
	  }

	  return result;
	};
	var getLegendProps = function getLegendProps(_ref) {
	  var children = _ref.children,
	      formatedGraphicalItems = _ref.formatedGraphicalItems,
	      legendWidth = _ref.legendWidth,
	      legendContent = _ref.legendContent;
	  var legendItem = findChildByType(children, Legend);

	  if (!legendItem) {
	    return null;
	  }

	  var legendData;

	  if (legendItem.props && legendItem.props.payload) {
	    legendData = legendItem.props && legendItem.props.payload;
	  } else if (legendContent === 'children') {
	    legendData = (formatedGraphicalItems || []).reduce(function (result, _ref2) {
	      var item = _ref2.item,
	          props = _ref2.props;
	      var data = props.sectors || props.data || [];
	      return result.concat(data.map(function (entry) {
	        return {
	          type: legendItem.props.iconType || item.props.legendType,
	          value: entry.name,
	          color: entry.fill,
	          payload: entry
	        };
	      }));
	    }, []);
	  } else {
	    legendData = (formatedGraphicalItems || []).map(function (_ref3) {
	      var item = _ref3.item;
	      var _item$props2 = item.props,
	          dataKey = _item$props2.dataKey,
	          name = _item$props2.name,
	          legendType = _item$props2.legendType,
	          hide = _item$props2.hide;
	      return {
	        inactive: hide,
	        dataKey: dataKey,
	        type: legendItem.props.iconType || legendType || 'square',
	        color: getMainColorOfGraphicItem(item),
	        value: name || dataKey,
	        payload: item.props
	      };
	    });
	  }

	  return _objectSpread$b({}, legendItem.props, {}, Legend.getWithHeight(legendItem, legendWidth), {
	    payload: legendData,
	    item: legendItem
	  });
	};
	/**
	 * Calculate the size of all groups for stacked bar graph
	 * @param  {Object} stackGroups The items grouped by axisId and stackId
	 * @return {Object} The size of all groups
	 */

	var getBarSizeList = function getBarSizeList(_ref4) {
	  var globalSize = _ref4.barSize,
	      _ref4$stackGroups = _ref4.stackGroups,
	      stackGroups = _ref4$stackGroups === void 0 ? {} : _ref4$stackGroups;

	  if (!stackGroups) {
	    return {};
	  }

	  var result = {};
	  var numericAxisIds = Object.keys(stackGroups);

	  for (var i = 0, len = numericAxisIds.length; i < len; i++) {
	    var sgs = stackGroups[numericAxisIds[i]].stackGroups;
	    var stackIds = Object.keys(sgs);

	    for (var j = 0, sLen = stackIds.length; j < sLen; j++) {
	      var _sgs$stackIds$j = sgs[stackIds[j]],
	          items = _sgs$stackIds$j.items,
	          cateAxisId = _sgs$stackIds$j.cateAxisId;
	      var barItems = items.filter(function (item) {
	        return getDisplayName(item.type).indexOf('Bar') >= 0;
	      });

	      if (barItems && barItems.length) {
	        var selfSize = barItems[0].props.barSize;
	        var cateId = barItems[0].props[cateAxisId];

	        if (!result[cateId]) {
	          result[cateId] = [];
	        }

	        result[cateId].push({
	          item: barItems[0],
	          stackList: barItems.slice(1),
	          barSize: isNil_1(selfSize) ? globalSize : selfSize
	        });
	      }
	    }
	  }

	  return result;
	};
	/**
	   * Calculate the size of each bar and the gap between two bars
	   * @param  {Number} bandSize  The size of each category
	   * @param  {sizeList} sizeList  The size of all groups
	   * @param  {maxBarSize} maxBarSize The maximum size of bar
	   * @return {Number} The size of each bar and the gap between two bars
	   */

	var getBarPosition = function getBarPosition(_ref5) {
	  var barGap = _ref5.barGap,
	      barCategoryGap = _ref5.barCategoryGap,
	      bandSize = _ref5.bandSize,
	      _ref5$sizeList = _ref5.sizeList,
	      sizeList = _ref5$sizeList === void 0 ? [] : _ref5$sizeList,
	      maxBarSize = _ref5.maxBarSize;
	  var len = sizeList.length;
	  if (len < 1) return null;
	  var realBarGap = getPercentValue(barGap, bandSize, 0, true);
	  var result; // whether or not is barSize setted by user

	  if (sizeList[0].barSize === +sizeList[0].barSize) {
	    var useFull = false;
	    var fullBarSize = bandSize / len;
	    var sum = sizeList.reduce(function (res, entry) {
	      return res + entry.barSize || 0;
	    }, 0);
	    sum += (len - 1) * realBarGap;

	    if (sum >= bandSize) {
	      sum -= (len - 1) * realBarGap;
	      realBarGap = 0;
	    }

	    if (sum >= bandSize && fullBarSize > 0) {
	      useFull = true;
	      fullBarSize *= 0.9;
	      sum = len * fullBarSize;
	    }

	    var offset = (bandSize - sum) / 2 >> 0;
	    var prev = {
	      offset: offset - realBarGap,
	      size: 0
	    };
	    result = sizeList.reduce(function (res, entry) {
	      var newRes = [].concat(_toConsumableArray$7(res), [{
	        item: entry.item,
	        position: {
	          offset: prev.offset + prev.size + realBarGap,
	          size: useFull ? fullBarSize : entry.barSize
	        }
	      }]);
	      prev = newRes[newRes.length - 1].position;

	      if (entry.stackList && entry.stackList.length) {
	        entry.stackList.forEach(function (item) {
	          newRes.push({
	            item: item,
	            position: prev
	          });
	        });
	      }

	      return newRes;
	    }, []);
	  } else {
	    var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);

	    if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
	      realBarGap = 0;
	    }

	    var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;

	    if (originalSize > 1) {
	      originalSize >>= 0;
	    }

	    var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;
	    result = sizeList.reduce(function (res, entry, i) {
	      var newRes = [].concat(_toConsumableArray$7(res), [{
	        item: entry.item,
	        position: {
	          offset: _offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,
	          size: size
	        }
	      }]);

	      if (entry.stackList && entry.stackList.length) {
	        entry.stackList.forEach(function (item) {
	          newRes.push({
	            item: item,
	            position: newRes[newRes.length - 1].position
	          });
	        });
	      }

	      return newRes;
	    }, []);
	  }

	  return result;
	};
	var appendOffsetOfLegend = function appendOffsetOfLegend(offset, items, props, legendBox) {
	  var children = props.children,
	      width = props.width,
	      height = props.height,
	      margin = props.margin;
	  var legendWidth = width - (margin.left || 0) - (margin.right || 0);
	  var legendHeight = height - (margin.top || 0) - (margin.bottom || 0);
	  var legendProps = getLegendProps({
	    children: children,
	    items: items,
	    legendWidth: legendWidth,
	    legendHeight: legendHeight
	  });
	  var newOffset = offset;

	  if (legendProps) {
	    var box = legendBox || {};
	    var align = legendProps.align,
	        verticalAlign = legendProps.verticalAlign,
	        layout = legendProps.layout;

	    if ((layout === 'vertical' || layout === 'horizontal' && verticalAlign === 'center') && isNumber$3(offset[align])) {
	      newOffset = _objectSpread$b({}, offset, _defineProperty$e({}, align, newOffset[align] + (box.width || 0)));
	    }

	    if ((layout === 'horizontal' || layout === 'vertical' && align === 'center') && isNumber$3(offset[verticalAlign])) {
	      newOffset = _objectSpread$b({}, offset, _defineProperty$e({}, verticalAlign, newOffset[verticalAlign] + (box.height || 0)));
	    }
	  }

	  return newOffset;
	};
	var getDomainOfErrorBars = function getDomainOfErrorBars(data, item, dataKey, axisType) {
	  var children = item.props.children;
	  var errorBars = findAllByType(children, ErrorBar).filter(function (errorBarChild) {
	    var direction = errorBarChild.props.direction;
	    return isNil_1(direction) || isNil_1(axisType) ? true : axisType.indexOf(direction) >= 0;
	  });

	  if (errorBars && errorBars.length) {
	    var keys = errorBars.map(function (errorBarChild) {
	      return errorBarChild.props.dataKey;
	    });
	    return data.reduce(function (result, entry) {
	      var entryValue = getValueByDataKey(entry, dataKey, 0);
	      var mainValue = isArray_1(entryValue) ? [min_1(entryValue), max_1(entryValue)] : [entryValue, entryValue];
	      var errorDomain = keys.reduce(function (prevErrorArr, k) {
	        var errorValue = getValueByDataKey(entry, k, 0);
	        var lowerValue = mainValue[0] - Math.abs(isArray_1(errorValue) ? errorValue[0] : errorValue);
	        var upperValue = mainValue[1] + Math.abs(isArray_1(errorValue) ? errorValue[1] : errorValue);
	        return [Math.min(lowerValue, prevErrorArr[0]), Math.max(upperValue, prevErrorArr[1])];
	      }, [Infinity, -Infinity]);
	      return [Math.min(errorDomain[0], result[0]), Math.max(errorDomain[1], result[1])];
	    }, [Infinity, -Infinity]);
	  }

	  return null;
	};
	var parseErrorBarsOfAxis = function parseErrorBarsOfAxis(data, items, dataKey, axisType) {
	  var domains = items.map(function (item) {
	    return getDomainOfErrorBars(data, item, dataKey, axisType);
	  }).filter(function (entry) {
	    return !isNil_1(entry);
	  });

	  if (domains && domains.length) {
	    return domains.reduce(function (result, entry) {
	      return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
	    }, [Infinity, -Infinity]);
	  }

	  return null;
	};
	/**
	 * Get domain of data by the configuration of item element
	 * @param  {Array}   data      The data displayed in the chart
	 * @param  {Array}   items     The instances of item
	 * @param  {String}  type      The type of axis, number - Number Axis, category - Category Axis
	 * @param  {Boolean} filterNil Whether or not filter nil values
	 * @return {Array}        Domain
	 */

	var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis(data, items, type, filterNil) {
	  var domains = items.map(function (item) {
	    var dataKey = item.props.dataKey;

	    if (type === 'number' && dataKey) {
	      return getDomainOfErrorBars(data, item, dataKey) || getDomainOfDataByKey(data, dataKey, type, filterNil);
	    }

	    return getDomainOfDataByKey(data, dataKey, type, filterNil);
	  });

	  if (type === 'number') {
	    // Calculate the domain of number axis
	    return domains.reduce(function (result, entry) {
	      return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
	    }, [Infinity, -Infinity]);
	  }

	  var tag = {}; // Get the union set of category axis

	  return domains.reduce(function (result, entry) {
	    for (var i = 0, len = entry.length; i < len; i++) {
	      if (!tag[entry[i]]) {
	        tag[entry[i]] = true;
	        result.push(entry[i]);
	      }
	    }

	    return result;
	  }, []);
	};
	var isCategorialAxis = function isCategorialAxis(layout, axisType) {
	  return layout === 'horizontal' && axisType === 'xAxis' || layout === 'vertical' && axisType === 'yAxis' || layout === 'centric' && axisType === 'angleAxis' || layout === 'radial' && axisType === 'radiusAxis';
	};
	/**
	 * Calculate the Coordinates of grid
	 * @param  {Array} ticks The ticks in axis
	 * @param {Number} min   The minimun value of axis
	 * @param {Number} max   The maximun value of axis
	 * @return {Array}       Coordinates
	 */

	var getCoordinatesOfGrid = function getCoordinatesOfGrid(ticks, min, max) {
	  var hasMin, hasMax;
	  var values = ticks.map(function (entry) {
	    if (entry.coordinate === min) {
	      hasMin = true;
	    }

	    if (entry.coordinate === max) {
	      hasMax = true;
	    }

	    return entry.coordinate;
	  });

	  if (!hasMin) {
	    values.push(min);
	  }

	  if (!hasMax) {
	    values.push(max);
	  }

	  return values;
	};
	/**
	 * Get the ticks of an axis
	 * @param  {Object}  axis The configuration of an axis
	 * @param {Boolean} isGrid Whether or not are the ticks in grid
	 * @param {Boolean} isAll Return the ticks of all the points or not
	 * @return {Array}  Ticks
	 */

	var getTicksOfAxis = function getTicksOfAxis(axis, isGrid, isAll) {
	  if (!axis) return null;
	  var scale = axis.scale;
	  var duplicateDomain = axis.duplicateDomain,
	      type = axis.type,
	      range = axis.range;
	  var offset = (isGrid || isAll) && type === 'category' && scale.bandwidth ? scale.bandwidth() / 2 : 0;
	  offset = axis.axisType === 'angleAxis' ? mathSign(range[0] - range[1]) * 2 * offset : offset; // The ticks setted by user should only affect the ticks adjacent to axis line

	  if (isGrid && (axis.ticks || axis.niceTicks)) {
	    return (axis.ticks || axis.niceTicks).map(function (entry) {
	      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
	      return {
	        coordinate: scale(scaleContent) + offset,
	        value: entry,
	        offset: offset
	      };
	    });
	  }

	  if (axis.isCategorial && axis.categoricalDomain) {
	    return axis.categoricalDomain.map(function (entry, index) {
	      return {
	        coordinate: scale(entry),
	        value: entry,
	        index: index,
	        offset: offset
	      };
	    });
	  }

	  if (scale.ticks && !isAll) {
	    return scale.ticks(axis.tickCount).map(function (entry) {
	      return {
	        coordinate: scale(entry) + offset,
	        value: entry,
	        offset: offset
	      };
	    });
	  } // When axis has duplicated text, serial numbers are used to generate scale


	  return scale.domain().map(function (entry, index) {
	    return {
	      coordinate: scale(entry) + offset,
	      value: duplicateDomain ? duplicateDomain[entry] : entry,
	      index: index,
	      offset: offset
	    };
	  });
	};
	/**
	 * combine the handlers
	 * @param  {Function} defaultHandler Internal private handler
	 * @param  {Function} parentHandler  Handler function specified in parent component
	 * @param  {Function} childHandler   Handler function specified in child component
	 * @return {Function}                The combined handler
	 */

	var combineEventHandlers = function combineEventHandlers(defaultHandler, parentHandler, childHandler) {
	  var customizedHandler;

	  if (isFunction_1(childHandler)) {
	    customizedHandler = childHandler;
	  } else if (isFunction_1(parentHandler)) {
	    customizedHandler = parentHandler;
	  }

	  if (isFunction_1(defaultHandler) || customizedHandler) {
	    return function (arg1, arg2, arg3, arg4) {
	      if (isFunction_1(defaultHandler)) {
	        defaultHandler(arg1, arg2, arg3, arg4);
	      }

	      if (isFunction_1(customizedHandler)) {
	        customizedHandler(arg1, arg2, arg3, arg4);
	      }
	    };
	  }

	  return null;
	};
	/**
	 * Parse the scale function of axis
	 * @param  {Object}   axis          The option of axis
	 * @param  {String}   chartType     The displayName of chart
	 * @return {Function}               The scale funcion
	 */

	var parseScale = function parseScale(axis, chartType) {
	  var scale = axis.scale,
	      type = axis.type,
	      layout = axis.layout,
	      axisType = axis.axisType;

	  if (scale === 'auto') {
	    if (layout === 'radial' && axisType === 'radiusAxis') {
	      return {
	        scale: band(),
	        realScaleType: 'band'
	      };
	    }

	    if (layout === 'radial' && axisType === 'angleAxis') {
	      return {
	        scale: linear$1(),
	        realScaleType: 'linear'
	      };
	    }

	    if (type === 'category' && chartType && (chartType.indexOf('LineChart') >= 0 || chartType.indexOf('AreaChart') >= 0)) {
	      return {
	        scale: point$2(),
	        realScaleType: 'point'
	      };
	    }

	    if (type === 'category') {
	      return {
	        scale: band(),
	        realScaleType: 'band'
	      };
	    }

	    return {
	      scale: linear$1(),
	      realScaleType: 'linear'
	    };
	  }

	  if (isString_1(scale)) {
	    var name = "scale".concat(scale.slice(0, 1).toUpperCase()).concat(scale.slice(1));
	    return {
	      scale: (d3Scales[name] || point$2)(),
	      realScaleType: d3Scales[name] ? name : 'point'
	    };
	  }

	  return isFunction_1(scale) ? {
	    scale: scale
	  } : {
	    scale: point$2(),
	    realScaleType: 'point'
	  };
	};
	var EPS$2 = 1e-4;
	var checkDomainOfScale = function checkDomainOfScale(scale) {
	  var domain = scale.domain();

	  if (!domain || domain.length <= 2) {
	    return;
	  }

	  var len = domain.length;
	  var range = scale.range();
	  var min = Math.min(range[0], range[1]) - EPS$2;
	  var max = Math.max(range[0], range[1]) + EPS$2;
	  var first = scale(domain[0]);
	  var last = scale(domain[len - 1]);

	  if (first < min || first > max || last < min || last > max) {
	    scale.domain([domain[0], domain[len - 1]]);
	  }
	};
	var findPositionOfBar = function findPositionOfBar(barPosition, child) {
	  if (!barPosition) {
	    return null;
	  }

	  for (var i = 0, len = barPosition.length; i < len; i++) {
	    if (barPosition[i].item === child) {
	      return barPosition[i].position;
	    }
	  }

	  return null;
	};
	var truncateByDomain = function truncateByDomain(value, domain) {
	  if (!domain || domain.length !== 2 || !isNumber$3(domain[0]) || !isNumber$3(domain[1])) {
	    return value;
	  }

	  var min = Math.min(domain[0], domain[1]);
	  var max = Math.max(domain[0], domain[1]);
	  var result = [value[0], value[1]];

	  if (!isNumber$3(value[0]) || value[0] < min) {
	    result[0] = min;
	  }

	  if (!isNumber$3(value[1]) || value[1] > max) {
	    result[1] = max;
	  }

	  if (result[0] > max) {
	    result[0] = max;
	  }

	  if (result[1] < min) {
	    result[1] = min;
	  }

	  return result;
	};
	/* eslint no-param-reassign: 0 */

	var offsetSign = function offsetSign(series) {
	  var n = series.length;

	  if (n <= 0) {
	    return;
	  }

	  for (var j = 0, m = series[0].length; j < m; ++j) {
	    var positive = 0;
	    var negative = 0;

	    for (var i = 0; i < n; ++i) {
	      var value = _isNaN(series[i][j][1]) ? series[i][j][0] : series[i][j][1];
	      /* eslint-disable prefer-destructuring */

	      if (value >= 0) {
	        series[i][j][0] = positive;
	        series[i][j][1] = positive + value;
	        positive = series[i][j][1];
	      } else {
	        series[i][j][0] = negative;
	        series[i][j][1] = negative + value;
	        negative = series[i][j][1];
	      }
	      /* eslint-enable prefer-destructuring */

	    }
	  }
	};
	var STACK_OFFSET_MAP = {
	  sign: offsetSign,
	  expand: stackOffsetExpand,
	  none: stackOffsetNone,
	  silhouette: stackOffsetSilhouette,
	  wiggle: stackOffsetWiggle
	};
	var getStackedData = function getStackedData(data, stackItems, offsetType) {
	  var dataKeys = stackItems.map(function (item) {
	    return item.props.dataKey;
	  });
	  var stack = shapeStack().keys(dataKeys).value(function (d, key) {
	    return +getValueByDataKey(d, key, 0);
	  }).order(stackOrderNone).offset(STACK_OFFSET_MAP[offsetType]);
	  return stack(data);
	};
	var getStackGroupsByAxisId = function getStackGroupsByAxisId(data, _items, numericAxisId, cateAxisId, offsetType, reverseStackOrder) {
	  if (!data) {
	    return null;
	  } // reversing items to affect render order (for layering)


	  var items = reverseStackOrder ? _items.reverse() : _items;
	  var stackGroups = items.reduce(function (result, item) {
	    var _item$props3 = item.props,
	        stackId = _item$props3.stackId,
	        hide = _item$props3.hide;

	    if (hide) {
	      return result;
	    }

	    var axisId = item.props[numericAxisId];
	    var parentGroup = result[axisId] || {
	      hasStack: false,
	      stackGroups: {}
	    };

	    if (isNumOrStr(stackId)) {
	      var childGroup = parentGroup.stackGroups[stackId] || {
	        numericAxisId: numericAxisId,
	        cateAxisId: cateAxisId,
	        items: []
	      };
	      childGroup.items.push(item);
	      parentGroup.hasStack = true;
	      parentGroup.stackGroups[stackId] = childGroup;
	    } else {
	      parentGroup.stackGroups[uniqueId('_stackId_')] = {
	        numericAxisId: numericAxisId,
	        cateAxisId: cateAxisId,
	        items: [item]
	      };
	    }

	    return _objectSpread$b({}, result, _defineProperty$e({}, axisId, parentGroup));
	  }, {});
	  return Object.keys(stackGroups).reduce(function (result, axisId) {
	    var group = stackGroups[axisId];

	    if (group.hasStack) {
	      group.stackGroups = Object.keys(group.stackGroups).reduce(function (res, stackId) {
	        var g = group.stackGroups[stackId];
	        return _objectSpread$b({}, res, _defineProperty$e({}, stackId, {
	          numericAxisId: numericAxisId,
	          cateAxisId: cateAxisId,
	          items: g.items,
	          stackedData: getStackedData(data, g.items, offsetType)
	        }));
	      }, {});
	    }

	    return _objectSpread$b({}, result, _defineProperty$e({}, axisId, group));
	  }, {});
	};
	/**
	 * get domain of ticks
	 * @param  {Array} ticks Ticks of axis
	 * @param  {String} type  The type of axis
	 * @return {Array} domain
	 */

	var calculateDomainOfTicks = function calculateDomainOfTicks(ticks, type) {
	  if (type === 'number') {
	    return [min_1(ticks), max_1(ticks)];
	  }

	  return ticks;
	};
	/**
	 * Configure the scale function of axis
	 * @param {Object} scale The scale function
	 * @param {Object} opts  The configuration of axis
	 * @return {Object}      null
	 */

	var getTicksOfScale = function getTicksOfScale(scale, opts) {
	  var realScaleType = opts.realScaleType,
	      type = opts.type,
	      tickCount = opts.tickCount,
	      originalDomain = opts.originalDomain,
	      allowDecimals = opts.allowDecimals;
	  var scaleType = realScaleType || opts.scale;

	  if (scaleType !== 'auto' && scaleType !== 'linear') {
	    return null;
	  }

	  if (tickCount && type === 'number' && originalDomain && (originalDomain[0] === 'auto' || originalDomain[1] === 'auto')) {
	    // Calculate the ticks by the number of grid when the axis is a number axis
	    var domain = scale.domain();
	    var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);
	    scale.domain(calculateDomainOfTicks(tickValues, type));
	    return {
	      niceTicks: tickValues
	    };
	  }

	  if (tickCount && type === 'number') {
	    var _domain = scale.domain();

	    var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);

	    return {
	      niceTicks: _tickValues
	    };
	  }

	  return null;
	};
	var getCateCoordinateOfLine = function getCateCoordinateOfLine(_ref6) {
	  var axis = _ref6.axis,
	      ticks = _ref6.ticks,
	      bandSize = _ref6.bandSize,
	      entry = _ref6.entry,
	      index = _ref6.index,
	      dataKey = _ref6.dataKey;

	  if (axis.type === 'category') {
	    // find coordinate of category axis by the value of category
	    if (!axis.allowDuplicatedCategory && axis.dataKey && !isNil_1(entry[axis.dataKey])) {
	      var matchedTick = findEntryInArray(ticks, 'value', entry[axis.dataKey]);

	      if (matchedTick) {
	        return matchedTick.coordinate + bandSize / 2;
	      }
	    }

	    return ticks[index] ? ticks[index].coordinate + bandSize / 2 : null;
	  }

	  var value = getValueByDataKey(entry, !isNil_1(dataKey) ? dataKey : axis.dataKey);
	  return !isNil_1(value) ? axis.scale(value) : null;
	};
	var getCateCoordinateOfBar = function getCateCoordinateOfBar(_ref7) {
	  var axis = _ref7.axis,
	      ticks = _ref7.ticks,
	      offset = _ref7.offset,
	      bandSize = _ref7.bandSize,
	      entry = _ref7.entry,
	      index = _ref7.index;

	  if (axis.type === 'category') {
	    return ticks[index] ? ticks[index].coordinate + offset : null;
	  }

	  var value = getValueByDataKey(entry, axis.dataKey, axis.domain[index]);
	  return !isNil_1(value) ? axis.scale(value) - bandSize / 2 + offset : null;
	};
	var getBaseValueOfBar = function getBaseValueOfBar(_ref8) {
	  var numericAxis = _ref8.numericAxis;
	  var domain = numericAxis.scale.domain();

	  if (numericAxis.type === 'number') {
	    var min = Math.min(domain[0], domain[1]);
	    var max = Math.max(domain[0], domain[1]);

	    if (min <= 0 && max >= 0) {
	      return 0;
	    }

	    if (max < 0) {
	      return max;
	    }

	    return min;
	  }

	  return domain[0];
	};
	var getStackedDataOfItem = function getStackedDataOfItem(item, stackGroups) {
	  var stackId = item.props.stackId;

	  if (isNumOrStr(stackId)) {
	    var group = stackGroups[stackId];

	    if (group && group.items.length) {
	      var itemIndex = -1;

	      for (var i = 0, len = group.items.length; i < len; i++) {
	        if (group.items[i] === item) {
	          itemIndex = i;
	          break;
	        }
	      }

	      return itemIndex >= 0 ? group.stackedData[itemIndex] : null;
	    }
	  }

	  return null;
	};

	var getDomainOfSingle = function getDomainOfSingle(data) {
	  return data.reduce(function (result, entry) {
	    return [min_1(entry.concat([result[0]]).filter(isNumber$3)), max_1(entry.concat([result[1]]).filter(isNumber$3))];
	  }, [Infinity, -Infinity]);
	};

	var getDomainOfStackGroups = function getDomainOfStackGroups(stackGroups, startIndex, endIndex) {
	  return Object.keys(stackGroups).reduce(function (result, stackId) {
	    var group = stackGroups[stackId];
	    var stackedData = group.stackedData;
	    var domain = stackedData.reduce(function (res, entry) {
	      var s = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
	      return [Math.min(res[0], s[0]), Math.max(res[1], s[1])];
	    }, [Infinity, -Infinity]);
	    return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
	  }, [Infinity, -Infinity]).map(function (result) {
	    return result === Infinity || result === -Infinity ? 0 : result;
	  });
	};
	var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
	var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
	var parseSpecifiedDomain = function parseSpecifiedDomain(specifiedDomain, dataDomain, allowDataOverflow) {
	  if (!isArray_1(specifiedDomain)) {
	    return dataDomain;
	  }

	  var domain = [];
	  /* eslint-disable prefer-destructuring */

	  if (isNumber$3(specifiedDomain[0])) {
	    domain[0] = allowDataOverflow ? specifiedDomain[0] : Math.min(specifiedDomain[0], dataDomain[0]);
	  } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
	    var value = +MIN_VALUE_REG.exec(specifiedDomain[0])[1];
	    domain[0] = dataDomain[0] - value;
	  } else if (isFunction_1(specifiedDomain[0])) {
	    domain[0] = specifiedDomain[0](dataDomain[0]);
	  } else {
	    domain[0] = dataDomain[0];
	  }

	  if (isNumber$3(specifiedDomain[1])) {
	    domain[1] = allowDataOverflow ? specifiedDomain[1] : Math.max(specifiedDomain[1], dataDomain[1]);
	  } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
	    var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1];

	    domain[1] = dataDomain[1] + _value;
	  } else if (isFunction_1(specifiedDomain[1])) {
	    domain[1] = specifiedDomain[1](dataDomain[1]);
	  } else {
	    domain[1] = dataDomain[1];
	  }
	  /* eslint-enable prefer-destructuring */


	  return domain;
	};
	/**
	 * Calculate the size between two category
	 * @param  {Object} axis  The options of axis
	 * @param  {Array}  ticks The ticks of axis
	 * @return {Number} Size
	 */

	var getBandSizeOfAxis = function getBandSizeOfAxis(axis, ticks) {
	  if (axis && axis.scale && axis.scale.bandwidth) {
	    return axis.scale.bandwidth();
	  }

	  if (axis && ticks && ticks.length >= 2) {
	    var orderedTicks = sortBy_1(ticks, function (o) {
	      return o.coordinate;
	    });

	    var bandSize = Infinity;

	    for (var i = 1, len = orderedTicks.length; i < len; i++) {
	      var cur = orderedTicks[i];
	      var prev = orderedTicks[i - 1];
	      bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
	    }

	    return bandSize === Infinity ? 0 : bandSize;
	  }

	  return 0;
	};
	/**
	 * parse the domain of a category axis when a domain is specified
	 * @param   {Array}        specifiedDomain  The domain specified by users
	 * @param   {Array}        calculatedDomain The domain calculated by dateKey
	 * @param   {ReactElement} axisChild        The axis element
	 * @returns {Array}        domains
	 */

	var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis(specifiedDomain, calculatedDomain, axisChild) {
	  if (!specifiedDomain || !specifiedDomain.length) {
	    return calculatedDomain;
	  }

	  if (isEqual_1(specifiedDomain, get_1(axisChild, 'type.defaultProps.domain'))) {
	    return calculatedDomain;
	  }

	  return specifiedDomain;
	};

	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(source, true).forEach(function (key) { _defineProperty$f(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$f(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _slicedToArray$5(arr, i) { return _arrayWithHoles$6(arr) || _iterableToArrayLimit$5(arr, i) || _nonIterableRest$6(); }

	function _nonIterableRest$6() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$5(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$6(arr) { if (Array.isArray(arr)) return arr; }
	var RADIAN$1 = Math.PI / 180;
	var radianToDegree = function radianToDegree(angleInRadian) {
	  return angleInRadian * 180 / Math.PI;
	};
	var polarToCartesian = function polarToCartesian(cx, cy, radius, angle) {
	  return {
	    x: cx + Math.cos(-RADIAN$1 * angle) * radius,
	    y: cy + Math.sin(-RADIAN$1 * angle) * radius
	  };
	};
	var getMaxRadius = function getMaxRadius(width, height) {
	  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	  return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;
	};
	/**
	 * Calculate the scale function, position, width, height of axes
	 * @param  {Object} props     Latest props
	 * @param  {Object} axisMap   The configuration of axes
	 * @param  {Object} offset    The offset of main part in the svg element
	 * @param  {Object} axisType  The type of axes, radius-axis or angle-axis
	 * @param  {String} chartName The name of chart
	 * @return {Object} Configuration
	 */

	var formatAxisMap = function formatAxisMap(props, axisMap, offset, axisType, chartName) {
	  var width = props.width,
	      height = props.height;
	  var startAngle = props.startAngle,
	      endAngle = props.endAngle;
	  var cx = getPercentValue(props.cx, width, width / 2);
	  var cy = getPercentValue(props.cy, height, height / 2);
	  var maxRadius = getMaxRadius(width, height, offset);
	  var innerRadius = getPercentValue(props.innerRadius, maxRadius, 0);
	  var outerRadius = getPercentValue(props.outerRadius, maxRadius, maxRadius * 0.8);
	  var ids = Object.keys(axisMap);
	  return ids.reduce(function (result, id) {
	    var axis = axisMap[id];
	    var domain = axis.domain,
	        reversed = axis.reversed;
	    var range;

	    if (isNil_1(axis.range)) {
	      if (axisType === 'angleAxis') {
	        range = [startAngle, endAngle];
	      } else if (axisType === 'radiusAxis') {
	        range = [innerRadius, outerRadius];
	      }

	      if (reversed) {
	        range = [range[1], range[0]];
	      }
	    } else {
	      range = axis.range;
	      var _range = range;

	      var _range2 = _slicedToArray$5(_range, 2);

	      startAngle = _range2[0];
	      endAngle = _range2[1];
	    }

	    var _parseScale = parseScale(axis, chartName),
	        realScaleType = _parseScale.realScaleType,
	        scale = _parseScale.scale;

	    scale.domain(domain).range(range);
	    checkDomainOfScale(scale);
	    var ticks = getTicksOfScale(scale, _objectSpread$c({}, axis, {
	      realScaleType: realScaleType
	    }));

	    var finalAxis = _objectSpread$c({}, axis, {}, ticks, {
	      range: range,
	      radius: outerRadius,
	      realScaleType: realScaleType,
	      scale: scale,
	      cx: cx,
	      cy: cy,
	      innerRadius: innerRadius,
	      outerRadius: outerRadius,
	      startAngle: startAngle,
	      endAngle: endAngle
	    });

	    return _objectSpread$c({}, result, _defineProperty$f({}, id, finalAxis));
	  }, {});
	};
	var distanceBetweenPoints = function distanceBetweenPoints(point, anotherPoint) {
	  var x1 = point.x,
	      y1 = point.y;
	  var x2 = anotherPoint.x,
	      y2 = anotherPoint.y;
	  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
	};
	var getAngleOfPoint = function getAngleOfPoint(_ref, _ref2) {
	  var x = _ref.x,
	      y = _ref.y;
	  var cx = _ref2.cx,
	      cy = _ref2.cy;
	  var radius = distanceBetweenPoints({
	    x: x,
	    y: y
	  }, {
	    x: cx,
	    y: cy
	  });

	  if (radius <= 0) {
	    return {
	      radius: radius
	    };
	  }

	  var cos = (x - cx) / radius;
	  var angleInRadian = Math.acos(cos);

	  if (y > cy) {
	    angleInRadian = 2 * Math.PI - angleInRadian;
	  }

	  return {
	    radius: radius,
	    angle: radianToDegree(angleInRadian),
	    angleInRadian: angleInRadian
	  };
	};
	var formatAngleOfSector = function formatAngleOfSector(_ref3) {
	  var startAngle = _ref3.startAngle,
	      endAngle = _ref3.endAngle;
	  var startCnt = Math.floor(startAngle / 360);
	  var endCnt = Math.floor(endAngle / 360);
	  var min = Math.min(startCnt, endCnt);
	  return {
	    startAngle: startAngle - min * 360,
	    endAngle: endAngle - min * 360
	  };
	};

	var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor(angle, _ref4) {
	  var startAngle = _ref4.startAngle,
	      endAngle = _ref4.endAngle;
	  var startCnt = Math.floor(startAngle / 360);
	  var endCnt = Math.floor(endAngle / 360);
	  var min = Math.min(startCnt, endCnt);
	  return angle + min * 360;
	};

	var inRangeOfSector = function inRangeOfSector(_ref5, sector) {
	  var x = _ref5.x,
	      y = _ref5.y;

	  var _getAngleOfPoint = getAngleOfPoint({
	    x: x,
	    y: y
	  }, sector),
	      radius = _getAngleOfPoint.radius,
	      angle = _getAngleOfPoint.angle;

	  var innerRadius = sector.innerRadius,
	      outerRadius = sector.outerRadius;

	  if (radius < innerRadius || radius > outerRadius) {
	    return false;
	  }

	  if (radius === 0) {
	    return true;
	  }

	  var _formatAngleOfSector = formatAngleOfSector(sector),
	      startAngle = _formatAngleOfSector.startAngle,
	      endAngle = _formatAngleOfSector.endAngle;

	  var formatAngle = angle;
	  var inRange;

	  if (startAngle <= endAngle) {
	    while (formatAngle > endAngle) {
	      formatAngle -= 360;
	    }

	    while (formatAngle < startAngle) {
	      formatAngle += 360;
	    }

	    inRange = formatAngle >= startAngle && formatAngle <= endAngle;
	  } else {
	    while (formatAngle > startAngle) {
	      formatAngle -= 360;
	    }

	    while (formatAngle < endAngle) {
	      formatAngle += 360;
	    }

	    inRange = formatAngle >= endAngle && formatAngle <= startAngle;
	  }

	  if (inRange) {
	    return _objectSpread$c({}, sector, {
	      radius: radius,
	      angle: reverseFormatAngleOfSetor(formatAngle, sector)
	    });
	  }

	  return null;
	};

	function _toConsumableArray$8(arr) { return _arrayWithoutHoles$8(arr) || _iterableToArray$9(arr) || _nonIterableSpread$8(); }

	function _nonIterableSpread$8() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$9(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$8(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _extends$9() { _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }

	function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(source, true).forEach(function (key) { _defineProperty$g(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$g(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	var cartesianViewBoxShape = propTypes.shape({
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number
	});
	var polarViewBoxShape = propTypes.shape({
	  cx: propTypes.number,
	  cy: propTypes.number,
	  innerRadius: propTypes.number,
	  outerRadius: propTypes.number,
	  startAngle: propTypes.number,
	  endAngle: propTypes.number
	});

	var propTypes$4 = _objectSpread$d({}, PRESENTATION_ATTRIBUTES, {
	  viewBox: propTypes.oneOfType([cartesianViewBoxShape, polarViewBoxShape]),
	  formatter: propTypes.func,
	  value: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  offset: propTypes.number,
	  position: propTypes.oneOf(['top', 'left', 'right', 'bottom', 'inside', 'outside', 'insideLeft', 'insideRight', 'insideTop', 'insideBottom', 'insideTopLeft', 'insideBottomLeft', 'insideTopRight', 'insideBottomRight', 'insideStart', 'insideEnd', 'end', 'center', 'centerTop', 'centerBottom']),
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
	  className: propTypes.string,
	  content: propTypes.oneOfType([propTypes.element, propTypes.func])
	});

	var defaultProps$1 = {
	  offset: 5
	};

	var getLabel = function getLabel(props) {
	  var value = props.value,
	      formatter = props.formatter;
	  var label = isNil_1(props.children) ? value : props.children;

	  if (isFunction_1(formatter)) {
	    return formatter(label);
	  }

	  return label;
	};

	var getDeltaAngle = function getDeltaAngle(startAngle, endAngle) {
	  var sign = mathSign(endAngle - startAngle);
	  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
	  return sign * deltaAngle;
	};

	var renderRadialLabel = function renderRadialLabel(labelProps, label, attrs) {
	  var position = labelProps.position,
	      viewBox = labelProps.viewBox,
	      offset = labelProps.offset,
	      className = labelProps.className;
	  var cx = viewBox.cx,
	      cy = viewBox.cy,
	      innerRadius = viewBox.innerRadius,
	      outerRadius = viewBox.outerRadius,
	      startAngle = viewBox.startAngle,
	      endAngle = viewBox.endAngle,
	      clockWise = viewBox.clockWise;
	  var radius = (innerRadius + outerRadius) / 2;
	  var deltaAngle = getDeltaAngle(startAngle, endAngle);
	  var sign = deltaAngle >= 0 ? 1 : -1;
	  var labelAngle, direction;

	  if (position === 'insideStart') {
	    labelAngle = startAngle + sign * offset;
	    direction = clockWise;
	  } else if (position === 'insideEnd') {
	    labelAngle = endAngle - sign * offset;
	    direction = !clockWise;
	  } else if (position === 'end') {
	    labelAngle = endAngle + sign * offset;
	    direction = clockWise;
	  }

	  direction = deltaAngle <= 0 ? direction : !direction;
	  var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
	  var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
	  var path = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
	  var id = isNil_1(labelProps.id) ? uniqueId('recharts-radial-line-') : labelProps.id;
	  return react.createElement("text", _extends$9({}, attrs, {
	    dominantBaseline: "central",
	    className: classnames('recharts-radial-bar-label', className)
	  }), react.createElement("defs", null, react.createElement("path", {
	    id: id,
	    d: path
	  })), react.createElement("textPath", {
	    xlinkHref: "#".concat(id)
	  }, label));
	};

	var getAttrsOfPolarLabel = function getAttrsOfPolarLabel(props) {
	  var viewBox = props.viewBox,
	      offset = props.offset,
	      position = props.position;
	  var cx = viewBox.cx,
	      cy = viewBox.cy,
	      innerRadius = viewBox.innerRadius,
	      outerRadius = viewBox.outerRadius,
	      startAngle = viewBox.startAngle,
	      endAngle = viewBox.endAngle;
	  var midAngle = (startAngle + endAngle) / 2;

	  if (position === 'outside') {
	    var _polarToCartesian = polarToCartesian(cx, cy, outerRadius + offset, midAngle),
	        _x = _polarToCartesian.x,
	        _y = _polarToCartesian.y;

	    return {
	      x: _x,
	      y: _y,
	      textAnchor: _x >= cx ? 'start' : 'end',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'center') {
	    return {
	      x: cx,
	      y: cy,
	      textAnchor: 'middle',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'centerTop') {
	    return {
	      x: cx,
	      y: cy,
	      textAnchor: 'middle',
	      verticalAnchor: 'start'
	    };
	  }

	  if (position === 'centerBottom') {
	    return {
	      x: cx,
	      y: cy,
	      textAnchor: 'middle',
	      verticalAnchor: 'end'
	    };
	  }

	  var r = (innerRadius + outerRadius) / 2;

	  var _polarToCartesian2 = polarToCartesian(cx, cy, r, midAngle),
	      x = _polarToCartesian2.x,
	      y = _polarToCartesian2.y;

	  return {
	    x: x,
	    y: y,
	    textAnchor: 'middle',
	    verticalAnchor: 'middle'
	  };
	};

	var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel(props) {
	  var viewBox = props.viewBox,
	      offset = props.offset,
	      position = props.position;
	  var x = viewBox.x,
	      y = viewBox.y,
	      width = viewBox.width,
	      height = viewBox.height;
	  var sign = height >= 0 ? 1 : -1;

	  if (position === 'top') {
	    return {
	      x: x + width / 2,
	      y: y - sign * offset,
	      textAnchor: 'middle',
	      verticalAnchor: sign > 0 ? 'end' : 'start'
	    };
	  }

	  if (position === 'bottom') {
	    return {
	      x: x + width / 2,
	      y: y + height + sign * offset,
	      textAnchor: 'middle',
	      verticalAnchor: 'start'
	    };
	  }

	  if (position === 'left') {
	    return {
	      x: x - offset,
	      y: y + height / 2,
	      textAnchor: 'end',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'right') {
	    return {
	      x: x + width + offset,
	      y: y + height / 2,
	      textAnchor: 'start',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'insideLeft') {
	    return {
	      x: x + offset,
	      y: y + height / 2,
	      textAnchor: 'start',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'insideRight') {
	    return {
	      x: x + width - offset,
	      y: y + height / 2,
	      textAnchor: 'end',
	      verticalAnchor: 'middle'
	    };
	  }

	  if (position === 'insideTop') {
	    return {
	      x: x + width / 2,
	      y: y + sign * offset,
	      textAnchor: 'middle',
	      verticalAnchor: 'start'
	    };
	  }

	  if (position === 'insideBottom') {
	    return {
	      x: x + width / 2,
	      y: y + height - sign * offset,
	      textAnchor: 'middle',
	      verticalAnchor: 'end'
	    };
	  }

	  if (position === 'insideTopLeft') {
	    return {
	      x: x + offset,
	      y: y + sign * offset,
	      textAnchor: 'start',
	      verticalAnchor: 'start'
	    };
	  }

	  if (position === 'insideTopRight') {
	    return {
	      x: x + width - offset,
	      y: y + sign * offset,
	      textAnchor: 'end',
	      verticalAnchor: 'start'
	    };
	  }

	  if (position === 'insideBottomLeft') {
	    return {
	      x: x + offset,
	      y: y + height - sign * offset,
	      textAnchor: 'start',
	      verticalAnchor: 'end'
	    };
	  }

	  if (position === 'insideBottomRight') {
	    return {
	      x: x + width - offset,
	      y: y + height - sign * offset,
	      textAnchor: 'end',
	      verticalAnchor: 'end'
	    };
	  }

	  if (isObject_1(position) && (isNumber$3(position.x) || isPercent(position.x)) && (isNumber$3(position.y) || isPercent(position.y))) {
	    return {
	      x: x + getPercentValue(position.x, width),
	      y: y + getPercentValue(position.y, height),
	      textAnchor: 'end',
	      verticalAnchor: 'end'
	    };
	  }

	  return {
	    x: x + width / 2,
	    y: y + height / 2,
	    textAnchor: 'middle',
	    verticalAnchor: 'middle'
	  };
	};

	var isPolar = function isPolar(viewBox) {
	  return isNumber$3(viewBox.cx);
	};

	function Label(props) {
	  var viewBox = props.viewBox,
	      position = props.position,
	      value = props.value,
	      children = props.children,
	      content = props.content,
	      _props$className = props.className,
	      className = _props$className === void 0 ? '' : _props$className;

	  if (!viewBox || isNil_1(value) && isNil_1(children) && !react_26(content) && !isFunction_1(content)) {
	    return null;
	  }

	  if (react_26(content)) {
	    return react_24(content, props);
	  }

	  var label;

	  if (isFunction_1(content)) {
	    label = content(props);

	    if (react_26(label)) {
	      return label;
	    }
	  } else {
	    label = getLabel(props);
	  }

	  var isPolarLabel = isPolar(viewBox);
	  var attrs = getPresentationAttributes(props);
	  var events = filterEventAttributes(props);

	  if (isPolarLabel && (position === 'insideStart' || position === 'insideEnd' || position === 'end')) {
	    return renderRadialLabel(props, label, attrs);
	  }

	  var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props);
	  return react.createElement(Text, _extends$9({
	    className: classnames('recharts-label', className)
	  }, attrs, positionAttrs, events), label);
	}

	Label.displayName = 'Label';
	Label.defaultProps = defaultProps$1;
	Label.propTypes = propTypes$4;

	var parseViewBox = function parseViewBox(props) {
	  var cx = props.cx,
	      cy = props.cy,
	      angle = props.angle,
	      startAngle = props.startAngle,
	      endAngle = props.endAngle,
	      r = props.r,
	      radius = props.radius,
	      innerRadius = props.innerRadius,
	      outerRadius = props.outerRadius,
	      x = props.x,
	      y = props.y,
	      top = props.top,
	      left = props.left,
	      width = props.width,
	      height = props.height,
	      clockWise = props.clockWise;

	  if (isNumber$3(width) && isNumber$3(height)) {
	    if (isNumber$3(x) && isNumber$3(y)) {
	      return {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      };
	    }

	    if (isNumber$3(top) && isNumber$3(left)) {
	      return {
	        x: top,
	        y: left,
	        width: width,
	        height: height
	      };
	    }
	  }

	  if (isNumber$3(x) && isNumber$3(y)) {
	    return {
	      x: x,
	      y: y,
	      width: 0,
	      height: 0
	    };
	  }

	  if (isNumber$3(cx) && isNumber$3(cy)) {
	    return {
	      cx: cx,
	      cy: cy,
	      startAngle: startAngle || angle || 0,
	      endAngle: endAngle || angle || 0,
	      innerRadius: innerRadius || 0,
	      outerRadius: outerRadius || radius || r || 0,
	      clockWise: clockWise
	    };
	  }

	  if (props.viewBox) {
	    return props.viewBox;
	  }

	  return {};
	};

	var parseLabel = function parseLabel(label, viewBox) {
	  if (!label) {
	    return null;
	  }

	  if (label === true) {
	    return react.createElement(Label, {
	      key: "label-implicit",
	      viewBox: viewBox
	    });
	  }

	  if (isNumOrStr(label)) {
	    return react.createElement(Label, {
	      key: "label-implicit",
	      viewBox: viewBox,
	      value: label
	    });
	  }

	  if (react_26(label)) {
	    if (label.type === Label) {
	      return react_24(label, {
	        key: 'label-implicit',
	        viewBox: viewBox
	      });
	    }

	    return react.createElement(Label, {
	      key: "label-implicit",
	      content: label,
	      viewBox: viewBox
	    });
	  }

	  if (isFunction_1(label)) {
	    return react.createElement(Label, {
	      key: "label-implicit",
	      content: label,
	      viewBox: viewBox
	    });
	  }

	  if (isObject_1(label)) {
	    return react.createElement(Label, _extends$9({
	      viewBox: viewBox
	    }, label, {
	      key: "label-implicit"
	    }));
	  }

	  return null;
	};

	var renderCallByParent = function renderCallByParent(parentProps, viewBox) {
	  var ckeckPropsLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	  if (!parentProps || !parentProps.children && ckeckPropsLabel && !parentProps.label) {
	    return null;
	  }

	  var children = parentProps.children;
	  var parentViewBox = parseViewBox(parentProps);
	  var explicitChilren = findAllByType(children, Label).map(function (child, index) {
	    return react_24(child, {
	      viewBox: viewBox || parentViewBox,
	      key: "label-".concat(index)
	    });
	  });

	  if (!ckeckPropsLabel) {
	    return explicitChilren;
	  }

	  var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox);
	  return [implicitLabel].concat(_toConsumableArray$8(explicitChilren));
	};

	Label.parseViewBox = parseViewBox;
	Label.renderCallByParent = renderCallByParent;

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}

	var last_1 = last$1;

	function _toConsumableArray$9(arr) { return _arrayWithoutHoles$9(arr) || _iterableToArray$a(arr) || _nonIterableSpread$9(); }

	function _nonIterableSpread$9() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$a(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$9(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _extends$a() { _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }

	function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(source, true).forEach(function (key) { _defineProperty$h(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$h(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$7(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$8(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$8(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	var propTypes$5 = {
	  id: propTypes.string,
	  data: propTypes.arrayOf(propTypes.object),
	  valueAccessor: propTypes.func,
	  clockWise: propTypes.bool,
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func])
	};
	var defaultProps$2 = {
	  valueAccessor: function valueAccessor(entry) {
	    return isArray_1(entry.value) ? last_1(entry.value) : entry.value;
	  }
	};

	function LabelList(props) {
	  var data = props.data,
	      valueAccessor = props.valueAccessor,
	      dataKey = props.dataKey,
	      clockWise = props.clockWise,
	      id = props.id,
	      others = _objectWithoutProperties$7(props, ["data", "valueAccessor", "dataKey", "clockWise", "id"]);

	  if (!data || !data.length) {
	    return null;
	  }

	  return react.createElement(Layer, {
	    className: "recharts-label-list"
	  }, data.map(function (entry, index) {
	    var value = isNil_1(dataKey) ? valueAccessor(entry, index) : getValueByDataKey(entry && entry.payload, dataKey);
	    var idProps = isNil_1(id) ? {} : {
	      id: "".concat(id, "-").concat(index)
	    };
	    return react.createElement(Label, _extends$a({}, getPresentationAttributes(entry), others, idProps, {
	      index: index,
	      value: value,
	      viewBox: Label.parseViewBox(isNil_1(clockWise) ? entry : _objectSpread$e({}, entry, {
	        clockWise: clockWise
	      })),
	      key: "label-".concat(index) // eslint-disable-line react/no-array-index-key

	    }));
	  }));
	}

	LabelList.propTypes = propTypes$5;
	LabelList.displayName = 'LabelList';

	var parseLabelList = function parseLabelList(label, data) {
	  if (!label) {
	    return null;
	  }

	  if (label === true) {
	    return react.createElement(LabelList, {
	      key: "labelList-implicit",
	      data: data
	    });
	  }

	  if (react.isValidElement(label) || isFunction_1(label)) {
	    return react.createElement(LabelList, {
	      key: "labelList-implicit",
	      data: data,
	      content: label
	    });
	  }

	  if (isObject_1(label)) {
	    return react.createElement(LabelList, _extends$a({
	      data: data
	    }, label, {
	      key: "labelList-implicit"
	    }));
	  }

	  return null;
	};

	var renderCallByParent$1 = function renderCallByParent(parentProps, data) {
	  var ckeckPropsLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	  if (!parentProps || !parentProps.children && ckeckPropsLabel && !parentProps.label) {
	    return null;
	  }

	  var children = parentProps.children;
	  var explicitChilren = findAllByType(children, LabelList).map(function (child, index) {
	    return react_24(child, {
	      data: data,
	      key: "labelList-".concat(index)
	    });
	  });

	  if (!ckeckPropsLabel) {
	    return explicitChilren;
	  }

	  var implicitLabelList = parseLabelList(parentProps.label, data);
	  return [implicitLabelList].concat(_toConsumableArray$9(explicitChilren));
	};

	LabelList.renderCallByParent = renderCallByParent$1;
	LabelList.defaultProps = defaultProps$2;

	function _typeof$c(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$c = function _typeof(obj) { return typeof obj; }; } else { _typeof$c = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$c(obj); }

	function _objectWithoutProperties$8(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$9(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$9(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	/**
	 * custom svg elements by rechart instance props and state.
	 * @returns {Object}   svg elements
	 */

	function Customized(_ref) {
	  var component = _ref.component,
	      props = _objectWithoutProperties$8(_ref, ["component"]);

	  var child;

	  if (react_26(component)) {
	    child = react_24(component, props);
	  } else if (isFunction_1(component)) {
	    child = component(props);
	  } else {
	    warn$1(false, 'Customized\'s props `component` must be React.element or Function, but got %s.', _typeof$c(component));
	  }

	  return react.createElement(Layer, {
	    className: "recharts-customized-wrapper"
	  }, child);
	}
	Customized.displayName = 'Customized';
	Customized.propTypes = {
	  component: propTypes.oneOfType([propTypes.element, propTypes.func]).isRequired
	};

	function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(source, true).forEach(function (key) { _defineProperty$i(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$i(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$d(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$d = function _typeof(obj) { return typeof obj; }; } else { _typeof$d = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$d(obj); }

	function _extends$b() { _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }

	function _classCallCheck$a(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$a(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$a(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$a(Constructor.prototype, protoProps); if (staticProps) _defineProperties$a(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$a(self, call) { if (call && (_typeof$d(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$b(self); }

	function _assertThisInitialized$b(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$a(o) { _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$a(o); }

	function _inherits$a(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$a(subClass, superClass); }

	function _setPrototypeOf$a(o, p) { _setPrototypeOf$a = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$a(o, p); }

	var getDeltaAngle$1 = function getDeltaAngle(startAngle, endAngle) {
	  var sign = mathSign(endAngle - startAngle);
	  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
	  return sign * deltaAngle;
	};

	var getTangentCircle = function getTangentCircle(_ref) {
	  var cx = _ref.cx,
	      cy = _ref.cy,
	      radius = _ref.radius,
	      angle = _ref.angle,
	      sign = _ref.sign,
	      isExternal = _ref.isExternal,
	      cornerRadius = _ref.cornerRadius,
	      cornerIsExternal = _ref.cornerIsExternal;
	  var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
	  var theta = Math.asin(cornerRadius / centerRadius) / RADIAN$1;
	  var centerAngle = cornerIsExternal ? angle : angle + sign * theta;
	  var center = polarToCartesian(cx, cy, centerRadius, centerAngle); // The coordinate of point which is tangent to the circle

	  var circleTangency = polarToCartesian(cx, cy, radius, centerAngle); // The coordinate of point which is tangent to the radius line

	  var lineTangencyAngle = cornerIsExternal ? angle - sign * theta : angle;
	  var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN$1), lineTangencyAngle);
	  return {
	    center: center,
	    circleTangency: circleTangency,
	    lineTangency: lineTangency,
	    theta: theta
	  };
	};

	var getSectorPath = function getSectorPath(_ref2) {
	  var cx = _ref2.cx,
	      cy = _ref2.cy,
	      innerRadius = _ref2.innerRadius,
	      outerRadius = _ref2.outerRadius,
	      startAngle = _ref2.startAngle,
	      endAngle = _ref2.endAngle;
	  var angle = getDeltaAngle$1(startAngle, endAngle); // When the angle of sector equals to 360, star point and end point coincide

	  var tempEndAngle = startAngle + angle;
	  var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
	  var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
	  var path = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");

	  if (innerRadius > 0) {
	    var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
	    var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
	    path += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
	  } else {
	    path += "L ".concat(cx, ",").concat(cy, " Z");
	  }

	  return path;
	};

	var getSectorWithCorner = function getSectorWithCorner(_ref3) {
	  var cx = _ref3.cx,
	      cy = _ref3.cy,
	      innerRadius = _ref3.innerRadius,
	      outerRadius = _ref3.outerRadius,
	      cornerRadius = _ref3.cornerRadius,
	      forceCornerRadius = _ref3.forceCornerRadius,
	      cornerIsExternal = _ref3.cornerIsExternal,
	      startAngle = _ref3.startAngle,
	      endAngle = _ref3.endAngle;
	  var sign = mathSign(endAngle - startAngle);

	  var _getTangentCircle = getTangentCircle({
	    cx: cx,
	    cy: cy,
	    radius: outerRadius,
	    angle: startAngle,
	    sign: sign,
	    cornerRadius: cornerRadius,
	    cornerIsExternal: cornerIsExternal
	  }),
	      soct = _getTangentCircle.circleTangency,
	      solt = _getTangentCircle.lineTangency,
	      sot = _getTangentCircle.theta;

	  var _getTangentCircle2 = getTangentCircle({
	    cx: cx,
	    cy: cy,
	    radius: outerRadius,
	    angle: endAngle,
	    sign: -sign,
	    cornerRadius: cornerRadius,
	    cornerIsExternal: cornerIsExternal
	  }),
	      eoct = _getTangentCircle2.circleTangency,
	      eolt = _getTangentCircle2.lineTangency,
	      eot = _getTangentCircle2.theta;

	  var outerArcAngle = Math.abs(startAngle - endAngle) - sot - eot;

	  if (outerArcAngle < 0) {
	    if (forceCornerRadius) {
	      return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
	    }

	    return getSectorPath({
	      cx: cx,
	      cy: cy,
	      innerRadius: innerRadius,
	      outerRadius: outerRadius,
	      startAngle: startAngle,
	      endAngle: endAngle
	    });
	  }

	  var path = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");

	  if (innerRadius > 0) {
	    var _getTangentCircle3 = getTangentCircle({
	      cx: cx,
	      cy: cy,
	      radius: innerRadius,
	      angle: startAngle,
	      sign: sign,
	      isExternal: true,
	      cornerRadius: cornerRadius,
	      cornerIsExternal: cornerIsExternal
	    }),
	        sict = _getTangentCircle3.circleTangency,
	        silt = _getTangentCircle3.lineTangency,
	        sit = _getTangentCircle3.theta;

	    var _getTangentCircle4 = getTangentCircle({
	      cx: cx,
	      cy: cy,
	      radius: innerRadius,
	      angle: endAngle,
	      sign: -sign,
	      isExternal: true,
	      cornerRadius: cornerRadius,
	      cornerIsExternal: cornerIsExternal
	    }),
	        eict = _getTangentCircle4.circleTangency,
	        eilt = _getTangentCircle4.lineTangency,
	        eit = _getTangentCircle4.theta;

	    var innerArcAngle = Math.abs(startAngle - endAngle) - sit - eit;

	    if (innerArcAngle < 0) {
	      return "".concat(path, "L").concat(cx, ",").concat(cy, "Z");
	    }

	    path += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
	  } else {
	    path += "L".concat(cx, ",").concat(cy, "Z");
	  }

	  return path;
	};

	var Sector =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$a(Sector, _PureComponent);

	  function Sector() {
	    _classCallCheck$a(this, Sector);

	    return _possibleConstructorReturn$a(this, _getPrototypeOf$a(Sector).apply(this, arguments));
	  }

	  _createClass$a(Sector, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          cx = _this$props.cx,
	          cy = _this$props.cy,
	          innerRadius = _this$props.innerRadius,
	          outerRadius = _this$props.outerRadius,
	          cornerRadius = _this$props.cornerRadius,
	          forceCornerRadius = _this$props.forceCornerRadius,
	          cornerIsExternal = _this$props.cornerIsExternal,
	          startAngle = _this$props.startAngle,
	          endAngle = _this$props.endAngle,
	          className = _this$props.className;

	      if (outerRadius < innerRadius || startAngle === endAngle) {
	        return null;
	      }

	      var layerClass = classnames('recharts-sector', className);
	      var deltaRadius = outerRadius - innerRadius;
	      var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
	      var path;

	      if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
	        path = getSectorWithCorner({
	          cx: cx,
	          cy: cy,
	          innerRadius: innerRadius,
	          outerRadius: outerRadius,
	          cornerRadius: Math.min(cr, deltaRadius / 2),
	          forceCornerRadius: forceCornerRadius,
	          cornerIsExternal: cornerIsExternal,
	          startAngle: startAngle,
	          endAngle: endAngle
	        });
	      } else {
	        path = getSectorPath({
	          cx: cx,
	          cy: cy,
	          innerRadius: innerRadius,
	          outerRadius: outerRadius,
	          startAngle: startAngle,
	          endAngle: endAngle
	        });
	      }

	      return react.createElement("path", _extends$b({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {
	        className: layerClass,
	        d: path
	      }));
	    }
	  }]);

	  return Sector;
	}(react_4);

	Sector.displayName = 'Sector';
	Sector.propTypes = _objectSpread$f({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  cx: propTypes.number,
	  cy: propTypes.number,
	  innerRadius: propTypes.number,
	  outerRadius: propTypes.number,
	  startAngle: propTypes.number,
	  endAngle: propTypes.number,
	  cornerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  forceCornerRadius: propTypes.bool,
	  cornerIsExternal: propTypes.bool
	});
	Sector.defaultProps = {
	  cx: 0,
	  cy: 0,
	  innerRadius: 0,
	  outerRadius: 0,
	  startAngle: 0,
	  endAngle: 0,
	  cornerRadius: 0,
	  forceCornerRadius: false,
	  cornerIsExternal: false
	};

	function _typeof$e(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$e = function _typeof(obj) { return typeof obj; }; } else { _typeof$e = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$e(obj); }

	function _extends$c() { _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }

	function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(source, true).forEach(function (key) { _defineProperty$j(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$j(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$b(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$b(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$b(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$b(Constructor.prototype, protoProps); if (staticProps) _defineProperties$b(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$b(self, call) { if (call && (_typeof$e(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$c(self); }

	function _assertThisInitialized$c(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$b(o) { _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$b(o); }

	function _inherits$b(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$b(subClass, superClass); }

	function _setPrototypeOf$b(o, p) { _setPrototypeOf$b = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$b(o, p); }
	var CURVE_FACTORIES = {
	  curveBasisClosed: curveBasisClosed,
	  curveBasisOpen: curveBasisOpen,
	  curveBasis: curveBasis,
	  curveLinearClosed: curveLinearClosed,
	  curveLinear: curveLinear,
	  curveMonotoneX: monotoneX,
	  curveMonotoneY: monotoneY,
	  curveNatural: curveNatural,
	  curveStep: curveStep,
	  curveStepAfter: stepAfter,
	  curveStepBefore: stepBefore
	};

	var defined = function defined(p) {
	  return p.x === +p.x && p.y === +p.y;
	};

	var getX = function getX(p) {
	  return p.x;
	};

	var getY = function getY(p) {
	  return p.y;
	};

	var getCurveFactory = function getCurveFactory(type, layout) {
	  if (isFunction_1(type)) {
	    return type;
	  }

	  var name = "curve".concat(type.slice(0, 1).toUpperCase()).concat(type.slice(1));

	  if (name === 'curveMonotone' && layout) {
	    return CURVE_FACTORIES["".concat(name).concat(layout === 'vertical' ? 'Y' : 'X')];
	  }

	  return CURVE_FACTORIES[name] || curveLinear;
	};

	var Curve =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$b(Curve, _PureComponent);

	  function Curve() {
	    _classCallCheck$b(this, Curve);

	    return _possibleConstructorReturn$b(this, _getPrototypeOf$b(Curve).apply(this, arguments));
	  }

	  _createClass$b(Curve, [{
	    key: "getPath",

	    /**
	     * Calculate the path of curve
	     * @return {String} path
	     */
	    value: function getPath() {
	      var _this$props = this.props,
	          type = _this$props.type,
	          points = _this$props.points,
	          baseLine = _this$props.baseLine,
	          layout = _this$props.layout,
	          connectNulls = _this$props.connectNulls;
	      var curveFactory = getCurveFactory(type, layout);
	      var formatPoints = connectNulls ? points.filter(function (entry) {
	        return defined(entry);
	      }) : points;
	      var lineFunction;

	      if (isArray_1(baseLine)) {
	        var formatBaseLine = connectNulls ? baseLine.filter(function (base) {
	          return defined(base);
	        }) : baseLine;
	        var areaPoints = formatPoints.map(function (entry, index) {
	          return _objectSpread$g({}, entry, {
	            base: formatBaseLine[index]
	          });
	        });

	        if (layout === 'vertical') {
	          lineFunction = shapeArea().y(getY).x1(getX).x0(function (d) {
	            return d.base.x;
	          });
	        } else {
	          lineFunction = shapeArea().x(getX).y1(getY).y0(function (d) {
	            return d.base.y;
	          });
	        }

	        lineFunction.defined(defined).curve(curveFactory);
	        return lineFunction(areaPoints);
	      }

	      if (layout === 'vertical' && isNumber$3(baseLine)) {
	        lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine);
	      } else if (isNumber$3(baseLine)) {
	        lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine);
	      } else {
	        lineFunction = shapeLine().x(getX).y(getY);
	      }

	      lineFunction.defined(defined).curve(curveFactory);
	      return lineFunction(formatPoints);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          className = _this$props2.className,
	          points = _this$props2.points,
	          path = _this$props2.path,
	          pathRef = _this$props2.pathRef;

	      if ((!points || !points.length) && !path) {
	        return null;
	      }

	      var realPath = points && points.length ? this.getPath() : path;
	      return react.createElement("path", _extends$c({}, getPresentationAttributes(this.props), filterEventAttributes(this.props, null, true), {
	        className: classnames('recharts-curve', className),
	        d: realPath,
	        ref: pathRef
	      }));
	    }
	  }]);

	  return Curve;
	}(react_4);

	Curve.displayName = 'Curve';
	Curve.propTypes = _objectSpread$g({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  type: propTypes.oneOfType([propTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), propTypes.func]),
	  layout: propTypes.oneOf(['horizontal', 'vertical']),
	  baseLine: propTypes.oneOfType([propTypes.number, propTypes.array]),
	  points: propTypes.arrayOf(propTypes.object),
	  connectNulls: propTypes.bool,
	  path: propTypes.string,
	  pathRef: propTypes.func
	});
	Curve.defaultProps = {
	  type: 'linear',
	  points: [],
	  connectNulls: false
	};

	function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(source, true).forEach(function (key) { _defineProperty$k(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$k(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$f(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$f = function _typeof(obj) { return typeof obj; }; } else { _typeof$f = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$f(obj); }

	function _extends$d() { _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }

	function _classCallCheck$c(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$c(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$c(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$c(Constructor.prototype, protoProps); if (staticProps) _defineProperties$c(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$c(self, call) { if (call && (_typeof$f(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$d(self); }

	function _assertThisInitialized$d(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$c(o) { _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$c(o); }

	function _inherits$c(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$c(subClass, superClass); }

	function _setPrototypeOf$c(o, p) { _setPrototypeOf$c = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$c(o, p); }

	var getRectangePath = function getRectangePath(x, y, width, height, radius) {
	  var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
	  var ySign = height >= 0 ? 1 : -1;
	  var xSign = width >= 0 ? 1 : -1;
	  var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
	  var path;

	  if (maxRadius > 0 && radius instanceof Array) {
	    var newRadius = [];

	    for (var i = 0, len = 4; i < len; i++) {
	      newRadius[i] = radius[i] > maxRadius ? maxRadius : radius[i];
	    }

	    path = "M".concat(x, ",").concat(y + ySign * newRadius[0]);

	    if (newRadius[0] > 0) {
	      path += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x + xSign * newRadius[0], ",").concat(y);
	    }

	    path += "L ".concat(x + width - xSign * newRadius[1], ",").concat(y);

	    if (newRadius[1] > 0) {
	      path += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x + width, ",").concat(y + ySign * newRadius[1]);
	    }

	    path += "L ".concat(x + width, ",").concat(y + height - ySign * newRadius[2]);

	    if (newRadius[2] > 0) {
	      path += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x + width - xSign * newRadius[2], ",").concat(y + height);
	    }

	    path += "L ".concat(x + xSign * newRadius[3], ",").concat(y + height);

	    if (newRadius[3] > 0) {
	      path += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x, ",").concat(y + height - ySign * newRadius[3]);
	    }

	    path += 'Z';
	  } else if (maxRadius > 0 && radius === +radius && radius > 0) {
	    var _newRadius = Math.min(maxRadius, radius);

	    path = "M ".concat(x, ",").concat(y + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + xSign * _newRadius, ",").concat(y, "\n            L ").concat(x + width - xSign * _newRadius, ",").concat(y, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + width, ",").concat(y + ySign * _newRadius, "\n            L ").concat(x + width, ",").concat(y + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x + width - xSign * _newRadius, ",").concat(y + height, "\n            L ").concat(x + xSign * _newRadius, ",").concat(y + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x, ",").concat(y + height - ySign * _newRadius, " Z");
	  } else {
	    path = "M ".concat(x, ",").concat(y, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
	  }

	  return path;
	};

	var Rectangle =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$c(Rectangle, _PureComponent);

	  function Rectangle() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$c(this, Rectangle);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$c(this, (_getPrototypeOf2 = _getPrototypeOf$c(Rectangle)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      totalLength: -1
	    };
	    return _this;
	  }

	  _createClass$c(Rectangle, [{
	    key: "componentDidMount",

	    /* eslint-disable  react/no-did-mount-set-state */
	    value: function componentDidMount() {
	      if (this.node && this.node.getTotalLength) {
	        try {
	          var totalLength = this.node.getTotalLength();

	          if (totalLength) {
	            this.setState({
	              totalLength: totalLength
	            });
	          }
	        } catch (err) {// calculate total length error
	        }
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          x = _this$props.x,
	          y = _this$props.y,
	          width = _this$props.width,
	          height = _this$props.height,
	          radius = _this$props.radius,
	          className = _this$props.className;
	      var totalLength = this.state.totalLength;
	      var _this$props2 = this.props,
	          animationEasing = _this$props2.animationEasing,
	          animationDuration = _this$props2.animationDuration,
	          animationBegin = _this$props2.animationBegin,
	          isAnimationActive = _this$props2.isAnimationActive,
	          isUpdateAnimationActive = _this$props2.isUpdateAnimationActive;

	      if (x !== +x || y !== +y || width !== +width || height !== +height || width === 0 || height === 0) {
	        return null;
	      }

	      var layerClass = classnames('recharts-rectangle', className);

	      if (!isUpdateAnimationActive) {
	        return react.createElement("path", _extends$d({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {
	          className: layerClass,
	          d: getRectangePath(x, y, width, height, radius)
	        }));
	      }

	      return react.createElement(Animate, {
	        canBegin: totalLength > 0,
	        from: {
	          width: width,
	          height: height,
	          x: x,
	          y: y
	        },
	        to: {
	          width: width,
	          height: height,
	          x: x,
	          y: y
	        },
	        duration: animationDuration,
	        animationEasing: animationEasing,
	        isActive: isUpdateAnimationActive
	      }, function (_ref) {
	        var currWidth = _ref.width,
	            currHeight = _ref.height,
	            currX = _ref.x,
	            currY = _ref.y;
	        return react.createElement(Animate, {
	          canBegin: totalLength > 0,
	          from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
	          to: "".concat(totalLength, "px 0px"),
	          attributeName: "strokeDasharray",
	          begin: animationBegin,
	          duration: animationDuration,
	          isActive: isAnimationActive,
	          easing: animationEasing
	        }, react.createElement("path", _extends$d({}, getPresentationAttributes(_this2.props), filterEventAttributes(_this2.props), {
	          className: layerClass,
	          d: getRectangePath(currX, currY, currWidth, currHeight, radius),
	          ref: function ref(node) {
	            _this2.node = node;
	          }
	        })));
	      });
	    }
	  }]);

	  return Rectangle;
	}(react_4);

	Rectangle.displayName = 'Rectangle';
	Rectangle.propTypes = _objectSpread$h({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  radius: propTypes.oneOfType([propTypes.number, propTypes.array]),
	  isAnimationActive: propTypes.bool,
	  isUpdateAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])
	});
	Rectangle.defaultProps = {
	  x: 0,
	  y: 0,
	  width: 0,
	  height: 0,
	  // The radius of border
	  // The radius of four corners when radius is a number
	  // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
	  radius: 0,
	  isAnimationActive: false,
	  isUpdateAnimationActive: false,
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease'
	};

	function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(source, true).forEach(function (key) { _defineProperty$l(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$l(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$g(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$g = function _typeof(obj) { return typeof obj; }; } else { _typeof$g = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$g(obj); }

	function _extends$e() { _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }

	function _classCallCheck$d(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$d(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$d(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$d(Constructor.prototype, protoProps); if (staticProps) _defineProperties$d(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$d(self, call) { if (call && (_typeof$g(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$e(self); }

	function _assertThisInitialized$e(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$d(o) { _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$d(o); }

	function _inherits$d(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$d(subClass, superClass); }

	function _setPrototypeOf$d(o, p) { _setPrototypeOf$d = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$d(o, p); }

	var getPolygonPoints = function getPolygonPoints(points) {
	  return points.reduce(function (result, entry) {
	    if (entry.x === +entry.x && entry.y === +entry.y) {
	      result.push([entry.x, entry.y]);
	    }

	    return result;
	  }, []).join(' ');
	};

	var Polygon =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$d(Polygon, _PureComponent);

	  function Polygon() {
	    _classCallCheck$d(this, Polygon);

	    return _possibleConstructorReturn$d(this, _getPrototypeOf$d(Polygon).apply(this, arguments));
	  }

	  _createClass$d(Polygon, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          points = _this$props.points,
	          className = _this$props.className;

	      if (!points || !points.length) {
	        return null;
	      }

	      var layerClass = classnames('recharts-polygon', className);
	      return react.createElement("polygon", _extends$e({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {
	        className: layerClass,
	        points: getPolygonPoints(points)
	      }));
	    }
	  }]);

	  return Polygon;
	}(react_4);

	Polygon.displayName = 'Polygon';
	Polygon.propTypes = _objectSpread$i({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  points: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number
	  }))
	});

	function _typeof$h(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$h = function _typeof(obj) { return typeof obj; }; } else { _typeof$h = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$h(obj); }

	function _extends$f() { _extends$f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }

	function _classCallCheck$e(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$e(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$e(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$e(Constructor.prototype, protoProps); if (staticProps) _defineProperties$e(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$e(self, call) { if (call && (_typeof$h(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$f(self); }

	function _assertThisInitialized$f(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$e(o) { _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$e(o); }

	function _inherits$e(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$e(subClass, superClass); }

	function _setPrototypeOf$e(o, p) { _setPrototypeOf$e = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$e(o, p); }

	var Dot =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$e(Dot, _PureComponent);

	  function Dot() {
	    _classCallCheck$e(this, Dot);

	    return _possibleConstructorReturn$e(this, _getPrototypeOf$e(Dot).apply(this, arguments));
	  }

	  _createClass$e(Dot, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          cx = _this$props.cx,
	          cy = _this$props.cy,
	          r = _this$props.r,
	          className = _this$props.className;
	      var layerClass = classnames('recharts-dot', className);

	      if (cx === +cx && cy === +cy && r === +r) {
	        return react.createElement("circle", _extends$f({}, getPresentationAttributes(this.props), filterEventAttributes(this.props, null, true), {
	          className: layerClass,
	          cx: cx,
	          cy: cy,
	          r: r
	        }));
	      }

	      return null;
	    }
	  }]);

	  return Dot;
	}(react_4);

	Dot.displayName = 'Dot';
	Dot.propTypes = {
	  className: propTypes.string,
	  cx: propTypes.number,
	  cy: propTypes.number,
	  r: propTypes.number
	};

	function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(source, true).forEach(function (key) { _defineProperty$m(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$m(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$i(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$i = function _typeof(obj) { return typeof obj; }; } else { _typeof$i = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$i(obj); }

	function _extends$g() { _extends$g = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$g.apply(this, arguments); }

	function _classCallCheck$f(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$f(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$f(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$f(Constructor.prototype, protoProps); if (staticProps) _defineProperties$f(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$f(self, call) { if (call && (_typeof$i(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$g(self); }

	function _assertThisInitialized$g(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$f(o) { _getPrototypeOf$f = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$f(o); }

	function _inherits$f(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$f(subClass, superClass); }

	function _setPrototypeOf$f(o, p) { _setPrototypeOf$f = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$f(o, p); }

	var Cross =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$f(Cross, _PureComponent);

	  function Cross() {
	    _classCallCheck$f(this, Cross);

	    return _possibleConstructorReturn$f(this, _getPrototypeOf$f(Cross).apply(this, arguments));
	  }

	  _createClass$f(Cross, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          x = _this$props.x,
	          y = _this$props.y,
	          width = _this$props.width,
	          height = _this$props.height,
	          top = _this$props.top,
	          left = _this$props.left,
	          className = _this$props.className;

	      if (!isNumber$3(x) || !isNumber$3(y) || !isNumber$3(width) || !isNumber$3(height) || !isNumber$3(top) || !isNumber$3(left)) {
	        return null;
	      }

	      return react.createElement("path", _extends$g({}, getPresentationAttributes(this.props), {
	        className: classnames('recharts-cross', className),
	        d: this.constructor.getPath(x, y, width, height, top, left)
	      }));
	    }
	  }], [{
	    key: "getPath",
	    value: function getPath(x, y, width, height, top, left) {
	      return "M".concat(x, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y, "h").concat(width);
	    }
	  }]);

	  return Cross;
	}(react_4);

	Cross.displayName = 'Cross';
	Cross.propTypes = _objectSpread$j({}, PRESENTATION_ATTRIBUTES, {
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  top: propTypes.number,
	  left: propTypes.number,
	  className: propTypes.string
	});
	Cross.defaultProps = {
	  x: 0,
	  y: 0,
	  top: 0,
	  left: 0,
	  width: 0,
	  height: 0
	};

	function _typeof$j(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$j = function _typeof(obj) { return typeof obj; }; } else { _typeof$j = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$j(obj); }

	function _extends$h() { _extends$h = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$h.apply(this, arguments); }

	function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$h(source, true).forEach(function (key) { _defineProperty$n(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$h(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$n(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$g(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$g(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$g(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$g(Constructor.prototype, protoProps); if (staticProps) _defineProperties$g(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$g(self, call) { if (call && (_typeof$j(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$h(self); }

	function _assertThisInitialized$h(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$g(o) { _getPrototypeOf$g = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$g(o); }

	function _inherits$g(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$g(subClass, superClass); }

	function _setPrototypeOf$g(o, p) { _setPrototypeOf$g = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$g(o, p); }

	var PolarGrid =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$g(PolarGrid, _PureComponent);

	  function PolarGrid() {
	    _classCallCheck$g(this, PolarGrid);

	    return _possibleConstructorReturn$g(this, _getPrototypeOf$g(PolarGrid).apply(this, arguments));
	  }

	  _createClass$g(PolarGrid, [{
	    key: "getPolygonPath",
	    value: function getPolygonPath(radius) {
	      var _this$props = this.props,
	          cx = _this$props.cx,
	          cy = _this$props.cy,
	          polarAngles = _this$props.polarAngles;
	      var path = '';
	      polarAngles.forEach(function (angle, i) {
	        var point = polarToCartesian(cx, cy, radius, angle);

	        if (i) {
	          path += "L ".concat(point.x, ",").concat(point.y);
	        } else {
	          path += "M ".concat(point.x, ",").concat(point.y);
	        }
	      });
	      path += 'Z';
	      return path;
	    }
	    /**
	     * Draw axis of radial line
	     * @return {[type]} The lines
	     */

	  }, {
	    key: "renderPolarAngles",
	    value: function renderPolarAngles() {
	      var _this$props2 = this.props,
	          cx = _this$props2.cx,
	          cy = _this$props2.cy,
	          innerRadius = _this$props2.innerRadius,
	          outerRadius = _this$props2.outerRadius,
	          polarAngles = _this$props2.polarAngles;

	      if (!polarAngles || !polarAngles.length) {
	        return null;
	      }

	      var props = _objectSpread$k({
	        stroke: '#ccc'
	      }, getPresentationAttributes(this.props));

	      return react.createElement("g", {
	        className: "recharts-polar-grid-angle"
	      }, polarAngles.map(function (entry, i) {
	        var start = polarToCartesian(cx, cy, innerRadius, entry);
	        var end = polarToCartesian(cx, cy, outerRadius, entry);
	        return react.createElement("line", _extends$h({}, props, {
	          key: "line-".concat(i) // eslint-disable-line react/no-array-index-key
	          ,
	          x1: start.x,
	          y1: start.y,
	          x2: end.x,
	          y2: end.y
	        }));
	      }));
	    }
	    /**
	     * Draw concentric circles
	     * @param {Number} radius The radius of circle
	     * @param {Number} index  The index of circle
	     * @param {Object} extraProps Extra props
	     * @return {ReactElement} circle
	     */

	  }, {
	    key: "renderConcentricCircle",
	    value: function renderConcentricCircle(radius, index, extraProps) {
	      var _this$props3 = this.props,
	          cx = _this$props3.cx,
	          cy = _this$props3.cy;

	      var props = _objectSpread$k({
	        stroke: '#ccc'
	      }, getPresentationAttributes(this.props), {
	        fill: 'none'
	      }, extraProps);

	      return react.createElement("circle", _extends$h({}, props, {
	        className: "recharts-polar-grid-concentric-circle",
	        key: "circle-".concat(index),
	        cx: cx,
	        cy: cy,
	        r: radius
	      }));
	    }
	    /**
	     * Draw concentric polygons
	     * @param {Number} radius     The radius of polygon
	     * @param {Number} index      The index of polygon
	     * @param {Object} extraProps Extra props
	     * @return {ReactElement} polygon
	     */

	  }, {
	    key: "renderConcentricPolygon",
	    value: function renderConcentricPolygon(radius, index, extraProps) {
	      var props = _objectSpread$k({
	        stroke: '#ccc'
	      }, getPresentationAttributes(this.props), {
	        fill: 'none'
	      }, extraProps);

	      return react.createElement("path", _extends$h({}, props, {
	        className: "recharts-polar-grid-concentric-polygon",
	        key: "path-".concat(index),
	        d: this.getPolygonPath(radius)
	      }));
	    }
	    /**
	     * Draw concentric axis
	     * @return {ReactElement} Concentric axis
	     * @todo Optimize the name
	     */

	  }, {
	    key: "renderConcentricPath",
	    value: function renderConcentricPath() {
	      var _this = this;

	      var _this$props4 = this.props,
	          polarRadius = _this$props4.polarRadius,
	          gridType = _this$props4.gridType;

	      if (!polarRadius || !polarRadius.length) {
	        return null;
	      }

	      return react.createElement("g", {
	        className: "recharts-polar-grid-concentric"
	      }, polarRadius.map(function (entry, i) {
	        return gridType === 'circle' ? _this.renderConcentricCircle(entry, i) : _this.renderConcentricPolygon(entry, i);
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var outerRadius = this.props.outerRadius;

	      if (outerRadius <= 0) {
	        return null;
	      }

	      return react.createElement("g", {
	        className: "recharts-polar-grid"
	      }, this.renderPolarAngles(), this.renderConcentricPath());
	    }
	  }]);

	  return PolarGrid;
	}(react_4);

	PolarGrid.displayName = 'PolarGrid';
	PolarGrid.propTypes = _objectSpread$k({}, PRESENTATION_ATTRIBUTES, {
	  cx: propTypes.number,
	  cy: propTypes.number,
	  innerRadius: propTypes.number,
	  outerRadius: propTypes.number,
	  polarAngles: propTypes.arrayOf(propTypes.number),
	  polarRadius: propTypes.arrayOf(propTypes.number),
	  gridType: propTypes.oneOf(['polygon', 'circle'])
	});
	PolarGrid.defaultProps = {
	  cx: 0,
	  cy: 0,
	  innerRadius: 0,
	  outerRadius: 0,
	  gridType: 'polygon'
	};

	/**
	 * This method is like `_.min` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.minBy(objects, function(o) { return o.n; });
	 * // => { 'n': 1 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.minBy(objects, 'n');
	 * // => { 'n': 1 }
	 */
	function minBy(array, iteratee) {
	  return (array && array.length)
	    ? _baseExtremum(array, _baseIteratee(iteratee), _baseLt)
	    : undefined;
	}

	var minBy_1 = minBy;

	/**
	 * This method is like `_.max` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.maxBy(objects, function(o) { return o.n; });
	 * // => { 'n': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.maxBy(objects, 'n');
	 * // => { 'n': 2 }
	 */
	function maxBy(array, iteratee) {
	  return (array && array.length)
	    ? _baseExtremum(array, _baseIteratee(iteratee), _baseGt)
	    : undefined;
	}

	var maxBy_1 = maxBy;

	function _typeof$k(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$k = function _typeof(obj) { return typeof obj; }; } else { _typeof$k = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$k(obj); }

	function _extends$i() { _extends$i = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$i.apply(this, arguments); }

	function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$i(source, true).forEach(function (key) { _defineProperty$o(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$i(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$o(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$9(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$a(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$a(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$h(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$h(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$h(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$h(Constructor.prototype, protoProps); if (staticProps) _defineProperties$h(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$h(self, call) { if (call && (_typeof$k(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$i(self); }

	function _assertThisInitialized$i(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$h(o) { _getPrototypeOf$h = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$h(o); }

	function _inherits$h(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$h(subClass, superClass); }

	function _setPrototypeOf$h(o, p) { _setPrototypeOf$h = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$h(o, p); }

	var PolarRadiusAxis =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$h(PolarRadiusAxis, _PureComponent);

	  function PolarRadiusAxis() {
	    _classCallCheck$h(this, PolarRadiusAxis);

	    return _possibleConstructorReturn$h(this, _getPrototypeOf$h(PolarRadiusAxis).apply(this, arguments));
	  }

	  _createClass$h(PolarRadiusAxis, [{
	    key: "getTickValueCoord",

	    /**
	     * Calculate the coordinate of tick
	     * @param  {Number} coordinate The radius of tick
	     * @return {Object} (x, y)
	     */
	    value: function getTickValueCoord(_ref) {
	      var coordinate = _ref.coordinate;
	      var _this$props = this.props,
	          angle = _this$props.angle,
	          cx = _this$props.cx,
	          cy = _this$props.cy;
	      return polarToCartesian(cx, cy, coordinate, angle);
	    }
	  }, {
	    key: "getTickTextAnchor",
	    value: function getTickTextAnchor() {
	      var orientation = this.props.orientation;
	      var textAnchor;

	      switch (orientation) {
	        case 'left':
	          textAnchor = 'end';
	          break;

	        case 'right':
	          textAnchor = 'start';
	          break;

	        default:
	          textAnchor = 'middle';
	          break;
	      }

	      return textAnchor;
	    }
	  }, {
	    key: "getViewBox",
	    value: function getViewBox() {
	      var _this$props2 = this.props,
	          cx = _this$props2.cx,
	          cy = _this$props2.cy,
	          angle = _this$props2.angle,
	          ticks = _this$props2.ticks;

	      var maxRadiusTick = maxBy_1(ticks, function (entry) {
	        return entry.coordinate || 0;
	      });

	      var minRadiusTick = minBy_1(ticks, function (entry) {
	        return entry.coordinate || 0;
	      });

	      return {
	        cx: cx,
	        cy: cy,
	        startAngle: angle,
	        endAngle: angle,
	        innerRadius: minRadiusTick.coordinate || 0,
	        outerRadius: maxRadiusTick.coordinate || 0
	      };
	    }
	  }, {
	    key: "renderAxisLine",
	    value: function renderAxisLine() {
	      var _this$props3 = this.props,
	          cx = _this$props3.cx,
	          cy = _this$props3.cy,
	          angle = _this$props3.angle,
	          ticks = _this$props3.ticks,
	          axisLine = _this$props3.axisLine,
	          others = _objectWithoutProperties$9(_this$props3, ["cx", "cy", "angle", "ticks", "axisLine"]);

	      var extent = ticks.reduce(function (result, entry) {
	        return [Math.min(result[0], entry.coordinate), Math.max(result[1], entry.coordinate)];
	      }, [Infinity, -Infinity]);
	      var point0 = polarToCartesian(cx, cy, extent[0], angle);
	      var point1 = polarToCartesian(cx, cy, extent[1], angle);

	      var props = _objectSpread$l({}, getPresentationAttributes(others), {
	        fill: 'none'
	      }, getPresentationAttributes(axisLine), {
	        x1: point0.x,
	        y1: point0.y,
	        x2: point1.x,
	        y2: point1.y
	      });

	      return react.createElement("line", _extends$i({
	        className: "recharts-polar-radius-axis-line"
	      }, props));
	    }
	  }, {
	    key: "renderTicks",
	    value: function renderTicks() {
	      var _this = this;

	      var _this$props4 = this.props,
	          ticks = _this$props4.ticks,
	          tick = _this$props4.tick,
	          angle = _this$props4.angle,
	          tickFormatter = _this$props4.tickFormatter,
	          stroke = _this$props4.stroke,
	          others = _objectWithoutProperties$9(_this$props4, ["ticks", "tick", "angle", "tickFormatter", "stroke"]);

	      var textAnchor = this.getTickTextAnchor();
	      var axisProps = getPresentationAttributes(others);
	      var customTickProps = getPresentationAttributes(tick);
	      var items = ticks.map(function (entry, i) {
	        var coord = _this.getTickValueCoord(entry);

	        var tickProps = _objectSpread$l({
	          textAnchor: textAnchor,
	          transform: "rotate(".concat(90 - angle, ", ").concat(coord.x, ", ").concat(coord.y, ")")
	        }, axisProps, {
	          stroke: 'none',
	          fill: stroke
	        }, customTickProps, {
	          index: i
	        }, coord, {
	          payload: entry
	        });

	        return react.createElement(Layer, _extends$i({
	          className: "recharts-polar-radius-axis-tick",
	          key: "tick-".concat(i) // eslint-disable-line react/no-array-index-key

	        }, filterEventsOfChild(_this.props, entry, i)), _this.constructor.renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value) : entry.value));
	      });
	      return react.createElement(Layer, {
	        className: "recharts-polar-radius-axis-ticks"
	      }, items);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props5 = this.props,
	          ticks = _this$props5.ticks,
	          axisLine = _this$props5.axisLine,
	          tick = _this$props5.tick;

	      if (!ticks || !ticks.length) {
	        return null;
	      }

	      return react.createElement(Layer, {
	        className: "recharts-polar-radius-axis"
	      }, axisLine && this.renderAxisLine(), tick && this.renderTicks(), Label.renderCallByParent(this.props, this.getViewBox()));
	    }
	  }], [{
	    key: "renderTickItem",
	    value: function renderTickItem(option, props, value) {
	      var tickItem;

	      if (react.isValidElement(option)) {
	        tickItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        tickItem = option(props);
	      } else {
	        tickItem = react.createElement(Text, _extends$i({}, props, {
	          className: "recharts-polar-radius-axis-tick-value"
	        }), value);
	      }

	      return tickItem;
	    }
	  }]);

	  return PolarRadiusAxis;
	}(react_4);

	PolarRadiusAxis.displayName = 'PolarRadiusAxis';
	PolarRadiusAxis.axisType = 'radiusAxis';
	PolarRadiusAxis.propTypes = _objectSpread$l({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  type: propTypes.oneOf(['number', 'category']),
	  cx: propTypes.number,
	  cy: propTypes.number,
	  hide: propTypes.bool,
	  radiusAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  angle: propTypes.number,
	  tickCount: propTypes.number,
	  ticks: propTypes.arrayOf(propTypes.shape({
	    value: propTypes.any,
	    coordinate: propTypes.number
	  })),
	  orientation: propTypes.oneOf(['left', 'right', 'middle']),
	  axisLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  tick: propTypes.oneOfType([propTypes.bool, propTypes.object, propTypes.element, propTypes.func]),
	  stroke: propTypes.string,
	  tickFormatter: propTypes.func,
	  domain: propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.oneOf(['auto', 'dataMin', 'dataMax'])])),
	  scale: propTypes.oneOfType([propTypes.oneOf(['auto', 'linear', 'pow', 'sqrt', 'log', 'identity', 'time', 'band', 'point', 'ordinal', 'quantile', 'quantize', 'utc', 'sequential', 'threshold']), propTypes.func]),
	  allowDataOverflow: propTypes.bool,
	  allowDuplicatedCategory: propTypes.bool
	});
	PolarRadiusAxis.defaultProps = {
	  type: 'number',
	  radiusAxisId: 0,
	  cx: 0,
	  cy: 0,
	  angle: 0,
	  orientation: 'right',
	  stroke: '#ccc',
	  axisLine: true,
	  tick: true,
	  tickCount: 5,
	  domain: [0, 'auto'],
	  allowDataOverflow: false,
	  scale: 'auto',
	  allowDuplicatedCategory: true
	};

	function _typeof$l(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$l = function _typeof(obj) { return typeof obj; }; } else { _typeof$l = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$l(obj); }

	function _extends$j() { _extends$j = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$j.apply(this, arguments); }

	function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$j(source, true).forEach(function (key) { _defineProperty$p(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$j(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$p(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$i(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$i(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$i(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$i(Constructor.prototype, protoProps); if (staticProps) _defineProperties$i(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$i(self, call) { if (call && (_typeof$l(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$j(self); }

	function _assertThisInitialized$j(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$i(o) { _getPrototypeOf$i = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$i(o); }

	function _inherits$i(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$i(subClass, superClass); }

	function _setPrototypeOf$i(o, p) { _setPrototypeOf$i = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$i(o, p); }
	var RADIAN$2 = Math.PI / 180;
	var eps = 1e-5;

	var PolarAngleAxis =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$i(PolarAngleAxis, _PureComponent);

	  function PolarAngleAxis() {
	    _classCallCheck$i(this, PolarAngleAxis);

	    return _possibleConstructorReturn$i(this, _getPrototypeOf$i(PolarAngleAxis).apply(this, arguments));
	  }

	  _createClass$i(PolarAngleAxis, [{
	    key: "getTickLineCoord",

	    /**
	     * Calculate the coordinate of line endpoint
	     * @param  {Object} data The Data if ticks
	     * @return {Object} (x0, y0): The start point of text,
	     *                  (x1, y1): The end point close to text,
	     *                  (x2, y2): The end point close to axis
	     */
	    value: function getTickLineCoord(data) {
	      var _this$props = this.props,
	          cx = _this$props.cx,
	          cy = _this$props.cy,
	          radius = _this$props.radius,
	          orientation = _this$props.orientation,
	          tickLine = _this$props.tickLine;
	      var tickLineSize = tickLine && tickLine.size || 8;
	      var p1 = polarToCartesian(cx, cy, radius, data.coordinate);
	      var p2 = polarToCartesian(cx, cy, radius + (orientation === 'inner' ? -1 : 1) * tickLineSize, data.coordinate);
	      return {
	        x1: p1.x,
	        y1: p1.y,
	        x2: p2.x,
	        y2: p2.y
	      };
	    }
	    /**
	     * Get the text-anchor of each tick
	     * @param  {Object} data Data of ticks
	     * @return {String} text-anchor
	     */

	  }, {
	    key: "getTickTextAnchor",
	    value: function getTickTextAnchor(data) {
	      var orientation = this.props.orientation;
	      var cos = Math.cos(-data.coordinate * RADIAN$2);
	      var textAnchor;

	      if (cos > eps) {
	        textAnchor = orientation === 'outer' ? 'start' : 'end';
	      } else if (cos < -eps) {
	        textAnchor = orientation === 'outer' ? 'end' : 'start';
	      } else {
	        textAnchor = 'middle';
	      }

	      return textAnchor;
	    }
	  }, {
	    key: "renderAxisLine",
	    value: function renderAxisLine() {
	      var _this$props2 = this.props,
	          cx = _this$props2.cx,
	          cy = _this$props2.cy,
	          radius = _this$props2.radius,
	          axisLine = _this$props2.axisLine,
	          axisLineType = _this$props2.axisLineType;

	      var props = _objectSpread$m({}, getPresentationAttributes(this.props), {
	        fill: 'none'
	      }, getPresentationAttributes(axisLine));

	      if (axisLineType === 'circle') {
	        return react.createElement(Dot, _extends$j({
	          className: "recharts-polar-angle-axis-line"
	        }, props, {
	          cx: cx,
	          cy: cy,
	          r: radius
	        }));
	      }

	      var ticks = this.props.ticks;
	      var points = ticks.map(function (entry) {
	        return polarToCartesian(cx, cy, radius, entry.coordinate);
	      });
	      return react.createElement(Polygon, _extends$j({
	        className: "recharts-polar-angle-axis-line"
	      }, props, {
	        points: points
	      }));
	    }
	  }, {
	    key: "renderTicks",
	    value: function renderTicks() {
	      var _this = this;

	      var _this$props3 = this.props,
	          ticks = _this$props3.ticks,
	          tick = _this$props3.tick,
	          tickLine = _this$props3.tickLine,
	          tickFormatter = _this$props3.tickFormatter,
	          stroke = _this$props3.stroke;
	      var axisProps = getPresentationAttributes(this.props);
	      var customTickProps = getPresentationAttributes(tick);

	      var tickLineProps = _objectSpread$m({}, axisProps, {
	        fill: 'none'
	      }, getPresentationAttributes(tickLine));

	      var items = ticks.map(function (entry, i) {
	        var lineCoord = _this.getTickLineCoord(entry);

	        var textAnchor = _this.getTickTextAnchor(entry);

	        var tickProps = _objectSpread$m({
	          textAnchor: textAnchor
	        }, axisProps, {
	          stroke: 'none',
	          fill: stroke
	        }, customTickProps, {
	          index: i,
	          payload: entry,
	          x: lineCoord.x2,
	          y: lineCoord.y2
	        });

	        return react.createElement(Layer, _extends$j({
	          className: "recharts-polar-angle-axis-tick",
	          key: "tick-".concat(i) // eslint-disable-line react/no-array-index-key

	        }, filterEventsOfChild(_this.props, entry, i)), tickLine && react.createElement("line", _extends$j({
	          className: "recharts-polar-angle-axis-tick-line"
	        }, tickLineProps, lineCoord)), tick && _this.constructor.renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value) : entry.value));
	      });
	      return react.createElement(Layer, {
	        className: "recharts-polar-angle-axis-ticks"
	      }, items);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          ticks = _this$props4.ticks,
	          radius = _this$props4.radius,
	          axisLine = _this$props4.axisLine;

	      if (radius <= 0 || !ticks || !ticks.length) {
	        return null;
	      }

	      return react.createElement(Layer, {
	        className: "recharts-polar-angle-axis"
	      }, axisLine && this.renderAxisLine(), this.renderTicks());
	    }
	  }], [{
	    key: "renderTickItem",
	    value: function renderTickItem(option, props, value) {
	      var tickItem;

	      if (react.isValidElement(option)) {
	        tickItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        tickItem = option(props);
	      } else {
	        tickItem = react.createElement(Text, _extends$j({}, props, {
	          className: "recharts-polar-angle-axis-tick-value"
	        }), value);
	      }

	      return tickItem;
	    }
	  }]);

	  return PolarAngleAxis;
	}(react_4);

	PolarAngleAxis.displayName = 'PolarAngleAxis';
	PolarAngleAxis.axisType = 'angleAxis';
	PolarAngleAxis.propTypes = _objectSpread$m({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  type: propTypes.oneOf(['number', 'category']),
	  angleAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  dataKey: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.func]),
	  cx: propTypes.number,
	  cy: propTypes.number,
	  radius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  hide: propTypes.bool,
	  scale: propTypes.oneOfType([propTypes.oneOf(SCALE_TYPES), propTypes.func]),
	  axisLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  axisLineType: propTypes.oneOf(['polygon', 'circle']),
	  tickLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  tick: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.object, propTypes.element]),
	  ticks: propTypes.arrayOf(propTypes.shape({
	    value: propTypes.any,
	    coordinate: propTypes.number
	  })),
	  stroke: propTypes.string,
	  orientation: propTypes.oneOf(['inner', 'outer']),
	  tickFormatter: propTypes.func,
	  allowDuplicatedCategory: propTypes.bool
	});
	PolarAngleAxis.defaultProps = {
	  type: 'category',
	  angleAxisId: 0,
	  scale: 'auto',
	  cx: 0,
	  cy: 0,
	  domain: [0, 'auto'],
	  orientation: 'outer',
	  axisLine: true,
	  tickLine: true,
	  tick: true,
	  hide: false,
	  allowDuplicatedCategory: true
	};

	/** Built-in value references. */
	var getPrototype = _overArg(Object.getPrototypeOf, Object);

	var _getPrototype = getPrototype;

	/** `Object#toString` result references. */
	var objectTag$3 = '[object Object]';

	/** Used for built-in method references. */
	var funcProto$2 = Function.prototype,
	    objectProto$e = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$2 = funcProto$2.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$d = objectProto$e.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString$2.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject$4(value) {
	  if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$3) {
	    return false;
	  }
	  var proto = _getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty$d.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString$2.call(Ctor) == objectCtorString;
	}

	var isPlainObject_1 = isPlainObject$4;

	function _typeof$m(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$m = function _typeof(obj) { return typeof obj; }; } else { _typeof$m = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$m(obj); }

	function _extends$k() { _extends$k = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$k.apply(this, arguments); }

	function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$k(source, true).forEach(function (key) { _defineProperty$q(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$k(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$q(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$j(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$j(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$j(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$j(Constructor.prototype, protoProps); if (staticProps) _defineProperties$j(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$j(self, call) { if (call && (_typeof$m(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$k(self); }

	function _assertThisInitialized$k(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$j(o) { _getPrototypeOf$j = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$j(o); }

	function _inherits$j(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$j(subClass, superClass); }

	function _setPrototypeOf$j(o, p) { _setPrototypeOf$j = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$j(o, p); }

	var Pie =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$j(Pie, _PureComponent);

	  function Pie() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$j(this, Pie);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$j(this, (_getPrototypeOf2 = _getPrototypeOf$j(Pie)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };
	    _this.id = uniqueId('recharts-pie-');

	    _this.cachePrevData = function (sectors) {
	      _this.setState({
	        prevSectors: sectors
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    return _this;
	  }

	  _createClass$j(Pie, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          sectors = _this$props.sectors;

	      if (nextProps.isAnimationActive !== this.props.isAnimationActive) {
	        this.cachePrevData([]);
	      } else if (nextProps.animationId !== animationId) {
	        this.cachePrevData(sectors);
	      }
	    }
	  }, {
	    key: "isActiveIndex",
	    value: function isActiveIndex(i) {
	      var activeIndex = this.props.activeIndex;

	      if (Array.isArray(activeIndex)) {
	        return activeIndex.indexOf(i) !== -1;
	      }

	      return i === activeIndex;
	    }
	  }, {
	    key: "renderLabels",
	    value: function renderLabels(sectors) {
	      var _this2 = this;

	      var isAnimationActive = this.props.isAnimationActive;

	      if (isAnimationActive && !this.state.isAnimationFinished) {
	        return null;
	      }

	      var _this$props2 = this.props,
	          label = _this$props2.label,
	          labelLine = _this$props2.labelLine,
	          dataKey = _this$props2.dataKey,
	          valueKey = _this$props2.valueKey;
	      var pieProps = getPresentationAttributes(this.props);
	      var customLabelProps = getPresentationAttributes(label);
	      var customLabelLineProps = getPresentationAttributes(labelLine);
	      var offsetRadius = label && label.offsetRadius || 20;
	      var labels = sectors.map(function (entry, i) {
	        var midAngle = (entry.startAngle + entry.endAngle) / 2;
	        var endPoint = polarToCartesian(entry.cx, entry.cy, entry.outerRadius + offsetRadius, midAngle);

	        var labelProps = _objectSpread$n({}, pieProps, {}, entry, {
	          stroke: 'none'
	        }, customLabelProps, {
	          index: i,
	          textAnchor: _this2.constructor.getTextAnchor(endPoint.x, entry.cx)
	        }, endPoint);

	        var lineProps = _objectSpread$n({}, pieProps, {}, entry, {
	          fill: 'none',
	          stroke: entry.fill
	        }, customLabelLineProps, {
	          index: i,
	          points: [polarToCartesian(entry.cx, entry.cy, entry.outerRadius, midAngle), endPoint],
	          key: 'line'
	        });

	        var realDataKey = dataKey; // TODO: compatible to lower versions

	        if (isNil_1(dataKey) && isNil_1(valueKey)) {
	          realDataKey = 'value';
	        } else if (isNil_1(dataKey)) {
	          realDataKey = valueKey;
	        }

	        return (// eslint-disable-next-line react/no-array-index-key
	          react.createElement(Layer, {
	            key: "label-".concat(i)
	          }, labelLine && _this2.constructor.renderLabelLineItem(labelLine, lineProps), _this2.constructor.renderLabelItem(label, labelProps, getValueByDataKey(entry, realDataKey)))
	        );
	      });
	      return react.createElement(Layer, {
	        className: "recharts-pie-labels"
	      }, labels);
	    }
	  }, {
	    key: "renderSectorsStatically",
	    value: function renderSectorsStatically(sectors) {
	      var _this3 = this;

	      var _this$props3 = this.props,
	          activeShape = _this$props3.activeShape,
	          blendStroke = _this$props3.blendStroke;
	      return sectors.map(function (entry, i) {
	        var sectorOptions = _this3.isActiveIndex(i) ? activeShape : null;

	        var sectorProps = _objectSpread$n({}, entry, {
	          stroke: blendStroke ? entry.fill : entry.stroke
	        });

	        return react.createElement(Layer, _extends$k({
	          className: "recharts-pie-sector"
	        }, filterEventsOfChild(_this3.props, entry, i), {
	          key: "sector-".concat(i) // eslint-disable-line react/no-array-index-key

	        }), _this3.constructor.renderSectorItem(sectorOptions, sectorProps));
	      });
	    }
	  }, {
	    key: "renderSectorsWithAnimation",
	    value: function renderSectorsWithAnimation() {
	      var _this4 = this;

	      var _this$props4 = this.props,
	          sectors = _this$props4.sectors,
	          isAnimationActive = _this$props4.isAnimationActive,
	          animationBegin = _this$props4.animationBegin,
	          animationDuration = _this$props4.animationDuration,
	          animationEasing = _this$props4.animationEasing,
	          animationId = _this$props4.animationId;
	      var prevSectors = this.state.prevSectors;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "pie-".concat(animationId),
	        onAnimationStart: this.handleAnimationStart,
	        onAnimationEnd: this.handleAnimationEnd
	      }, function (_ref) {
	        var t = _ref.t;
	        var stepData = [];
	        var first = sectors && sectors[0];
	        var curAngle = first.startAngle;
	        sectors.forEach(function (entry, index) {
	          var prev = prevSectors && prevSectors[index];
	          var paddingAngle = index > 0 ? get_1(entry, 'paddingAngle', 0) : 0;

	          if (prev) {
	            var angleIp = interpolateNumber(prev.endAngle - prev.startAngle, entry.endAngle - entry.startAngle);

	            var latest = _objectSpread$n({}, entry, {
	              startAngle: curAngle + paddingAngle,
	              endAngle: curAngle + angleIp(t) + paddingAngle
	            });

	            stepData.push(latest);
	            curAngle = latest.endAngle;
	          } else {
	            var endAngle = entry.endAngle,
	                startAngle = entry.startAngle;
	            var interpolatorAngle = interpolateNumber(0, endAngle - startAngle);
	            var deltaAngle = interpolatorAngle(t);

	            var _latest = _objectSpread$n({}, entry, {
	              startAngle: curAngle + paddingAngle,
	              endAngle: curAngle + deltaAngle + paddingAngle
	            });

	            stepData.push(_latest);
	            curAngle = _latest.endAngle;
	          }
	        });
	        return react.createElement(Layer, null, _this4.renderSectorsStatically(stepData));
	      });
	    }
	  }, {
	    key: "renderSectors",
	    value: function renderSectors() {
	      var _this$props5 = this.props,
	          sectors = _this$props5.sectors,
	          isAnimationActive = _this$props5.isAnimationActive;
	      var prevSectors = this.state.prevSectors;

	      if (isAnimationActive && sectors && sectors.length && (!prevSectors || !isEqual_1(prevSectors, sectors))) {
	        return this.renderSectorsWithAnimation();
	      }

	      return this.renderSectorsStatically(sectors);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          hide = _this$props6.hide,
	          sectors = _this$props6.sectors,
	          className = _this$props6.className,
	          label = _this$props6.label,
	          cx = _this$props6.cx,
	          cy = _this$props6.cy,
	          innerRadius = _this$props6.innerRadius,
	          outerRadius = _this$props6.outerRadius,
	          isAnimationActive = _this$props6.isAnimationActive,
	          prevSectors = _this$props6.prevSectors;

	      if (hide || !sectors || !sectors.length || !isNumber$3(cx) || !isNumber$3(cy) || !isNumber$3(innerRadius) || !isNumber$3(outerRadius)) {
	        return null;
	      }

	      var layerClass = classnames('recharts-pie', className);
	      return react.createElement(Layer, {
	        className: layerClass
	      }, this.renderSectors(), label && this.renderLabels(sectors), Label.renderCallByParent(this.props, null, false), (!isAnimationActive || prevSectors && isEqual_1(prevSectors, sectors)) && LabelList.renderCallByParent(this.props, sectors, false));
	    }
	  }], [{
	    key: "getTextAnchor",
	    value: function getTextAnchor(x, cx) {
	      if (x > cx) {
	        return 'start';
	      }

	      if (x < cx) {
	        return 'end';
	      }

	      return 'middle';
	    }
	  }, {
	    key: "renderLabelLineItem",
	    value: function renderLabelLineItem(option, props) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      if (isFunction_1(option)) {
	        return option(props);
	      }

	      return react.createElement(Curve, _extends$k({}, props, {
	        type: "linear",
	        className: "recharts-pie-label-line"
	      }));
	    }
	  }, {
	    key: "renderLabelItem",
	    value: function renderLabelItem(option, props, value) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      var label = value;

	      if (isFunction_1(option)) {
	        label = option(props);

	        if (react.isValidElement(label)) {
	          return label;
	        }
	      }

	      return react.createElement(Text, _extends$k({}, props, {
	        alignmentBaseline: "middle",
	        className: "recharts-pie-label-text"
	      }), label);
	    }
	  }, {
	    key: "renderSectorItem",
	    value: function renderSectorItem(option, props) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      if (isFunction_1(option)) {
	        return option(props);
	      }

	      if (isPlainObject_1(option)) {
	        return react.createElement(Sector, _extends$k({}, props, option));
	      }

	      return react.createElement(Sector, props);
	    }
	  }]);

	  return Pie;
	}(react_4);

	Pie.displayName = 'Pie';
	Pie.propTypes = _objectSpread$n({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  animationId: propTypes.number,
	  cx: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  cy: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  startAngle: propTypes.number,
	  endAngle: propTypes.number,
	  paddingAngle: propTypes.number,
	  innerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  outerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  cornerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  nameKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  valueKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  data: propTypes.arrayOf(propTypes.object),
	  blendStroke: propTypes.bool,
	  minAngle: propTypes.number,
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  maxRadius: propTypes.number,
	  sectors: propTypes.arrayOf(propTypes.object),
	  hide: propTypes.bool,
	  labelLine: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.element, propTypes.bool]),
	  label: propTypes.oneOfType([propTypes.shape({
	    offsetRadius: propTypes.number
	  }), propTypes.func, propTypes.element, propTypes.bool]),
	  activeShape: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.element]),
	  activeIndex: propTypes.oneOfType([propTypes.number, propTypes.arrayOf(propTypes.number)]),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'spring', 'linear']),
	  id: propTypes.string
	});
	Pie.defaultProps = {
	  stroke: '#fff',
	  fill: '#808080',
	  legendType: 'rect',
	  // The abscissa of pole
	  cx: '50%',
	  // The ordinate of pole
	  cy: '50%',
	  // The start angle of first sector
	  startAngle: 0,
	  // The direction of drawing sectors
	  endAngle: 360,
	  // The inner radius of sectors
	  innerRadius: 0,
	  // The outer radius of sectors
	  outerRadius: '80%',
	  paddingAngle: 0,
	  labelLine: true,
	  hide: false,
	  minAngle: 0,
	  isAnimationActive: !isSsr(),
	  animationBegin: 400,
	  animationDuration: 1500,
	  animationEasing: 'ease',
	  nameKey: 'name',
	  // Match each sector's stroke color to it's fill color
	  blendStroke: false
	};

	Pie.parseDeltaAngle = function (_ref2) {
	  var startAngle = _ref2.startAngle,
	      endAngle = _ref2.endAngle;
	  var sign = mathSign(endAngle - startAngle);
	  var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
	  return sign * deltaAngle;
	};

	Pie.getRealPieData = function (item) {
	  var _item$props = item.props,
	      data = _item$props.data,
	      children = _item$props.children;
	  var presentationProps = getPresentationAttributes(item.props);
	  var cells = findAllByType(children, Cell);

	  if (data && data.length) {
	    return data.map(function (entry, index) {
	      return _objectSpread$n({
	        payload: entry
	      }, presentationProps, {}, entry, {}, cells && cells[index] && cells[index].props);
	    });
	  }

	  if (cells && cells.length) {
	    return cells.map(function (cell) {
	      return _objectSpread$n({}, presentationProps, {}, cell.props);
	    });
	  }

	  return [];
	};

	Pie.parseCoordinateOfPie = function (item, offset) {
	  var top = offset.top,
	      left = offset.left,
	      width = offset.width,
	      height = offset.height;
	  var maxPieRadius = getMaxRadius(width, height);
	  var cx = left + getPercentValue(item.props.cx, width, width / 2);
	  var cy = top + getPercentValue(item.props.cy, height, height / 2);
	  var innerRadius = getPercentValue(item.props.innerRadius, maxPieRadius, 0);
	  var outerRadius = getPercentValue(item.props.outerRadius, maxPieRadius, maxPieRadius * 0.8);
	  var maxRadius = item.props.maxRadius || Math.sqrt(width * width + height * height) / 2;
	  return {
	    cx: cx,
	    cy: cy,
	    innerRadius: innerRadius,
	    outerRadius: outerRadius,
	    maxRadius: maxRadius
	  };
	};

	Pie.getComposedData = function (_ref3) {
	  var item = _ref3.item,
	      offset = _ref3.offset,
	      onItemMouseLeave = _ref3.onItemMouseLeave,
	      onItemMouseEnter = _ref3.onItemMouseEnter;
	  var pieData = Pie.getRealPieData(item);

	  if (!pieData || !pieData.length) {
	    return [];
	  }

	  var _item$props2 = item.props,
	      cornerRadius = _item$props2.cornerRadius,
	      startAngle = _item$props2.startAngle,
	      endAngle = _item$props2.endAngle,
	      paddingAngle = _item$props2.paddingAngle,
	      dataKey = _item$props2.dataKey,
	      nameKey = _item$props2.nameKey,
	      valueKey = _item$props2.valueKey,
	      tooltipType = _item$props2.tooltipType;
	  var minAngle = Math.abs(item.props.minAngle);
	  var coordinate = Pie.parseCoordinateOfPie(item, offset);
	  var len = pieData.length;
	  var deltaAngle = Pie.parseDeltaAngle({
	    startAngle: startAngle,
	    endAngle: endAngle
	  });
	  var absDeltaAngle = Math.abs(deltaAngle);
	  var totalPadingAngle = (absDeltaAngle >= 360 ? len : len - 1) * paddingAngle;
	  var realTotalAngle = absDeltaAngle - len * minAngle - totalPadingAngle;
	  var realDataKey = dataKey;

	  if (isNil_1(dataKey) && isNil_1(valueKey)) {
	    warn$1(false, "Use \"dataKey\" to specify the value of pie,\n      the props \"valueKey\" will be deprecated in 1.1.0");
	    realDataKey = 'value';
	  } else if (isNil_1(dataKey)) {
	    warn$1(false, "Use \"dataKey\" to specify the value of pie,\n      the props \"valueKey\" will be deprecated in 1.1.0");
	    realDataKey = valueKey;
	  }

	  var sum = pieData.reduce(function (result, entry) {
	    var val = getValueByDataKey(entry, realDataKey, 0);
	    return result + (isNumber$3(val) ? val : 0);
	  }, 0);
	  var sectors;

	  if (sum > 0) {
	    var prev;
	    sectors = pieData.map(function (entry, i) {
	      var val = getValueByDataKey(entry, realDataKey, 0);
	      var name = getValueByDataKey(entry, nameKey, i);
	      var percent = (isNumber$3(val) ? val : 0) / sum;
	      var tempStartAngle;

	      if (i) {
	        tempStartAngle = prev.endAngle + mathSign(deltaAngle) * paddingAngle;
	      } else {
	        tempStartAngle = startAngle;
	      }

	      var tempEndAngle = tempStartAngle + mathSign(deltaAngle) * (minAngle + percent * realTotalAngle);
	      var midAngle = (tempStartAngle + tempEndAngle) / 2;
	      var middleRadius = (coordinate.innerRadius + coordinate.outerRadius) / 2;
	      var tooltipPayload = [{
	        name: name,
	        value: val,
	        payload: entry,
	        dataKey: realDataKey,
	        type: tooltipType
	      }];
	      var tooltipPosition = polarToCartesian(coordinate.cx, coordinate.cy, middleRadius, midAngle);
	      prev = _objectSpread$n({
	        percent: percent,
	        cornerRadius: cornerRadius,
	        name: name,
	        tooltipPayload: tooltipPayload,
	        midAngle: midAngle,
	        middleRadius: middleRadius,
	        tooltipPosition: tooltipPosition
	      }, entry, {}, coordinate, {
	        value: getValueByDataKey(entry, realDataKey),
	        startAngle: tempStartAngle,
	        endAngle: tempEndAngle,
	        payload: entry,
	        paddingAngle: mathSign(deltaAngle) * paddingAngle
	      });
	      return prev;
	    });
	  }

	  return _objectSpread$n({}, coordinate, {
	    sectors: sectors,
	    data: pieData,
	    onMouseLeave: onItemMouseLeave,
	    onMouseEnter: onItemMouseEnter
	  });
	};

	function _typeof$n(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$n = function _typeof(obj) { return typeof obj; }; } else { _typeof$n = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$n(obj); }

	function _extends$l() { _extends$l = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$l.apply(this, arguments); }

	function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$l(source, true).forEach(function (key) { _defineProperty$r(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$l(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$r(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$k(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$k(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$k(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$k(Constructor.prototype, protoProps); if (staticProps) _defineProperties$k(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$k(self, call) { if (call && (_typeof$n(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$l(self); }

	function _assertThisInitialized$l(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$k(o) { _getPrototypeOf$k = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$k(o); }

	function _inherits$k(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$k(subClass, superClass); }

	function _setPrototypeOf$k(o, p) { _setPrototypeOf$k = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$k(o, p); }

	var Radar =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$k(Radar, _PureComponent);

	  function Radar() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$k(this, Radar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$k(this, (_getPrototypeOf2 = _getPrototypeOf$k(Radar)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };

	    _this.cachePrevData = function (points) {
	      _this.setState({
	        prevPoints: points
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    _this.handleMouseEnter = function (e) {
	      var onMouseEnter = _this.props.onMouseEnter;

	      if (onMouseEnter) {
	        onMouseEnter(_this.props, e);
	      }
	    };

	    _this.handleMouseLeave = function (e) {
	      var onMouseLeave = _this.props.onMouseLeave;

	      if (onMouseLeave) {
	        onMouseLeave(_this.props, e);
	      }
	    };

	    return _this;
	  }

	  _createClass$k(Radar, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          points = _this$props.points;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevData(points);
	      }
	    }
	  }, {
	    key: "renderDots",
	    value: function renderDots(points) {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          dot = _this$props2.dot,
	          dataKey = _this$props2.dataKey;
	      var baseProps = getPresentationAttributes(this.props);
	      var customDotProps = getPresentationAttributes(dot);
	      var dots = points.map(function (entry, i) {
	        var dotProps = _objectSpread$o({
	          key: "dot-".concat(i),
	          r: 3
	        }, baseProps, {}, customDotProps, {
	          dataKey: dataKey,
	          cx: entry.x,
	          cy: entry.y,
	          index: i,
	          payload: entry
	        });

	        return _this2.constructor.renderDotItem(dot, dotProps);
	      });
	      return react.createElement(Layer, {
	        className: "recharts-radar-dots"
	      }, dots);
	    }
	  }, {
	    key: "renderPolygonStatically",
	    value: function renderPolygonStatically(points) {
	      var _this$props3 = this.props,
	          shape = _this$props3.shape,
	          dot = _this$props3.dot;
	      var radar;

	      if (react.isValidElement(shape)) {
	        radar = react.cloneElement(shape, _objectSpread$o({}, this.props, {
	          points: points
	        }));
	      } else if (isFunction_1(shape)) {
	        radar = shape(_objectSpread$o({}, this.props, {
	          points: points
	        }));
	      } else {
	        radar = react.createElement(Polygon, _extends$l({}, filterEventAttributes(this.props), {
	          onMouseEnter: this.handleMouseEnter,
	          onMouseLeave: this.handleMouseLeave
	        }, getPresentationAttributes(this.props), {
	          points: points
	        }));
	      }

	      return react.createElement(Layer, {
	        className: "recharts-radar-polygon"
	      }, radar, dot ? this.renderDots(points) : null);
	    }
	  }, {
	    key: "renderPolygonWithAnimation",
	    value: function renderPolygonWithAnimation() {
	      var _this3 = this;

	      var _this$props4 = this.props,
	          points = _this$props4.points,
	          isAnimationActive = _this$props4.isAnimationActive,
	          animationBegin = _this$props4.animationBegin,
	          animationDuration = _this$props4.animationDuration,
	          animationEasing = _this$props4.animationEasing,
	          animationId = _this$props4.animationId;
	      var prevPoints = this.state.prevPoints;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "radar-".concat(animationId),
	        onAnimationEnd: this.handleAnimationEnd,
	        onAnimationStart: this.handleAnimationStart
	      }, function (_ref) {
	        var t = _ref.t;
	        var prevPointsDiffFactor = prevPoints && prevPoints.length / points.length;
	        var stepData = points.map(function (entry, index) {
	          var prev = prevPoints && prevPoints[Math.floor(index * prevPointsDiffFactor)];

	          if (prev) {
	            var _interpolatorX = interpolateNumber(prev.x, entry.x);

	            var _interpolatorY = interpolateNumber(prev.y, entry.y);

	            return _objectSpread$o({}, entry, {
	              x: _interpolatorX(t),
	              y: _interpolatorY(t)
	            });
	          }

	          var interpolatorX = interpolateNumber(entry.cx, entry.x);
	          var interpolatorY = interpolateNumber(entry.cy, entry.y);
	          return _objectSpread$o({}, entry, {
	            x: interpolatorX(t),
	            y: interpolatorY(t)
	          });
	        });
	        return _this3.renderPolygonStatically(stepData);
	      });
	    }
	  }, {
	    key: "renderPolygon",
	    value: function renderPolygon() {
	      var _this$props5 = this.props,
	          points = _this$props5.points,
	          isAnimationActive = _this$props5.isAnimationActive;
	      var prevPoints = this.state.prevPoints;

	      if (isAnimationActive && points && points.length && (!prevPoints || !isEqual_1(prevPoints, points))) {
	        return this.renderPolygonWithAnimation();
	      }

	      return this.renderPolygonStatically(points);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          hide = _this$props6.hide,
	          className = _this$props6.className,
	          points = _this$props6.points,
	          isAnimationActive = _this$props6.isAnimationActive;

	      if (hide || !points || !points.length) {
	        return null;
	      }

	      var isAnimationFinished = this.state.isAnimationFinished;
	      var layerClass = classnames('recharts-radar', className);
	      return react.createElement(Layer, {
	        className: layerClass
	      }, this.renderPolygon(), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));
	    }
	  }], [{
	    key: "renderDotItem",
	    value: function renderDotItem(option, props) {
	      var dotItem;

	      if (react.isValidElement(option)) {
	        dotItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        dotItem = option(props);
	      } else {
	        dotItem = react.createElement(Dot, _extends$l({}, props, {
	          className: "recharts-radar-dot"
	        }));
	      }

	      return dotItem;
	    }
	  }]);

	  return Radar;
	}(react_4);

	Radar.displayName = 'Radar';
	Radar.propTypes = _objectSpread$o({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  dataKey: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.func]).isRequired,
	  angleAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  radiusAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  points: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    cx: propTypes.number,
	    cy: propTypes.number,
	    angle: propTypes.number,
	    radius: propTypes.number,
	    value: propTypes.number,
	    payload: propTypes.object
	  })),
	  shape: propTypes.oneOfType([propTypes.element, propTypes.func]),
	  activeDot: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  // whether have dot in poly line
	  dot: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  label: propTypes.oneOfType([propTypes.element, propTypes.func, propTypes.object, propTypes.bool]),
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  hide: propTypes.bool,
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onClick: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  animationId: propTypes.number,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])
	});
	Radar.defaultProps = {
	  angleAxisId: 0,
	  radiusAxisId: 0,
	  hide: false,
	  activeDot: true,
	  dot: false,
	  legendType: 'rect',
	  isAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease'
	};

	Radar.getComposedData = function (_ref2) {
	  var radiusAxis = _ref2.radiusAxis,
	      angleAxis = _ref2.angleAxis,
	      displayedData = _ref2.displayedData,
	      dataKey = _ref2.dataKey,
	      bandSize = _ref2.bandSize;
	  var cx = angleAxis.cx,
	      cy = angleAxis.cy;
	  var points = displayedData.map(function (entry, i) {
	    var name = getValueByDataKey(entry, angleAxis.dataKey, i);
	    var value = getValueByDataKey(entry, dataKey, 0);
	    var angle = angleAxis.scale(name) + (bandSize || 0);
	    var radius = radiusAxis.scale(value);
	    return _objectSpread$o({}, polarToCartesian(cx, cy, radius, angle), {
	      name: name,
	      value: value,
	      cx: cx,
	      cy: cy,
	      radius: radius,
	      angle: angle,
	      payload: entry
	    });
	  });
	  return {
	    points: points
	  };
	};

	function _typeof$o(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$o = function _typeof(obj) { return typeof obj; }; } else { _typeof$o = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$o(obj); }

	function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$m(source, true).forEach(function (key) { _defineProperty$s(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$m(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$s(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$a(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$b(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$b(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$l(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$l(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$l(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$l(Constructor.prototype, protoProps); if (staticProps) _defineProperties$l(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$l(self, call) { if (call && (_typeof$o(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$m(self); }

	function _assertThisInitialized$m(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$l(o) { _getPrototypeOf$l = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$l(o); }

	function _inherits$l(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$l(subClass, superClass); }

	function _setPrototypeOf$l(o, p) { _setPrototypeOf$l = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$l(o, p); }

	var RadialBar =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$l(RadialBar, _PureComponent);

	  function RadialBar() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$l(this, RadialBar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$l(this, (_getPrototypeOf2 = _getPrototypeOf$l(RadialBar)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };

	    _this.cachePrevData = function (data) {
	      _this.setState({
	        prevData: data
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    return _this;
	  }

	  _createClass$l(RadialBar, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          data = _this$props.data;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevData(data);
	      }
	    }
	  }, {
	    key: "getDeltaAngle",
	    value: function getDeltaAngle() {
	      var _this$props2 = this.props,
	          startAngle = _this$props2.startAngle,
	          endAngle = _this$props2.endAngle;
	      var sign = mathSign(endAngle - startAngle);
	      var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
	      return sign * deltaAngle;
	    }
	  }, {
	    key: "renderSectorsStatically",
	    value: function renderSectorsStatically(sectors) {
	      var _this2 = this;

	      var _this$props3 = this.props,
	          shape = _this$props3.shape,
	          activeShape = _this$props3.activeShape,
	          activeIndex = _this$props3.activeIndex,
	          cornerRadius = _this$props3.cornerRadius,
	          others = _objectWithoutProperties$a(_this$props3, ["shape", "activeShape", "activeIndex", "cornerRadius"]);

	      var baseProps = getPresentationAttributes(others);
	      return sectors.map(function (entry, i) {
	        var props = _objectSpread$p({}, baseProps, {
	          cornerRadius: cornerRadius
	        }, entry, {}, filterEventsOfChild(_this2.props, entry, i), {
	          key: "sector-".concat(i),
	          className: 'recharts-radial-bar-sector',
	          forceCornerRadius: others.forceCornerRadius,
	          cornerIsExternal: others.cornerIsExternal
	        });

	        return _this2.constructor.renderSectorShape(i === activeIndex ? activeShape : shape, props);
	      });
	    }
	  }, {
	    key: "renderSectorsWithAnimation",
	    value: function renderSectorsWithAnimation() {
	      var _this3 = this;

	      var _this$props4 = this.props,
	          data = _this$props4.data,
	          isAnimationActive = _this$props4.isAnimationActive,
	          animationBegin = _this$props4.animationBegin,
	          animationDuration = _this$props4.animationDuration,
	          animationEasing = _this$props4.animationEasing,
	          animationId = _this$props4.animationId;
	      var prevData = this.state.prevData;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "radialBar-".concat(animationId),
	        onAnimationStart: this.handleAnimationStart,
	        onAnimationEnd: this.handleAnimationEnd
	      }, function (_ref) {
	        var t = _ref.t;
	        var stepData = data.map(function (entry, index) {
	          var prev = prevData && prevData[index];

	          if (prev) {
	            var interpolatorStartAngle = interpolateNumber(prev.startAngle, entry.startAngle);
	            var interpolatorEndAngle = interpolateNumber(prev.endAngle, entry.endAngle);
	            return _objectSpread$p({}, entry, {
	              startAngle: interpolatorStartAngle(t),
	              endAngle: interpolatorEndAngle(t)
	            });
	          }

	          var endAngle = entry.endAngle,
	              startAngle = entry.startAngle;
	          var interpolator = interpolateNumber(startAngle, endAngle);
	          return _objectSpread$p({}, entry, {
	            endAngle: interpolator(t)
	          });
	        });
	        return react.createElement(Layer, null, _this3.renderSectorsStatically(stepData));
	      });
	    }
	  }, {
	    key: "renderSectors",
	    value: function renderSectors() {
	      var _this$props5 = this.props,
	          data = _this$props5.data,
	          isAnimationActive = _this$props5.isAnimationActive;
	      var prevData = this.state.prevData;

	      if (isAnimationActive && data && data.length && (!prevData || !isEqual_1(prevData, data))) {
	        return this.renderSectorsWithAnimation();
	      }

	      return this.renderSectorsStatically(data);
	    }
	  }, {
	    key: "renderBackground",
	    value: function renderBackground(sectors) {
	      var _this4 = this;

	      var cornerRadius = this.props.cornerRadius;
	      var backgroundProps = getPresentationAttributes(this.props.background);
	      return sectors.map(function (entry, i) {
	        // eslint-disable-next-line no-unused-vars
	        var value = entry.value,
	            background = entry.background,
	            rest = _objectWithoutProperties$a(entry, ["value", "background"]);

	        if (!background) {
	          return null;
	        }

	        var props = _objectSpread$p({
	          cornerRadius: cornerRadius
	        }, rest, {
	          fill: '#eee'
	        }, background, {}, backgroundProps, {}, filterEventsOfChild(_this4.props, entry, i), {
	          index: i,
	          key: "sector-".concat(i),
	          className: 'recharts-radial-bar-background-sector'
	        });

	        return _this4.constructor.renderSectorShape(background, props);
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          hide = _this$props6.hide,
	          data = _this$props6.data,
	          className = _this$props6.className,
	          background = _this$props6.background,
	          isAnimationActive = _this$props6.isAnimationActive;

	      if (hide || !data || !data.length) {
	        return null;
	      }

	      var isAnimationFinished = this.state.isAnimationFinished;
	      var layerClass = classnames('recharts-area', className);
	      return react.createElement(Layer, {
	        className: layerClass
	      }, background && react.createElement(Layer, {
	        className: "recharts-radial-bar-background"
	      }, this.renderBackground(data)), react.createElement(Layer, {
	        className: "recharts-radial-bar-sectors"
	      }, this.renderSectors(data)), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(_objectSpread$p({}, this.props, {
	        clockWise: this.getDeltaAngle() < 0
	      }), data));
	    }
	  }], [{
	    key: "renderSectorShape",
	    value: function renderSectorShape(shape, props) {
	      var sectorShape;

	      if (react.isValidElement(shape)) {
	        sectorShape = react.cloneElement(shape, props);
	      } else if (isFunction_1(shape)) {
	        sectorShape = shape(props);
	      } else {
	        sectorShape = react.createElement(Sector, props);
	      }

	      return sectorShape;
	    }
	  }]);

	  return RadialBar;
	}(react_4);

	RadialBar.displayName = 'RadialBar';
	RadialBar.propTypes = _objectSpread$p({}, PRESENTATION_ATTRIBUTES, {
	  className: propTypes.string,
	  angleAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  radiusAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  shape: propTypes.oneOfType([propTypes.func, propTypes.element]),
	  activeShape: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.element]),
	  activeIndex: propTypes.number,
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  cornerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  forceCornerRadius: propTypes.bool,
	  cornerIsExternal: propTypes.bool,
	  minPointSize: propTypes.number,
	  maxBarSize: propTypes.number,
	  data: propTypes.arrayOf(propTypes.shape({
	    cx: propTypes.number,
	    cy: propTypes.number,
	    innerRadius: propTypes.number,
	    outerRadius: propTypes.number,
	    value: propTypes.value
	  })),
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  label: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.element, propTypes.object]),
	  background: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.object, propTypes.element]),
	  hide: propTypes.bool,
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onClick: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear', 'spring'])
	});
	RadialBar.defaultProps = {
	  angleAxisId: 0,
	  radiusAxisId: 0,
	  minPointSize: 0,
	  hide: false,
	  legendType: 'rect',
	  data: [],
	  isAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease',
	  forceCornerRadius: false,
	  cornerIsExternal: false
	};

	RadialBar.getComposedData = function (_ref2) {
	  var item = _ref2.item,
	      props = _ref2.props,
	      radiusAxis = _ref2.radiusAxis,
	      radiusAxisTicks = _ref2.radiusAxisTicks,
	      angleAxis = _ref2.angleAxis,
	      angleAxisTicks = _ref2.angleAxisTicks,
	      displayedData = _ref2.displayedData,
	      dataKey = _ref2.dataKey,
	      stackedData = _ref2.stackedData,
	      barPosition = _ref2.barPosition,
	      bandSize = _ref2.bandSize,
	      dataStartIndex = _ref2.dataStartIndex;
	  var pos = findPositionOfBar(barPosition, item);

	  if (!pos) {
	    return [];
	  }

	  var cx = angleAxis.cx,
	      cy = angleAxis.cy;
	  var layout = props.layout;
	  var _item$props = item.props,
	      children = _item$props.children,
	      minPointSize = _item$props.minPointSize;
	  var numericAxis = layout === 'radial' ? angleAxis : radiusAxis;
	  var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
	  var baseValue = getBaseValueOfBar({
	    props: props,
	    numericAxis: numericAxis
	  });
	  var cells = findAllByType(children, Cell);
	  var sectors = displayedData.map(function (entry, index) {
	    var value, innerRadius, outerRadius, startAngle, endAngle, backgroundSector;

	    if (stackedData) {
	      value = truncateByDomain(stackedData[dataStartIndex + index], stackedDomain);
	    } else {
	      value = getValueByDataKey(entry, dataKey);

	      if (!isArray_1(value)) {
	        value = [baseValue, value];
	      }
	    }

	    if (layout === 'radial') {
	      innerRadius = getCateCoordinateOfBar({
	        axis: radiusAxis,
	        ticks: radiusAxisTicks,
	        bandSize: bandSize,
	        offset: pos.offset,
	        entry: entry,
	        index: index
	      });
	      endAngle = angleAxis.scale(value[1]);
	      startAngle = angleAxis.scale(value[0]);
	      outerRadius = innerRadius + pos.size;
	      var deltaAngle = endAngle - startAngle;

	      if (Math.abs(minPointSize) > 0 && Math.abs(deltaAngle) < Math.abs(minPointSize)) {
	        var delta = mathSign(deltaAngle || minPointSize) * (Math.abs(minPointSize) - Math.abs(deltaAngle));
	        endAngle += delta;
	      }

	      backgroundSector = {
	        background: {
	          cx: cx,
	          cy: cy,
	          innerRadius: innerRadius,
	          outerRadius: outerRadius,
	          startAngle: props.startAngle,
	          endAngle: props.endAngle
	        }
	      };
	    } else {
	      innerRadius = radiusAxis.scale(value[0]);
	      outerRadius = radiusAxis.scale(value[1]);
	      startAngle = getCateCoordinateOfBar({
	        axis: angleAxis,
	        ticks: angleAxisTicks,
	        bandSize: bandSize,
	        offset: pos.offset,
	        entry: entry,
	        index: index
	      });
	      endAngle = startAngle + pos.size;
	      var deltaRadius = outerRadius - innerRadius;

	      if (Math.abs(minPointSize) > 0 && Math.abs(deltaRadius) < Math.abs(minPointSize)) {
	        var _delta = mathSign(deltaRadius || minPointSize) * (Math.abs(minPointSize) - Math.abs(deltaRadius));

	        outerRadius += _delta;
	      }
	    }

	    return _objectSpread$p({}, entry, {}, backgroundSector, {
	      payload: entry,
	      value: stackedData ? value : value[1],
	      cx: cx,
	      cy: cy,
	      innerRadius: innerRadius,
	      outerRadius: outerRadius,
	      startAngle: startAngle,
	      endAngle: endAngle
	    }, cells && cells[index] && cells[index].props);
	  });
	  return {
	    data: sectors,
	    layout: layout
	  };
	};

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeMax$4 = Math.max;

	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */
	function baseRange(start, end, step, fromRight) {
	  var index = -1,
	      length = nativeMax$4(nativeCeil((end - start) / (step || 1)), 0),
	      result = Array(length);

	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }
	  return result;
	}

	var _baseRange = baseRange;

	/** Used as references for various `Number` constants. */
	var INFINITY$3 = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber_1(value);
	  if (value === INFINITY$3 || value === -INFINITY$3) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	var toFinite_1 = toFinite;

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	function createRange(fromRight) {
	  return function(start, end, step) {
	    if (step && typeof step != 'number' && _isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    }
	    // Ensure the sign of `-0` is preserved.
	    start = toFinite_1(start);
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite_1(end);
	    }
	    step = step === undefined ? (start < end ? 1 : -1) : toFinite_1(step);
	    return _baseRange(start, end, step, fromRight);
	  };
	}

	var _createRange = createRange;

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	var range$3 = _createRange();

	var range_1 = range$3;

	function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$n(source, true).forEach(function (key) { _defineProperty$t(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$n(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$t(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var PREFIX_LIST$1 = ['Webkit', 'Moz', 'O', 'ms'];
	var generatePrefixStyle$1 = function generatePrefixStyle(name, value) {
	  if (!name) {
	    return null;
	  }

	  var camelName = name.replace(/(\w)/, function (v) {
	    return v.toUpperCase();
	  });
	  var result = PREFIX_LIST$1.reduce(function (res, entry) {
	    return _objectSpread$q({}, res, _defineProperty$t({}, entry + camelName, value));
	  }, {});
	  result[name] = value;
	  return result;
	};

	function _typeof$p(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$p = function _typeof(obj) { return typeof obj; }; } else { _typeof$p = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$p(obj); }

	function _extends$m() { _extends$m = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$m.apply(this, arguments); }

	function _defineProperty$u(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$m(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$m(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$m(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$m(Constructor.prototype, protoProps); if (staticProps) _defineProperties$m(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$m(self, call) { if (call && (_typeof$p(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$n(self); }

	function _getPrototypeOf$m(o) { _getPrototypeOf$m = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$m(o); }

	function _assertThisInitialized$n(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits$m(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$m(subClass, superClass); }

	function _setPrototypeOf$m(o, p) { _setPrototypeOf$m = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$m(o, p); }

	var Brush =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$m(Brush, _PureComponent);

	  function Brush(props) {
	    var _this;

	    _classCallCheck$m(this, Brush);

	    _this = _possibleConstructorReturn$m(this, _getPrototypeOf$m(Brush).call(this, props));

	    _this.handleDrag = function (e) {
	      if (_this.leaveTimer) {
	        clearTimeout(_this.leaveTimer);
	        _this.leaveTimer = null;
	      }

	      if (_this.state.isTravellerMoving) {
	        _this.handleTravellerMove(e);
	      } else if (_this.state.isSlideMoving) {
	        _this.handleSlideDrag(e);
	      }
	    };

	    _this.handleTouchMove = function (e) {
	      if (e.changedTouches != null && e.changedTouches.length > 0) {
	        _this.handleDrag(e.changedTouches[0]);
	      }
	    };

	    _this.handleDragEnd = function () {
	      _this.setState({
	        isTravellerMoving: false,
	        isSlideMoving: false
	      });
	    };

	    _this.handleLeaveWrapper = function () {
	      if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
	        _this.leaveTimer = setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut);
	      }
	    };

	    _this.handleEnterSlideOrTraveller = function () {
	      _this.setState({
	        isTextActive: true
	      });
	    };

	    _this.handleLeaveSlideOrTraveller = function () {
	      _this.setState({
	        isTextActive: false
	      });
	    };

	    _this.handleSlideDragStart = function (e) {
	      var event = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : e;

	      _this.setState({
	        isTravellerMoving: false,
	        isSlideMoving: true,
	        slideMoveStartX: event.pageX
	      });
	    };

	    _this.travellerDragStartHandlers = {
	      startX: _this.handleTravellerDragStart.bind(_assertThisInitialized$n(_this), 'startX'),
	      endX: _this.handleTravellerDragStart.bind(_assertThisInitialized$n(_this), 'endX')
	    };
	    _this.state = props.data && props.data.length ? _this.updateScale(props) : {};
	    return _this;
	  } // eslint-disable-next-line camelcase


	  _createClass$m(Brush, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;

	      var _this$props = this.props,
	          data = _this$props.data,
	          width = _this$props.width,
	          x = _this$props.x,
	          travellerWidth = _this$props.travellerWidth,
	          updateId = _this$props.updateId;

	      if ((nextProps.data !== data || nextProps.updateId !== updateId) && nextProps.data && nextProps.data.length) {
	        this.setState(this.updateScale(nextProps));
	      } else if (nextProps.width !== width || nextProps.x !== x || nextProps.travellerWidth !== travellerWidth) {
	        this.scale.range([nextProps.x, nextProps.x + nextProps.width - nextProps.travellerWidth]);
	        this.scaleValues = this.scale.domain().map(function (entry) {
	          return _this2.scale(entry);
	        });
	        this.setState({
	          startX: this.scale(nextProps.startIndex),
	          endX: this.scale(nextProps.endIndex)
	        });
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.scale = null;
	      this.scaleValues = null;

	      if (this.leaveTimer) {
	        clearTimeout(this.leaveTimer);
	        this.leaveTimer = null;
	      }
	    }
	  }, {
	    key: "getIndex",
	    value: function getIndex(_ref) {
	      var startX = _ref.startX,
	          endX = _ref.endX;
	      var _this$props2 = this.props,
	          gap = _this$props2.gap,
	          data = _this$props2.data;
	      var lastIndex = data.length - 1;
	      var min = Math.min(startX, endX);
	      var max = Math.max(startX, endX);
	      var minIndex = this.constructor.getIndexInRange(this.scaleValues, min);
	      var maxIndex = this.constructor.getIndexInRange(this.scaleValues, max);
	      return {
	        startIndex: minIndex - minIndex % gap,
	        endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - maxIndex % gap
	      };
	    }
	  }, {
	    key: "getTextOfTick",
	    value: function getTextOfTick(index) {
	      var _this$props3 = this.props,
	          data = _this$props3.data,
	          tickFormatter = _this$props3.tickFormatter,
	          dataKey = _this$props3.dataKey;
	      var text = getValueByDataKey(data[index], dataKey, index);
	      return isFunction_1(tickFormatter) ? tickFormatter(text) : text;
	    }
	  }, {
	    key: "handleSlideDrag",
	    value: function handleSlideDrag(e) {
	      var _this$state = this.state,
	          slideMoveStartX = _this$state.slideMoveStartX,
	          startX = _this$state.startX,
	          endX = _this$state.endX;
	      var _this$props4 = this.props,
	          x = _this$props4.x,
	          width = _this$props4.width,
	          travellerWidth = _this$props4.travellerWidth,
	          startIndex = _this$props4.startIndex,
	          endIndex = _this$props4.endIndex,
	          onChange = _this$props4.onChange;
	      var delta = e.pageX - slideMoveStartX;

	      if (delta > 0) {
	        delta = Math.min(delta, x + width - travellerWidth - endX, x + width - travellerWidth - startX);
	      } else if (delta < 0) {
	        delta = Math.max(delta, x - startX, x - endX);
	      }

	      var newIndex = this.getIndex({
	        startX: startX + delta,
	        endX: endX + delta
	      });

	      if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange) {
	        onChange(newIndex);
	      }

	      this.setState({
	        startX: startX + delta,
	        endX: endX + delta,
	        slideMoveStartX: e.pageX
	      });
	    }
	  }, {
	    key: "handleTravellerDragStart",
	    value: function handleTravellerDragStart(id, e) {
	      var event = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : e;
	      this.setState({
	        isSlideMoving: false,
	        isTravellerMoving: true,
	        movingTravellerId: id,
	        brushMoveStartX: event.pageX
	      });
	    }
	  }, {
	    key: "handleTravellerMove",
	    value: function handleTravellerMove(e) {
	      var _this$setState;

	      var _this$state2 = this.state,
	          brushMoveStartX = _this$state2.brushMoveStartX,
	          movingTravellerId = _this$state2.movingTravellerId,
	          endX = _this$state2.endX,
	          startX = _this$state2.startX;
	      var prevValue = this.state[movingTravellerId];
	      var _this$props5 = this.props,
	          x = _this$props5.x,
	          width = _this$props5.width,
	          travellerWidth = _this$props5.travellerWidth,
	          onChange = _this$props5.onChange,
	          gap = _this$props5.gap,
	          data = _this$props5.data;
	      var params = {
	        startX: this.state.startX,
	        endX: this.state.endX
	      };
	      var delta = e.pageX - brushMoveStartX;

	      if (delta > 0) {
	        delta = Math.min(delta, x + width - travellerWidth - prevValue);
	      } else if (delta < 0) {
	        delta = Math.max(delta, x - prevValue);
	      }

	      params[movingTravellerId] = prevValue + delta;
	      var newIndex = this.getIndex(params);
	      var startIndex = newIndex.startIndex,
	          endIndex = newIndex.endIndex;

	      var isFullGap = function isFullGap() {
	        var lastIndex = data.length - 1;

	        if (movingTravellerId === 'startX' && (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0) || endX < startX && endIndex === lastIndex || movingTravellerId === 'endX' && (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0) || endX > startX && endIndex === lastIndex) {
	          return true;
	        }

	        return false;
	      };

	      this.setState((_this$setState = {}, _defineProperty$u(_this$setState, movingTravellerId, prevValue + delta), _defineProperty$u(_this$setState, "brushMoveStartX", e.pageX), _this$setState), function () {
	        if (onChange) {
	          if (isFullGap()) {
	            onChange(newIndex);
	          }
	        }
	      });
	    }
	  }, {
	    key: "updateScale",
	    value: function updateScale(props) {
	      var _this3 = this;

	      var data = props.data,
	          startIndex = props.startIndex,
	          endIndex = props.endIndex,
	          x = props.x,
	          width = props.width,
	          travellerWidth = props.travellerWidth;
	      var len = data.length;
	      this.scale = point$2().domain(range_1(0, len)).range([x, x + width - travellerWidth]);
	      this.scaleValues = this.scale.domain().map(function (entry) {
	        return _this3.scale(entry);
	      });
	      return {
	        isTextActive: false,
	        isSlideMoving: false,
	        isTravellerMoving: false,
	        startX: this.scale(startIndex),
	        endX: this.scale(endIndex)
	      };
	    }
	  }, {
	    key: "renderBackground",
	    value: function renderBackground() {
	      var _this$props6 = this.props,
	          x = _this$props6.x,
	          y = _this$props6.y,
	          width = _this$props6.width,
	          height = _this$props6.height,
	          fill = _this$props6.fill,
	          stroke = _this$props6.stroke;
	      return react.createElement("rect", {
	        stroke: stroke,
	        fill: fill,
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      });
	    }
	  }, {
	    key: "renderPanorama",
	    value: function renderPanorama() {
	      var _this$props7 = this.props,
	          x = _this$props7.x,
	          y = _this$props7.y,
	          width = _this$props7.width,
	          height = _this$props7.height,
	          data = _this$props7.data,
	          children = _this$props7.children,
	          padding = _this$props7.padding;
	      var chartElement = react_1.only(children);

	      if (!chartElement) {
	        return null;
	      }

	      return react.cloneElement(chartElement, {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        margin: padding,
	        compact: true,
	        data: data
	      });
	    }
	  }, {
	    key: "renderTraveller",
	    value: function renderTraveller(travellerX, id) {
	      var _this$props8 = this.props,
	          y = _this$props8.y,
	          travellerWidth = _this$props8.travellerWidth,
	          height = _this$props8.height,
	          stroke = _this$props8.stroke;
	      var lineY = Math.floor(y + height / 2) - 1;
	      var x = Math.max(travellerX, this.props.x);
	      return react.createElement(Layer, {
	        className: "recharts-brush-traveller",
	        onMouseEnter: this.handleEnterSlideOrTraveller,
	        onMouseLeave: this.handleLeaveSlideOrTraveller,
	        onMouseDown: this.travellerDragStartHandlers[id],
	        onTouchStart: this.travellerDragStartHandlers[id],
	        style: {
	          cursor: 'col-resize'
	        }
	      }, react.createElement("rect", {
	        x: x,
	        y: y,
	        width: travellerWidth,
	        height: height,
	        fill: stroke,
	        stroke: "none"
	      }), react.createElement("line", {
	        x1: x + 1,
	        y1: lineY,
	        x2: x + travellerWidth - 1,
	        y2: lineY,
	        fill: "none",
	        stroke: "#fff"
	      }), react.createElement("line", {
	        x1: x + 1,
	        y1: lineY + 2,
	        x2: x + travellerWidth - 1,
	        y2: lineY + 2,
	        fill: "none",
	        stroke: "#fff"
	      }));
	    }
	  }, {
	    key: "renderSlide",
	    value: function renderSlide(startX, endX) {
	      var _this$props9 = this.props,
	          y = _this$props9.y,
	          height = _this$props9.height,
	          stroke = _this$props9.stroke;
	      return react.createElement("rect", {
	        className: "recharts-brush-slide",
	        onMouseEnter: this.handleEnterSlideOrTraveller,
	        onMouseLeave: this.handleLeaveSlideOrTraveller,
	        onMouseDown: this.handleSlideDragStart,
	        onTouchStart: this.handleSlideDragStart,
	        style: {
	          cursor: 'move'
	        },
	        stroke: "none",
	        fill: stroke,
	        fillOpacity: 0.2,
	        x: Math.min(startX, endX),
	        y: y,
	        width: Math.abs(endX - startX),
	        height: height
	      });
	    }
	  }, {
	    key: "renderText",
	    value: function renderText() {
	      var _this$props10 = this.props,
	          startIndex = _this$props10.startIndex,
	          endIndex = _this$props10.endIndex,
	          y = _this$props10.y,
	          height = _this$props10.height,
	          travellerWidth = _this$props10.travellerWidth,
	          stroke = _this$props10.stroke;
	      var _this$state3 = this.state,
	          startX = _this$state3.startX,
	          endX = _this$state3.endX;
	      var offset = 5;
	      var attrs = {
	        pointerEvents: 'none',
	        fill: stroke
	      };
	      return react.createElement(Layer, {
	        className: "recharts-brush-texts"
	      }, react.createElement(Text, _extends$m({
	        textAnchor: "end",
	        verticalAnchor: "middle",
	        x: Math.min(startX, endX) - offset,
	        y: y + height / 2
	      }, attrs), this.getTextOfTick(startIndex)), react.createElement(Text, _extends$m({
	        textAnchor: "start",
	        verticalAnchor: "middle",
	        x: Math.max(startX, endX) + travellerWidth + offset,
	        y: y + height / 2
	      }, attrs), this.getTextOfTick(endIndex)));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props11 = this.props,
	          data = _this$props11.data,
	          className = _this$props11.className,
	          children = _this$props11.children,
	          x = _this$props11.x,
	          y = _this$props11.y,
	          width = _this$props11.width,
	          height = _this$props11.height,
	          alwaysShowText = _this$props11.alwaysShowText;
	      var _this$state4 = this.state,
	          startX = _this$state4.startX,
	          endX = _this$state4.endX,
	          isTextActive = _this$state4.isTextActive,
	          isSlideMoving = _this$state4.isSlideMoving,
	          isTravellerMoving = _this$state4.isTravellerMoving;

	      if (!data || !data.length || !isNumber$3(x) || !isNumber$3(y) || !isNumber$3(width) || !isNumber$3(height) || width <= 0 || height <= 0) {
	        return null;
	      }

	      var layerClass = classnames('recharts-brush', className);
	      var isPanoramic = react.Children.count(children) === 1;
	      var style = generatePrefixStyle$1('userSelect', 'none');
	      return react.createElement(Layer, {
	        className: layerClass,
	        onMouseMove: this.handleDrag,
	        onMouseLeave: this.handleLeaveWrapper,
	        onMouseUp: this.handleDragEnd,
	        onTouchEnd: this.handleDragEnd,
	        onTouchMove: this.handleTouchMove,
	        style: style
	      }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTraveller(startX, 'startX'), this.renderTraveller(endX, 'endX'), (isTextActive || isSlideMoving || isTravellerMoving || alwaysShowText) && this.renderText());
	    }
	  }], [{
	    key: "getIndexInRange",
	    value: function getIndexInRange(range, x) {
	      var len = range.length;
	      var start = 0;
	      var end = len - 1;

	      while (end - start > 1) {
	        var middle = Math.floor((start + end) / 2);

	        if (range[middle] > x) {
	          end = middle;
	        } else {
	          start = middle;
	        }
	      }

	      return x >= range[end] ? end : start;
	    }
	  }]);

	  return Brush;
	}(react_4);

	Brush.displayName = 'Brush';
	Brush.propTypes = {
	  className: propTypes.string,
	  fill: propTypes.string,
	  stroke: propTypes.string,
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number.isRequired,
	  travellerWidth: propTypes.number,
	  gap: propTypes.number,
	  padding: propTypes.shape({
	    top: propTypes.number,
	    right: propTypes.number,
	    bottom: propTypes.number,
	    left: propTypes.number
	  }),
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  data: propTypes.array,
	  startIndex: propTypes.number,
	  endIndex: propTypes.number,
	  tickFormatter: propTypes.func,
	  children: propTypes.node,
	  onChange: propTypes.func,
	  updateId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  leaveTimeOut: propTypes.number,
	  alwaysShowText: propTypes.bool
	};
	Brush.defaultProps = {
	  height: 40,
	  travellerWidth: 5,
	  gap: 1,
	  fill: '#fff',
	  stroke: '#666',
	  padding: {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  },
	  leaveTimeOut: 1000,
	  alwaysShowText: false
	};

	/**
	 * The base implementation of `_.some` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;

	  _baseEach(collection, function(value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}

	var _baseSome = baseSome;

	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * Iteration is stopped once `predicate` returns truthy. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.some(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, guard) {
	  var func = isArray_1(collection) ? _arraySome : _baseSome;
	  if (guard && _isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, _baseIteratee(predicate));
	}

	var some_1 = some;

	var ifOverflowMatches = function ifOverflowMatches(props, value) {
	  var alwaysShow = props.alwaysShow;
	  var ifOverflow = props.ifOverflow;

	  if (alwaysShow) {
	    ifOverflow = 'extendDomain';
	  }

	  return ifOverflow === value;
	};

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}

	var _arrayEvery = arrayEvery;

	/**
	 * The base implementation of `_.every` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */
	function baseEvery(collection, predicate) {
	  var result = true;
	  _baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}

	var _baseEvery = baseEvery;

	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * Iteration is stopped once `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * **Note:** This method returns `true` for
	 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	 * elements of empty collections.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.every(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.every(users, 'active');
	 * // => false
	 */
	function every(collection, predicate, guard) {
	  var func = isArray_1(collection) ? _arrayEvery : _baseEvery;
	  if (guard && _isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, _baseIteratee(predicate));
	}

	var every_1 = every;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && _defineProperty$4) {
	    _defineProperty$4(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue;

	/**
	 * Creates an object with the same keys as `object` and values generated
	 * by running each own enumerable string keyed property of `object` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapKeys
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = _baseIteratee(iteratee);

	  _baseForOwn(object, function(value, key, object) {
	    _baseAssignValue(result, key, iteratee(value, key, object));
	  });
	  return result;
	}

	var mapValues_1 = mapValues;

	function _classCallCheck$n(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$n(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$n(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$n(Constructor.prototype, protoProps); if (staticProps) _defineProperties$n(Constructor, staticProps); return Constructor; }

	function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$o(source, true).forEach(function (key) { _defineProperty$v(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$o(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$v(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	/**
	 * Calculate the scale function, position, width, height of axes
	 * @param  {Object} props     Latest props
	 * @param  {Object} axisMap   The configuration of axes
	 * @param  {Object} offset    The offset of main part in the svg element
	 * @param  {String} axisType  The type of axes, x-axis or y-axis
	 * @param  {String} chartName The name of chart
	 * @return {Object} Configuration
	 */

	var formatAxisMap$1 = function formatAxisMap(props, axisMap, offset, axisType, chartName) {
	  var width = props.width,
	      height = props.height,
	      layout = props.layout;
	  var ids = Object.keys(axisMap);
	  var steps = {
	    left: offset.left,
	    leftMirror: offset.left,
	    right: width - offset.right,
	    rightMirror: width - offset.right,
	    top: offset.top,
	    topMirror: offset.top,
	    bottom: height - offset.bottom,
	    bottomMirror: height - offset.bottom
	  };
	  return ids.reduce(function (result, id) {
	    var axis = axisMap[id];
	    var orientation = axis.orientation,
	        domain = axis.domain,
	        _axis$padding = axis.padding,
	        padding = _axis$padding === void 0 ? {} : _axis$padding,
	        mirror = axis.mirror,
	        reversed = axis.reversed;
	    var offsetKey = "".concat(orientation).concat(mirror ? 'Mirror' : '');
	    var range, x, y, needSpace;

	    if (axisType === 'xAxis') {
	      range = [offset.left + (padding.left || 0), offset.left + offset.width - (padding.right || 0)];
	    } else if (axisType === 'yAxis') {
	      range = layout === 'horizontal' ? [offset.top + offset.height - (padding.bottom || 0), offset.top + (padding.top || 0)] : [offset.top + (padding.top || 0), offset.top + offset.height - (padding.bottom || 0)];
	    } else {
	      range = axis.range;
	    }

	    if (reversed) {
	      range = [range[1], range[0]];
	    }

	    var _parseScale = parseScale(axis, chartName),
	        scale = _parseScale.scale,
	        realScaleType = _parseScale.realScaleType;

	    scale.domain(domain).range(range);
	    checkDomainOfScale(scale);
	    var ticks = getTicksOfScale(scale, _objectSpread$r({}, axis, {
	      realScaleType: realScaleType
	    }));

	    if (axisType === 'xAxis') {
	      needSpace = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;
	      x = offset.left;
	      y = steps[offsetKey] - needSpace * axis.height;
	    } else if (axisType === 'yAxis') {
	      needSpace = orientation === 'left' && !mirror || orientation === 'right' && mirror;
	      x = steps[offsetKey] - needSpace * axis.width;
	      y = offset.top;
	    }

	    var finalAxis = _objectSpread$r({}, axis, {}, ticks, {
	      realScaleType: realScaleType,
	      x: x,
	      y: y,
	      scale: scale,
	      width: axisType === 'xAxis' ? offset.width : axis.width,
	      height: axisType === 'yAxis' ? offset.height : axis.height
	    });

	    finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks);

	    if (!axis.hide && axisType === 'xAxis') {
	      steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height;
	    } else if (!axis.hide) {
	      steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width;
	    }

	    return _objectSpread$r({}, result, _defineProperty$v({}, id, finalAxis));
	  }, {});
	};
	var rectWithPoints = function rectWithPoints(_ref, _ref2) {
	  var x1 = _ref.x,
	      y1 = _ref.y;
	  var x2 = _ref2.x,
	      y2 = _ref2.y;
	  return {
	    x: Math.min(x1, x2),
	    y: Math.min(y1, y2),
	    width: Math.abs(x2 - x1),
	    height: Math.abs(y2 - y1)
	  };
	};
	/**
	 * Compute the x, y, width, and height of a box from two reference points.
	 * @param  {Object} coords     x1, x2, y1, and y2
	 * @return {Object} object
	 */

	var rectWithCoords = function rectWithCoords(_ref3) {
	  var x1 = _ref3.x1,
	      y1 = _ref3.y1,
	      x2 = _ref3.x2,
	      y2 = _ref3.y2;
	  return rectWithPoints({
	    x: x1,
	    y: y1
	  }, {
	    x: x2,
	    y: y2
	  });
	};
	var ScaleHelper =
	/*#__PURE__*/
	function () {
	  _createClass$n(ScaleHelper, null, [{
	    key: "create",
	    value: function create(obj) {
	      return new ScaleHelper(obj);
	    }
	  }]);

	  function ScaleHelper(scale) {
	    _classCallCheck$n(this, ScaleHelper);

	    this.scale = scale;
	  }

	  _createClass$n(ScaleHelper, [{
	    key: "apply",
	    value: function apply(value) {
	      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          bandAware = _ref4.bandAware,
	          position = _ref4.position;

	      if (value === undefined) {
	        return undefined;
	      }

	      if (position) {
	        switch (position) {
	          case 'start':
	            {
	              return this.scale(value);
	            }

	          case 'middle':
	            {
	              var offset = this.bandwidth ? this.bandwidth() / 2 : 0;
	              return this.scale(value) + offset;
	            }

	          case 'end':
	            {
	              var _offset = this.bandwidth ? this.bandwidth() : 0;

	              return this.scale(value) + _offset;
	            }

	          default:
	            {
	              return this.scale(value);
	            }
	        }
	      }

	      if (bandAware) {
	        var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;

	        return this.scale(value) + _offset2;
	      }

	      return this.scale(value);
	    }
	  }, {
	    key: "isInRange",
	    value: function isInRange(value) {
	      var range = this.range();
	      var first = range[0];
	      var last = range[range.length - 1];
	      return first <= last ? value >= first && value <= last : value >= last && value <= first;
	    }
	  }, {
	    key: "domain",
	    get: function get() {
	      return this.scale.domain;
	    }
	  }, {
	    key: "range",
	    get: function get() {
	      return this.scale.range;
	    }
	  }, {
	    key: "rangeMin",
	    get: function get() {
	      return this.range()[0];
	    }
	  }, {
	    key: "rangeMax",
	    get: function get() {
	      return this.range()[1];
	    }
	  }, {
	    key: "bandwidth",
	    get: function get() {
	      return this.scale.bandwidth;
	    }
	  }]);

	  return ScaleHelper;
	}();
	ScaleHelper.EPS = 1e-4;
	var LabeledScaleHelper =
	/*#__PURE__*/
	function () {
	  _createClass$n(LabeledScaleHelper, null, [{
	    key: "create",
	    value: function create(obj) {
	      return new this(obj);
	    }
	  }]);

	  function LabeledScaleHelper(scales) {
	    _classCallCheck$n(this, LabeledScaleHelper);

	    this.scales = mapValues_1(scales, ScaleHelper.create);
	    Object.assign(this, this.scales);
	  }

	  _createClass$n(LabeledScaleHelper, [{
	    key: "apply",
	    value: function apply(coords) {
	      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	          bandAware = _ref5.bandAware;

	      var scales = this.scales;
	      return mapValues_1(coords, function (value, label) {
	        return scales[label].apply(value, {
	          bandAware: bandAware
	        });
	      });
	    }
	  }, {
	    key: "isInRange",
	    value: function isInRange(coords) {
	      var scales = this.scales;
	      return every_1(coords, function (value, label) {
	        return scales[label].isInRange(value);
	      });
	    }
	  }]);

	  return LabeledScaleHelper;
	}();

	function _typeof$q(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$q = function _typeof(obj) { return typeof obj; }; } else { _typeof$q = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$q(obj); }

	function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$p(source, true).forEach(function (key) { _defineProperty$w(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$p(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$w(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _slicedToArray$6(arr, i) { return _arrayWithHoles$7(arr) || _iterableToArrayLimit$6(arr, i) || _nonIterableRest$7(); }

	function _nonIterableRest$7() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$6(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$7(arr) { if (Array.isArray(arr)) return arr; }

	function _classCallCheck$o(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$o(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$o(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$o(Constructor.prototype, protoProps); if (staticProps) _defineProperties$o(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$n(self, call) { if (call && (_typeof$q(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$o(self); }

	function _assertThisInitialized$o(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$n(o) { _getPrototypeOf$n = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$n(o); }

	function _inherits$n(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$n(subClass, superClass); }

	function _setPrototypeOf$n(o, p) { _setPrototypeOf$n = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$n(o, p); }

	function _extends$n() { _extends$n = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$n.apply(this, arguments); }

	var renderLine = function renderLine(option, props) {
	  var line;

	  if (react.isValidElement(option)) {
	    line = react.cloneElement(option, props);
	  } else if (isFunction_1(option)) {
	    line = option(props);
	  } else {
	    line = react.createElement("line", _extends$n({}, props, {
	      className: "recharts-reference-line-line"
	    }));
	  }

	  return line;
	};

	var ReferenceLine =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$n(ReferenceLine, _PureComponent);

	  function ReferenceLine() {
	    _classCallCheck$o(this, ReferenceLine);

	    return _possibleConstructorReturn$n(this, _getPrototypeOf$n(ReferenceLine).apply(this, arguments));
	  }

	  _createClass$o(ReferenceLine, [{
	    key: "getEndPoints",
	    value: function getEndPoints(scales, isFixedX, isFixedY, isSegment) {
	      var _this$props = this.props,
	          _this$props$viewBox = _this$props.viewBox,
	          x = _this$props$viewBox.x,
	          y = _this$props$viewBox.y,
	          width = _this$props$viewBox.width,
	          height = _this$props$viewBox.height,
	          position = _this$props.position;

	      if (isFixedY) {
	        var _this$props2 = this.props,
	            yCoord = _this$props2.y,
	            orientation = _this$props2.yAxis.orientation;
	        var coord = scales.y.apply(yCoord, {
	          position: position
	        });

	        if (ifOverflowMatches(this.props, 'discard') && !scales.y.isInRange(coord)) {
	          return null;
	        }

	        var points = [{
	          x: x + width,
	          y: coord
	        }, {
	          x: x,
	          y: coord
	        }];
	        return orientation === 'left' ? points.reverse() : points;
	      }

	      if (isFixedX) {
	        var _this$props3 = this.props,
	            xCoord = _this$props3.x,
	            _orientation = _this$props3.xAxis.orientation;

	        var _coord = scales.x.apply(xCoord, {
	          position: position
	        });

	        if (ifOverflowMatches(this.props, 'discard') && !scales.x.isInRange(_coord)) {
	          return null;
	        }

	        var _points = [{
	          x: _coord,
	          y: y + height
	        }, {
	          x: _coord,
	          y: y
	        }];
	        return _orientation === 'top' ? _points.reverse() : _points;
	      }

	      if (isSegment) {
	        var segment = this.props.segment;

	        var _points2 = segment.map(function (p) {
	          return scales.apply(p, {
	            position: position
	          });
	        });

	        if (ifOverflowMatches(this.props, 'discard') && some_1(_points2, function (p) {
	          return !scales.isInRange(p);
	        })) {
	          return null;
	        }

	        return _points2;
	      }

	      return null;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          fixedX = _this$props4.x,
	          fixedY = _this$props4.y,
	          segment = _this$props4.segment,
	          xAxis = _this$props4.xAxis,
	          yAxis = _this$props4.yAxis,
	          shape = _this$props4.shape,
	          className = _this$props4.className,
	          alwaysShow = _this$props4.alwaysShow,
	          clipPathId = _this$props4.clipPathId;
	      warn$1(alwaysShow === undefined, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
	      var scales = LabeledScaleHelper.create({
	        x: xAxis.scale,
	        y: yAxis.scale
	      });
	      var isX = isNumOrStr(fixedX);
	      var isY = isNumOrStr(fixedY);
	      var isSegment = segment && segment.length === 2;
	      var endPoints = this.getEndPoints(scales, isX, isY, isSegment);

	      if (!endPoints) {
	        return null;
	      }

	      var _endPoints = _slicedToArray$6(endPoints, 2),
	          _endPoints$ = _endPoints[0],
	          x1 = _endPoints$.x,
	          y1 = _endPoints$.y,
	          _endPoints$2 = _endPoints[1],
	          x2 = _endPoints$2.x,
	          y2 = _endPoints$2.y;

	      var clipPath = ifOverflowMatches(this.props, 'hidden') ? "url(#".concat(clipPathId, ")") : undefined;

	      var props = _objectSpread$s({
	        clipPath: clipPath
	      }, getPresentationAttributes(this.props), {}, filterEventAttributes(this.props), {
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2
	      });

	      return react.createElement(Layer, {
	        className: classnames('recharts-reference-line', className)
	      }, renderLine(shape, props), Label.renderCallByParent(this.props, rectWithCoords({
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2
	      })));
	    }
	  }]);

	  return ReferenceLine;
	}(react_4);

	ReferenceLine.displayName = 'ReferenceLine';
	ReferenceLine.propTypes = _objectSpread$s({}, PRESENTATION_ATTRIBUTES, {
	  viewBox: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number
	  }),
	  xAxis: propTypes.object,
	  yAxis: propTypes.object,
	  isFront: propTypes.bool,
	  alwaysShow: propTypes.bool,
	  ifOverflow: propTypes.oneOf(['hidden', 'visible', 'discard', 'extendDomain']),
	  x: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  y: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  segment: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    y: propTypes.oneOfType([propTypes.number, propTypes.string])
	  })),
	  position: propTypes.oneOf(['middle', 'start', 'end']),
	  className: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  shape: propTypes.func
	});
	ReferenceLine.defaultProps = {
	  isFront: false,
	  ifOverflow: 'discard',
	  xAxisId: 0,
	  yAxisId: 0,
	  fill: 'none',
	  stroke: '#ccc',
	  fillOpacity: 1,
	  strokeWidth: 1,
	  position: 'middle'
	};

	function _typeof$r(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$r = function _typeof(obj) { return typeof obj; }; } else { _typeof$r = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$r(obj); }

	function _extends$o() { _extends$o = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$o.apply(this, arguments); }

	function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$q(source, true).forEach(function (key) { _defineProperty$x(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$q(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$x(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$p(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$p(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$p(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$p(Constructor.prototype, protoProps); if (staticProps) _defineProperties$p(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$o(self, call) { if (call && (_typeof$r(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$p(self); }

	function _assertThisInitialized$p(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$o(o) { _getPrototypeOf$o = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$o(o); }

	function _inherits$o(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$o(subClass, superClass); }

	function _setPrototypeOf$o(o, p) { _setPrototypeOf$o = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$o(o, p); }

	var ReferenceDot =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$o(ReferenceDot, _PureComponent);

	  function ReferenceDot() {
	    _classCallCheck$p(this, ReferenceDot);

	    return _possibleConstructorReturn$o(this, _getPrototypeOf$o(ReferenceDot).apply(this, arguments));
	  }

	  _createClass$p(ReferenceDot, [{
	    key: "getCoordinate",
	    value: function getCoordinate() {
	      var _this$props = this.props,
	          x = _this$props.x,
	          y = _this$props.y,
	          xAxis = _this$props.xAxis,
	          yAxis = _this$props.yAxis;
	      var scales = LabeledScaleHelper.create({
	        x: xAxis.scale,
	        y: yAxis.scale
	      });
	      var result = scales.apply({
	        x: x,
	        y: y
	      }, {
	        bandAware: true
	      });

	      if (ifOverflowMatches(this.props, 'discard') && !scales.isInRange(result)) {
	        return null;
	      }

	      return result;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          x = _this$props2.x,
	          y = _this$props2.y,
	          r = _this$props2.r,
	          alwaysShow = _this$props2.alwaysShow,
	          clipPathId = _this$props2.clipPathId;
	      var isX = isNumOrStr(x);
	      var isY = isNumOrStr(y);
	      warn$1(alwaysShow === undefined, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');

	      if (!isX || !isY) {
	        return null;
	      }

	      var coordinate = this.getCoordinate();

	      if (!coordinate) {
	        return null;
	      }

	      var cx = coordinate.x,
	          cy = coordinate.y;
	      var _this$props3 = this.props,
	          shape = _this$props3.shape,
	          className = _this$props3.className;
	      var clipPath = ifOverflowMatches(this.props, 'hidden') ? "url(#".concat(clipPathId, ")") : undefined;

	      var dotProps = _objectSpread$t({
	        clipPath: clipPath
	      }, getPresentationAttributes(this.props), {}, filterEventAttributes(this.props), {
	        cx: cx,
	        cy: cy
	      });

	      return react.createElement(Layer, {
	        className: classnames('recharts-reference-dot', className)
	      }, this.constructor.renderDot(shape, dotProps), Label.renderCallByParent(this.props, {
	        x: cx - r,
	        y: cy - r,
	        width: 2 * r,
	        height: 2 * r
	      }));
	    }
	  }], [{
	    key: "renderDot",
	    value: function renderDot(option, props) {
	      var dot;

	      if (react.isValidElement(option)) {
	        dot = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        dot = option(props);
	      } else {
	        dot = react.createElement(Dot, _extends$o({}, props, {
	          cx: props.cx,
	          cy: props.cy,
	          className: "recharts-reference-dot-dot"
	        }));
	      }

	      return dot;
	    }
	  }]);

	  return ReferenceDot;
	}(react_4);

	ReferenceDot.displayName = 'ReferenceDot';
	ReferenceDot.propTypes = _objectSpread$t({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  r: propTypes.number,
	  xAxis: propTypes.shape({
	    scale: propTypes.func
	  }),
	  yAxis: propTypes.shape({
	    scale: propTypes.func
	  }),
	  isFront: propTypes.bool,
	  alwaysShow: propTypes.bool,
	  ifOverflow: propTypes.oneOf(['hidden', 'visible', 'discard', 'extendDomain']),
	  x: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  y: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  className: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  shape: propTypes.oneOfType([propTypes.func, propTypes.element]),
	  clipPathId: propTypes.string
	});
	ReferenceDot.defaultProps = {
	  isFront: false,
	  ifOverflow: 'discard',
	  xAxisId: 0,
	  yAxisId: 0,
	  r: 10,
	  fill: '#fff',
	  stroke: '#ccc',
	  fillOpacity: 1,
	  strokeWidth: 1
	};

	function _typeof$s(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$s = function _typeof(obj) { return typeof obj; }; } else { _typeof$s = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$s(obj); }

	function _extends$p() { _extends$p = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$p.apply(this, arguments); }

	function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$r(source, true).forEach(function (key) { _defineProperty$y(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$r(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$y(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$q(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$q(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$q(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$q(Constructor.prototype, protoProps); if (staticProps) _defineProperties$q(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$p(self, call) { if (call && (_typeof$s(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$q(self); }

	function _assertThisInitialized$q(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$p(o) { _getPrototypeOf$p = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$p(o); }

	function _inherits$p(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$p(subClass, superClass); }

	function _setPrototypeOf$p(o, p) { _setPrototypeOf$p = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$p(o, p); }

	var ReferenceArea =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$p(ReferenceArea, _PureComponent);

	  function ReferenceArea() {
	    _classCallCheck$q(this, ReferenceArea);

	    return _possibleConstructorReturn$p(this, _getPrototypeOf$p(ReferenceArea).apply(this, arguments));
	  }

	  _createClass$q(ReferenceArea, [{
	    key: "getRect",
	    value: function getRect(hasX1, hasX2, hasY1, hasY2) {
	      var _this$props = this.props,
	          xValue1 = _this$props.x1,
	          xValue2 = _this$props.x2,
	          yValue1 = _this$props.y1,
	          yValue2 = _this$props.y2,
	          xAxis = _this$props.xAxis,
	          yAxis = _this$props.yAxis;
	      var scale = LabeledScaleHelper.create({
	        x: xAxis.scale,
	        y: yAxis.scale
	      });
	      var p1 = {
	        x: hasX1 ? scale.x.apply(xValue1) : scale.x.rangeMin,
	        y: hasY1 ? scale.y.apply(yValue1) : scale.y.rangeMin
	      };
	      var p2 = {
	        x: hasX2 ? scale.x.apply(xValue2) : scale.x.rangeMax,
	        y: hasY2 ? scale.y.apply(yValue2) : scale.y.rangeMax
	      };

	      if (ifOverflowMatches(this.props, 'discard') && (!scale.isInRange(p1) || !scale.isInRange(p2))) {
	        return null;
	      }

	      return rectWithPoints(p1, p2);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          x1 = _this$props2.x1,
	          x2 = _this$props2.x2,
	          y1 = _this$props2.y1,
	          y2 = _this$props2.y2,
	          className = _this$props2.className,
	          alwaysShow = _this$props2.alwaysShow,
	          clipPathId = _this$props2.clipPathId;
	      warn$1(alwaysShow === undefined, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
	      var hasX1 = isNumOrStr(x1);
	      var hasX2 = isNumOrStr(x2);
	      var hasY1 = isNumOrStr(y1);
	      var hasY2 = isNumOrStr(y2);
	      var shape = this.props.shape;

	      if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
	        return null;
	      }

	      var rect = this.getRect(hasX1, hasX2, hasY1, hasY2);

	      if (!rect && !shape) {
	        return null;
	      }

	      var clipPath = ifOverflowMatches(this.props, 'hidden') ? "url(#".concat(clipPathId, ")") : undefined;
	      return react.createElement(Layer, {
	        className: classnames('recharts-reference-area', className)
	      }, this.constructor.renderRect(shape, _objectSpread$u({
	        clipPath: clipPath
	      }, this.props, {}, rect)), Label.renderCallByParent(this.props, rect));
	    }
	  }], [{
	    key: "renderRect",
	    value: function renderRect(option, props) {
	      var rect;

	      if (react.isValidElement(option)) {
	        rect = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        rect = option(props);
	      } else {
	        rect = react.createElement(Rectangle, _extends$p({}, props, {
	          className: "recharts-reference-area-rect"
	        }));
	      }

	      return rect;
	    }
	  }]);

	  return ReferenceArea;
	}(react_4);

	ReferenceArea.displayName = 'ReferenceArea';
	ReferenceArea.propTypes = _objectSpread$u({}, PRESENTATION_ATTRIBUTES, {
	  viewBox: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number
	  }),
	  xAxis: propTypes.object,
	  yAxis: propTypes.object,
	  isFront: propTypes.bool,
	  alwaysShow: propTypes.bool,
	  ifOverflow: propTypes.oneOf(['hidden', 'visible', 'discard', 'extendDomain']),
	  x1: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  x2: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  y1: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  y2: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  className: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  shape: propTypes.oneOfType([propTypes.func, propTypes.element])
	});
	ReferenceArea.defaultProps = {
	  isFront: false,
	  ifOverflow: 'discard',
	  xAxisId: 0,
	  yAxisId: 0,
	  r: 10,
	  fill: '#ccc',
	  fillOpacity: 0.5,
	  stroke: 'none',
	  strokeWidth: 1
	};

	function _typeof$t(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$t = function _typeof(obj) { return typeof obj; }; } else { _typeof$t = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$t(obj); }

	function _extends$q() { _extends$q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$q.apply(this, arguments); }

	function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$s(source, true).forEach(function (key) { _defineProperty$z(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$s(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$z(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$b(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$c(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$c(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$r(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$r(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$r(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$r(Constructor.prototype, protoProps); if (staticProps) _defineProperties$r(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$q(self, call) { if (call && (_typeof$t(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$r(self); }

	function _assertThisInitialized$r(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$q(o) { _getPrototypeOf$q = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$q(o); }

	function _inherits$q(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$q(subClass, superClass); }

	function _setPrototypeOf$q(o, p) { _setPrototypeOf$q = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$q(o, p); }

	var CartesianAxis =
	/*#__PURE__*/
	function (_Component) {
	  _inherits$q(CartesianAxis, _Component);

	  function CartesianAxis() {
	    _classCallCheck$r(this, CartesianAxis);

	    return _possibleConstructorReturn$q(this, _getPrototypeOf$q(CartesianAxis).apply(this, arguments));
	  }

	  _createClass$r(CartesianAxis, [{
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(_ref, state) {
	      var viewBox = _ref.viewBox,
	          restProps = _objectWithoutProperties$b(_ref, ["viewBox"]);

	      // props.viewBox is sometimes generated every time -
	      // check that specially as object equality is likely to fail
	      var _this$props = this.props,
	          viewBoxOld = _this$props.viewBox,
	          restPropsOld = _objectWithoutProperties$b(_this$props, ["viewBox"]);

	      return !shallowEqual$1(viewBox, viewBoxOld) || !shallowEqual$1(restProps, restPropsOld) || !shallowEqual$1(state, this.state);
	    }
	    /**
	     * Calculate the coordinates of endpoints in ticks
	     * @param  {Object} data The data of a simple tick
	     * @return {Object} (x1, y1): The coordinate of endpoint close to tick text
	     *  (x2, y2): The coordinate of endpoint close to axis
	     */

	  }, {
	    key: "getTickLineCoord",
	    value: function getTickLineCoord(data) {
	      var _this$props2 = this.props,
	          x = _this$props2.x,
	          y = _this$props2.y,
	          width = _this$props2.width,
	          height = _this$props2.height,
	          orientation = _this$props2.orientation,
	          tickSize = _this$props2.tickSize,
	          mirror = _this$props2.mirror,
	          tickMargin = _this$props2.tickMargin;
	      var x1, x2, y1, y2, tx, ty;
	      var sign = mirror ? -1 : 1;
	      var finalTickSize = data.tickSize || tickSize;
	      var tickCoord = isNumber$3(data.tickCoord) ? data.tickCoord : data.coordinate;

	      switch (orientation) {
	        case 'top':
	          x1 = x2 = data.coordinate;
	          y2 = y + !mirror * height;
	          y1 = y2 - sign * finalTickSize;
	          ty = y1 - sign * tickMargin;
	          tx = tickCoord;
	          break;

	        case 'left':
	          y1 = y2 = data.coordinate;
	          x2 = x + !mirror * width;
	          x1 = x2 - sign * finalTickSize;
	          tx = x1 - sign * tickMargin;
	          ty = tickCoord;
	          break;

	        case 'right':
	          y1 = y2 = data.coordinate;
	          x2 = x + mirror * width;
	          x1 = x2 + sign * finalTickSize;
	          tx = x1 + sign * tickMargin;
	          ty = tickCoord;
	          break;

	        default:
	          x1 = x2 = data.coordinate;
	          y2 = y + mirror * height;
	          y1 = y2 + sign * finalTickSize;
	          ty = y1 + sign * tickMargin;
	          tx = tickCoord;
	          break;
	      }

	      return {
	        line: {
	          x1: x1,
	          y1: y1,
	          x2: x2,
	          y2: y2
	        },
	        tick: {
	          x: tx,
	          y: ty
	        }
	      };
	    }
	  }, {
	    key: "getTickTextAnchor",
	    value: function getTickTextAnchor() {
	      var _this$props3 = this.props,
	          orientation = _this$props3.orientation,
	          mirror = _this$props3.mirror;
	      var textAnchor;

	      switch (orientation) {
	        case 'left':
	          textAnchor = mirror ? 'start' : 'end';
	          break;

	        case 'right':
	          textAnchor = mirror ? 'end' : 'start';
	          break;

	        default:
	          textAnchor = 'middle';
	          break;
	      }

	      return textAnchor;
	    }
	  }, {
	    key: "getTickVerticalAnchor",
	    value: function getTickVerticalAnchor() {
	      var _this$props4 = this.props,
	          orientation = _this$props4.orientation,
	          mirror = _this$props4.mirror;
	      var verticalAnchor = 'end';

	      switch (orientation) {
	        case 'left':
	        case 'right':
	          verticalAnchor = 'middle';
	          break;

	        case 'top':
	          verticalAnchor = mirror ? 'start' : 'end';
	          break;

	        default:
	          verticalAnchor = mirror ? 'end' : 'start';
	          break;
	      }

	      return verticalAnchor;
	    }
	  }, {
	    key: "renderAxisLine",
	    value: function renderAxisLine() {
	      var _this$props5 = this.props,
	          x = _this$props5.x,
	          y = _this$props5.y,
	          width = _this$props5.width,
	          height = _this$props5.height,
	          orientation = _this$props5.orientation,
	          axisLine = _this$props5.axisLine,
	          mirror = _this$props5.mirror;

	      var props = _objectSpread$v({}, getPresentationAttributes(this.props), {
	        fill: 'none'
	      }, getPresentationAttributes(axisLine));

	      if (orientation === 'top' || orientation === 'bottom') {
	        var needHeight = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;
	        props = _objectSpread$v({}, props, {
	          x1: x,
	          y1: y + needHeight * height,
	          x2: x + width,
	          y2: y + needHeight * height
	        });
	      } else {
	        var needWidth = orientation === 'left' && !mirror || orientation === 'right' && mirror;
	        props = _objectSpread$v({}, props, {
	          x1: x + needWidth * width,
	          y1: y,
	          x2: x + needWidth * width,
	          y2: y + height
	        });
	      }

	      return react.createElement("line", _extends$q({
	        className: "recharts-cartesian-axis-line"
	      }, props));
	    }
	  }, {
	    key: "renderTicks",

	    /**
	     * render the ticks
	     * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
	     * @return {ReactComponent} renderedTicks
	     */
	    value: function renderTicks(ticks) {
	      var _this = this;

	      var _this$props6 = this.props,
	          tickLine = _this$props6.tickLine,
	          stroke = _this$props6.stroke,
	          tick = _this$props6.tick,
	          tickFormatter = _this$props6.tickFormatter,
	          unit = _this$props6.unit;
	      var finalTicks = CartesianAxis.getTicks(_objectSpread$v({}, this.props, {
	        ticks: ticks
	      }));
	      var textAnchor = this.getTickTextAnchor();
	      var verticalAnchor = this.getTickVerticalAnchor();
	      var axisProps = getPresentationAttributes(this.props);
	      var customTickProps = getPresentationAttributes(tick);

	      var tickLineProps = _objectSpread$v({}, axisProps, {
	        fill: 'none'
	      }, getPresentationAttributes(tickLine));

	      var items = finalTicks.map(function (entry, i) {
	        var _this$getTickLineCoor = _this.getTickLineCoord(entry),
	            lineCoord = _this$getTickLineCoor.line,
	            tickCoord = _this$getTickLineCoor.tick;

	        var tickProps = _objectSpread$v({
	          textAnchor: textAnchor,
	          verticalAnchor: verticalAnchor
	        }, axisProps, {
	          stroke: 'none',
	          fill: stroke
	        }, customTickProps, {}, tickCoord, {
	          index: i,
	          payload: entry,
	          visibleTicksCount: finalTicks.length
	        });

	        return react.createElement(Layer, _extends$q({
	          className: "recharts-cartesian-axis-tick",
	          key: "tick-".concat(i) // eslint-disable-line react/no-array-index-key

	        }, filterEventsOfChild(_this.props, entry, i)), tickLine && react.createElement("line", _extends$q({
	          className: "recharts-cartesian-axis-tick-line"
	        }, tickLineProps, lineCoord)), tick && _this.constructor.renderTickItem(tick, tickProps, "".concat(isFunction_1(tickFormatter) ? tickFormatter(entry.value) : entry.value).concat(unit || '')));
	      });
	      return react.createElement("g", {
	        className: "recharts-cartesian-axis-ticks"
	      }, items);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          axisLine = _this$props7.axisLine,
	          width = _this$props7.width,
	          height = _this$props7.height,
	          ticksGenerator = _this$props7.ticksGenerator,
	          className = _this$props7.className,
	          hide = _this$props7.hide;

	      if (hide) {
	        return null;
	      }

	      var _this$props8 = this.props,
	          ticks = _this$props8.ticks,
	          noTicksProps = _objectWithoutProperties$b(_this$props8, ["ticks"]);

	      var finalTicks = ticks;

	      if (isFunction_1(ticksGenerator)) {
	        finalTicks = ticks && ticks.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);
	      }

	      if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
	        return null;
	      }

	      return react.createElement(Layer, {
	        className: classnames('recharts-cartesian-axis', className)
	      }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks), Label.renderCallByParent(this.props));
	    }
	  }], [{
	    key: "getTicks",
	    value: function getTicks(props) {
	      var tick = props.tick,
	          ticks = props.ticks,
	          viewBox = props.viewBox,
	          minTickGap = props.minTickGap,
	          orientation = props.orientation,
	          interval = props.interval,
	          tickFormatter = props.tickFormatter,
	          unit = props.unit;

	      if (!ticks || !ticks.length || !tick) {
	        return [];
	      }

	      if (isNumber$3(interval) || isSsr()) {
	        return CartesianAxis.getNumberIntervalTicks(ticks, isNumber$3(interval) ? interval : 0);
	      }

	      if (interval === 'preserveStartEnd') {
	        return CartesianAxis.getTicksStart({
	          ticks: ticks,
	          tickFormatter: tickFormatter,
	          viewBox: viewBox,
	          orientation: orientation,
	          minTickGap: minTickGap,
	          unit: unit
	        }, true);
	      }

	      if (interval === 'preserveStart') {
	        return CartesianAxis.getTicksStart({
	          ticks: ticks,
	          tickFormatter: tickFormatter,
	          viewBox: viewBox,
	          orientation: orientation,
	          minTickGap: minTickGap,
	          unit: unit
	        });
	      }

	      return CartesianAxis.getTicksEnd({
	        ticks: ticks,
	        tickFormatter: tickFormatter,
	        viewBox: viewBox,
	        orientation: orientation,
	        minTickGap: minTickGap,
	        unit: unit
	      });
	    }
	  }, {
	    key: "getNumberIntervalTicks",
	    value: function getNumberIntervalTicks(ticks, interval) {
	      return ticks.filter(function (entry, i) {
	        return i % (interval + 1) === 0;
	      });
	    }
	  }, {
	    key: "getTicksStart",
	    value: function getTicksStart(_ref2, preserveEnd) {
	      var ticks = _ref2.ticks,
	          tickFormatter = _ref2.tickFormatter,
	          viewBox = _ref2.viewBox,
	          orientation = _ref2.orientation,
	          minTickGap = _ref2.minTickGap,
	          unit = _ref2.unit;
	      var x = viewBox.x,
	          y = viewBox.y,
	          width = viewBox.width,
	          height = viewBox.height;
	      var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height';
	      var result = (ticks || []).slice(); // we need add the width of 'unit' only when sizeKey === 'width'

	      var unitSize = unit && sizeKey === 'width' ? getStringSize(unit)[sizeKey] : 0;
	      var len = result.length;
	      var sign = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;
	      var start, end;

	      if (sign === 1) {
	        start = sizeKey === 'width' ? x : y;
	        end = sizeKey === 'width' ? x + width : y + height;
	      } else {
	        start = sizeKey === 'width' ? x + width : y + height;
	        end = sizeKey === 'width' ? x : y;
	      }

	      if (preserveEnd) {
	        // Try to guarantee the tail to be displayed
	        var tail = ticks[len - 1];
	        var tailContent = isFunction_1(tickFormatter) ? tickFormatter(tail.value) : tail.value;
	        var tailSize = getStringSize(tailContent)[sizeKey] + unitSize;
	        var tailGap = sign * (tail.coordinate + sign * tailSize / 2 - end);
	        result[len - 1] = tail = _objectSpread$v({}, tail, {
	          tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign : tail.coordinate
	        });
	        var isTailShow = sign * (tail.tickCoord - sign * tailSize / 2 - start) >= 0 && sign * (tail.tickCoord + sign * tailSize / 2 - end) <= 0;

	        if (isTailShow) {
	          end = tail.tickCoord - sign * (tailSize / 2 + minTickGap);
	          result[len - 1] = _objectSpread$v({}, tail, {
	            isShow: true
	          });
	        }
	      }

	      var count = preserveEnd ? len - 1 : len;

	      for (var _i = 0; _i < count; _i++) {
	        var entry = result[_i];
	        var content = isFunction_1(tickFormatter) ? tickFormatter(entry.value) : entry.value;
	        var size = getStringSize(content)[sizeKey] + unitSize;

	        if (_i === 0) {
	          var gap = sign * (entry.coordinate - sign * size / 2 - start);
	          result[_i] = entry = _objectSpread$v({}, entry, {
	            tickCoord: gap < 0 ? entry.coordinate - gap * sign : entry.coordinate
	          });
	        } else {
	          result[_i] = entry = _objectSpread$v({}, entry, {
	            tickCoord: entry.coordinate
	          });
	        }

	        var isShow = sign * (entry.tickCoord - sign * size / 2 - start) >= 0 && sign * (entry.tickCoord + sign * size / 2 - end) <= 0;

	        if (isShow) {
	          start = entry.tickCoord + sign * (size / 2 + minTickGap);
	          result[_i] = _objectSpread$v({}, entry, {
	            isShow: true
	          });
	        }
	      }

	      return result.filter(function (entry) {
	        return entry.isShow;
	      });
	    }
	  }, {
	    key: "getTicksEnd",
	    value: function getTicksEnd(_ref3) {
	      var ticks = _ref3.ticks,
	          tickFormatter = _ref3.tickFormatter,
	          viewBox = _ref3.viewBox,
	          orientation = _ref3.orientation,
	          minTickGap = _ref3.minTickGap,
	          unit = _ref3.unit;
	      var x = viewBox.x,
	          y = viewBox.y,
	          width = viewBox.width,
	          height = viewBox.height;
	      var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height'; // we need add the width of 'unit' only when sizeKey === 'width'

	      var unitSize = unit && sizeKey === 'width' ? getStringSize(unit)[sizeKey] : 0;
	      var result = (ticks || []).slice();
	      var len = result.length;
	      var sign = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;
	      var start, end;

	      if (sign === 1) {
	        start = sizeKey === 'width' ? x : y;
	        end = sizeKey === 'width' ? x + width : y + height;
	      } else {
	        start = sizeKey === 'width' ? x + width : y + height;
	        end = sizeKey === 'width' ? x : y;
	      }

	      for (var _i2 = len - 1; _i2 >= 0; _i2--) {
	        var entry = result[_i2];
	        var content = isFunction_1(tickFormatter) ? tickFormatter(entry.value) : entry.value;
	        var size = getStringSize(content)[sizeKey] + unitSize;

	        if (_i2 === len - 1) {
	          var gap = sign * (entry.coordinate + sign * size / 2 - end);
	          result[_i2] = entry = _objectSpread$v({}, entry, {
	            tickCoord: gap > 0 ? entry.coordinate - gap * sign : entry.coordinate
	          });
	        } else {
	          result[_i2] = entry = _objectSpread$v({}, entry, {
	            tickCoord: entry.coordinate
	          });
	        }

	        var isShow = sign * (entry.tickCoord - sign * size / 2 - start) >= 0 && sign * (entry.tickCoord + sign * size / 2 - end) <= 0;

	        if (isShow) {
	          end = entry.tickCoord - sign * (size / 2 + minTickGap);
	          result[_i2] = _objectSpread$v({}, entry, {
	            isShow: true
	          });
	        }
	      }

	      return result.filter(function (entry) {
	        return entry.isShow;
	      });
	    }
	  }, {
	    key: "renderTickItem",
	    value: function renderTickItem(option, props, value) {
	      var tickItem;

	      if (react.isValidElement(option)) {
	        tickItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        tickItem = option(props);
	      } else {
	        tickItem = react.createElement(Text, _extends$q({}, props, {
	          className: "recharts-cartesian-axis-tick-value"
	        }), value);
	      }

	      return tickItem;
	    }
	  }]);

	  return CartesianAxis;
	}(react_3);

	CartesianAxis.displayName = 'CartesianAxis';
	CartesianAxis.propTypes = _objectSpread$v({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  orientation: propTypes.oneOf(['top', 'bottom', 'left', 'right']),
	  // The viewBox of svg
	  viewBox: propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number
	  }),
	  tick: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.object, propTypes.element]),
	  axisLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  tickLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  mirror: propTypes.bool,
	  tickMargin: propTypes.number.isRequired,
	  minTickGap: propTypes.number,
	  ticks: propTypes.array,
	  tickSize: propTypes.number,
	  stroke: propTypes.string,
	  tickFormatter: propTypes.func,
	  ticksGenerator: propTypes.func,
	  interval: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['preserveStart', 'preserveEnd', 'preserveStartEnd'])])
	});
	CartesianAxis.defaultProps = {
	  x: 0,
	  y: 0,
	  width: 0,
	  height: 0,
	  viewBox: {
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  // The orientation of axis
	  orientation: 'bottom',
	  // The ticks
	  ticks: [],
	  stroke: '#666',
	  tickLine: true,
	  axisLine: true,
	  tick: true,
	  mirror: false,
	  minTickGap: 5,
	  // The width or height of tick
	  tickSize: 6,
	  tickMargin: 2,
	  interval: 'preserveEnd'
	};

	function _typeof$u(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$u = function _typeof(obj) { return typeof obj; }; } else { _typeof$u = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$u(obj); }

	function _extends$r() { _extends$r = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$r.apply(this, arguments); }

	function _objectWithoutProperties$c(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$d(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$d(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$t(source, true).forEach(function (key) { _defineProperty$A(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$t(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$A(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$s(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$s(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$s(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$s(Constructor.prototype, protoProps); if (staticProps) _defineProperties$s(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$r(self, call) { if (call && (_typeof$u(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$s(self); }

	function _assertThisInitialized$s(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$r(o) { _getPrototypeOf$r = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$r(o); }

	function _inherits$r(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$r(subClass, superClass); }

	function _setPrototypeOf$r(o, p) { _setPrototypeOf$r = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$r(o, p); }

	var CartesianGrid =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$r(CartesianGrid, _PureComponent);

	  function CartesianGrid() {
	    _classCallCheck$s(this, CartesianGrid);

	    return _possibleConstructorReturn$r(this, _getPrototypeOf$r(CartesianGrid).apply(this, arguments));
	  }

	  _createClass$s(CartesianGrid, [{
	    key: "renderHorizontal",

	    /**
	     * Draw the horizontal grid lines
	     * @param {Array} horizontalPoints either passed in as props or generated from function
	     * @return {Group} Horizontal lines
	     */
	    value: function renderHorizontal(horizontalPoints) {
	      var _this = this;

	      var _this$props = this.props,
	          x = _this$props.x,
	          width = _this$props.width,
	          horizontal = _this$props.horizontal;

	      if (!horizontalPoints || !horizontalPoints.length) {
	        return null;
	      }

	      var items = horizontalPoints.map(function (entry, i) {
	        var props = _objectSpread$w({}, _this.props, {
	          x1: x,
	          y1: entry,
	          x2: x + width,
	          y2: entry,
	          key: "line-".concat(i),
	          index: i
	        });

	        return _this.constructor.renderLineItem(horizontal, props);
	      });
	      return react.createElement("g", {
	        className: "recharts-cartesian-grid-horizontal"
	      }, items);
	    }
	    /**
	     * Draw vertical grid lines
	     * @param {Array} verticalPoints either passed in as props or generated from function
	     * @return {Group} Vertical lines
	     */

	  }, {
	    key: "renderVertical",
	    value: function renderVertical(verticalPoints) {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          y = _this$props2.y,
	          height = _this$props2.height,
	          vertical = _this$props2.vertical;

	      if (!verticalPoints || !verticalPoints.length) {
	        return null;
	      }

	      var items = verticalPoints.map(function (entry, i) {
	        var props = _objectSpread$w({}, _this2.props, {
	          x1: entry,
	          y1: y,
	          x2: entry,
	          y2: y + height,
	          key: "line-".concat(i),
	          index: i
	        });

	        return _this2.constructor.renderLineItem(vertical, props);
	      });
	      return react.createElement("g", {
	        className: "recharts-cartesian-grid-vertical"
	      }, items);
	    }
	    /**
	     * Draw vertical grid stripes filled by colors
	     * @param {Array} verticalPoints either passed in as props or generated from function
	     * @return {Group} Vertical stripes
	     */

	  }, {
	    key: "renderVerticalStripes",
	    value: function renderVerticalStripes(verticalPoints) {
	      var verticalFill = this.props.verticalFill;

	      if (!verticalFill || !verticalFill.length) {
	        return null;
	      }

	      var _this$props3 = this.props,
	          fillOpacity = _this$props3.fillOpacity,
	          x = _this$props3.x,
	          y = _this$props3.y,
	          width = _this$props3.width,
	          height = _this$props3.height;
	      var verticalPointsUpdated = verticalPoints.slice().sort(function (a, b) {
	        return a - b;
	      });

	      if (x !== verticalPointsUpdated[0]) {
	        verticalPointsUpdated.unshift(0);
	      }

	      var items = verticalPointsUpdated.map(function (entry, i) {
	        var lineWidth = verticalPointsUpdated[i + 1] ? verticalPointsUpdated[i + 1] - entry : x + width - entry;

	        if (lineWidth <= 0) {
	          return null;
	        }

	        var colorIndex = i % verticalFill.length;
	        return react.createElement("rect", {
	          key: "react-".concat(i) // eslint-disable-line react/no-array-index-key
	          ,
	          x: Math.round(entry + x - x),
	          y: y,
	          width: lineWidth,
	          height: height,
	          stroke: "none",
	          fill: verticalFill[colorIndex],
	          fillOpacity: fillOpacity,
	          className: "recharts-cartesian-grid-bg"
	        });
	      });
	      return react.createElement("g", {
	        className: "recharts-cartesian-gridstripes-vertical"
	      }, items);
	    }
	    /**
	     * Draw horizontal grid stripes filled by colors
	     * @param {Array} horizontalPoints either passed in as props or generated from function
	     * @return {Group} Horizontal stripes
	     */

	  }, {
	    key: "renderHorizontalStripes",
	    value: function renderHorizontalStripes(horizontalPoints) {
	      var horizontalFill = this.props.horizontalFill;

	      if (!horizontalFill || !horizontalFill.length) {
	        return null;
	      }

	      var _this$props4 = this.props,
	          fillOpacity = _this$props4.fillOpacity,
	          x = _this$props4.x,
	          y = _this$props4.y,
	          width = _this$props4.width,
	          height = _this$props4.height;
	      var horizontalPointsUpdated = horizontalPoints.slice().sort(function (a, b) {
	        return a - b;
	      });

	      if (y !== horizontalPointsUpdated[0]) {
	        horizontalPointsUpdated.unshift(0);
	      }

	      var items = horizontalPointsUpdated.map(function (entry, i) {
	        var lineHeight = horizontalPointsUpdated[i + 1] ? horizontalPointsUpdated[i + 1] - entry : y + height - entry;

	        if (lineHeight <= 0) {
	          return null;
	        }

	        var colorIndex = i % horizontalFill.length;
	        return react.createElement("rect", {
	          key: "react-".concat(i) // eslint-disable-line react/no-array-index-key
	          ,
	          y: Math.round(entry + y - y),
	          x: x,
	          height: lineHeight,
	          width: width,
	          stroke: "none",
	          fill: horizontalFill[colorIndex],
	          fillOpacity: fillOpacity,
	          className: "recharts-cartesian-grid-bg"
	        });
	      });
	      return react.createElement("g", {
	        className: "recharts-cartesian-gridstripes-horizontal"
	      }, items);
	    }
	  }, {
	    key: "renderBackground",
	    value: function renderBackground() {
	      var fill = this.props.fill;

	      if (!fill || fill === 'none') {
	        return null;
	      }

	      var _this$props5 = this.props,
	          fillOpacity = _this$props5.fillOpacity,
	          x = _this$props5.x,
	          y = _this$props5.y,
	          width = _this$props5.width,
	          height = _this$props5.height;
	      return react.createElement("rect", {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        stroke: "none",
	        fill: fill,
	        fillOpacity: fillOpacity,
	        className: "recharts-cartesian-grid-bg"
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          x = _this$props6.x,
	          y = _this$props6.y,
	          width = _this$props6.width,
	          height = _this$props6.height,
	          horizontal = _this$props6.horizontal,
	          vertical = _this$props6.vertical,
	          horizontalCoordinatesGenerator = _this$props6.horizontalCoordinatesGenerator,
	          verticalCoordinatesGenerator = _this$props6.verticalCoordinatesGenerator,
	          xAxis = _this$props6.xAxis,
	          yAxis = _this$props6.yAxis,
	          offset = _this$props6.offset,
	          chartWidth = _this$props6.chartWidth,
	          chartHeight = _this$props6.chartHeight;

	      if (!isNumber$3(width) || width <= 0 || !isNumber$3(height) || height <= 0 || !isNumber$3(x) || x !== +x || !isNumber$3(y) || y !== +y) {
	        return null;
	      }

	      var _this$props7 = this.props,
	          horizontalPoints = _this$props7.horizontalPoints,
	          verticalPoints = _this$props7.verticalPoints; // No horizontal points are specified

	      if ((!horizontalPoints || !horizontalPoints.length) && isFunction_1(horizontalCoordinatesGenerator)) {
	        horizontalPoints = horizontalCoordinatesGenerator({
	          yAxis: yAxis,
	          width: chartWidth,
	          height: chartHeight,
	          offset: offset
	        });
	      } // No vertical points are specified


	      if ((!verticalPoints || !verticalPoints.length) && isFunction_1(verticalCoordinatesGenerator)) {
	        verticalPoints = verticalCoordinatesGenerator({
	          xAxis: xAxis,
	          width: chartWidth,
	          height: chartHeight,
	          offset: offset
	        });
	      }

	      return react.createElement("g", {
	        className: "recharts-cartesian-grid"
	      }, this.renderBackground(), horizontal && this.renderHorizontal(horizontalPoints), vertical && this.renderVertical(verticalPoints), horizontal && this.renderHorizontalStripes(horizontalPoints), vertical && this.renderVerticalStripes(verticalPoints));
	    }
	  }], [{
	    key: "renderLineItem",
	    value: function renderLineItem(option, props) {
	      var lineItem;

	      if (react.isValidElement(option)) {
	        lineItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        lineItem = option(props);
	      } else {
	        var x1 = props.x1,
	            y1 = props.y1,
	            x2 = props.x2,
	            y2 = props.y2,
	            key = props.key,
	            others = _objectWithoutProperties$c(props, ["x1", "y1", "x2", "y2", "key"]);

	        lineItem = react.createElement("line", _extends$r({}, getPresentationAttributes(others), {
	          x1: x1,
	          y1: y1,
	          x2: x2,
	          y2: y2,
	          fill: "none",
	          key: key
	        }));
	      }

	      return lineItem;
	    }
	  }]);

	  return CartesianGrid;
	}(react_4);

	CartesianGrid.displayName = 'CartesianGrid';
	CartesianGrid.propTypes = _objectSpread$w({}, PRESENTATION_ATTRIBUTES, {
	  x: propTypes.number,
	  y: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  horizontal: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  vertical: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  horizontalPoints: propTypes.arrayOf(propTypes.number),
	  verticalPoints: propTypes.arrayOf(propTypes.number),
	  horizontalCoordinatesGenerator: propTypes.func,
	  verticalCoordinatesGenerator: propTypes.func,
	  xAxis: propTypes.object,
	  yAxis: propTypes.object,
	  offset: propTypes.object,
	  chartWidth: propTypes.number,
	  chartHeight: propTypes.number,
	  verticalFill: propTypes.arrayOf(propTypes.string),
	  horizontalFill: propTypes.arrayOf(propTypes.string)
	});
	CartesianGrid.defaultProps = {
	  horizontal: true,
	  vertical: true,
	  // The ordinates of horizontal grid lines
	  horizontalPoints: [],
	  // The abscissas of vertical grid lines
	  verticalPoints: [],
	  stroke: '#ccc',
	  fill: 'none',
	  // The fill of colors of grid lines
	  verticalFill: [],
	  horizontalFill: []
	};

	function _typeof$v(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$v = function _typeof(obj) { return typeof obj; }; } else { _typeof$v = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$v(obj); }

	function _extends$s() { _extends$s = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$s.apply(this, arguments); }

	function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$u(source, true).forEach(function (key) { _defineProperty$B(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$u(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$B(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray$a(arr) { return _arrayWithoutHoles$a(arr) || _iterableToArray$b(arr) || _nonIterableSpread$a(); }

	function _nonIterableSpread$a() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$b(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$a(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _classCallCheck$t(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$t(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$t(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$t(Constructor.prototype, protoProps); if (staticProps) _defineProperties$t(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$s(self, call) { if (call && (_typeof$v(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$t(self); }

	function _assertThisInitialized$t(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$s(o) { _getPrototypeOf$s = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$s(o); }

	function _inherits$s(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$s(subClass, superClass); }

	function _setPrototypeOf$s(o, p) { _setPrototypeOf$s = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$s(o, p); }

	var Line =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$s(Line, _PureComponent);

	  function Line() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$t(this, Line);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$s(this, (_getPrototypeOf2 = _getPrototypeOf$s(Line)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: true,
	      totalLength: 0
	    };
	    _this.id = uniqueId('recharts-line-');

	    _this.cachePrevData = function (points) {
	      _this.setState({
	        prevPoints: points
	      });
	    };

	    _this.pathRef = function (node) {
	      _this.mainCurve = node;
	    };

	    _this.handleAnimationEnd = function () {
	      _this.setState({
	        isAnimationFinished: true
	      });

	      _this.props.onAnimationEnd();
	    };

	    _this.handleAnimationStart = function () {
	      _this.setState({
	        isAnimationFinished: false
	      });

	      _this.props.onAnimationStart();
	    };

	    return _this;
	  }

	  _createClass$t(Line, [{
	    key: "componentDidMount",

	    /* eslint-disable  react/no-did-mount-set-state */
	    value: function componentDidMount() {
	      if (!this.props.isAnimationActive) {
	        return;
	      }

	      var totalLength = this.getTotalLength();
	      this.setState({
	        totalLength: totalLength
	      });
	    } // eslint-disable-next-line camelcase

	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          points = _this$props.points;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevData(points);
	      }
	    }
	  }, {
	    key: "getTotalLength",
	    value: function getTotalLength() {
	      var curveDom = this.mainCurve;

	      try {
	        return curveDom && curveDom.getTotalLength && curveDom.getTotalLength() || 0;
	      } catch (err) {
	        return 0;
	      }
	    }
	  }, {
	    key: "getStrokeDasharray",
	    value: function getStrokeDasharray(length, totalLength, lines) {
	      var lineLength = lines.reduce(function (pre, next) {
	        return pre + next;
	      });
	      var count = parseInt(length / lineLength, 10);
	      var remainLength = length % lineLength;
	      var restLength = totalLength - length;
	      var remainLines = [];

	      for (var i = 0, sum = 0;; sum += lines[i], ++i) {
	        if (sum + lines[i] > remainLength) {
	          remainLines = [].concat(_toConsumableArray$a(lines.slice(0, i)), [remainLength - sum]);
	          break;
	        }
	      }

	      var emptyLines = remainLines.length % 2 === 0 ? [0, restLength] : [restLength];
	      return [].concat(_toConsumableArray$a(this.constructor.repeat(lines, count)), _toConsumableArray$a(remainLines), emptyLines).map(function (line) {
	        return "".concat(line, "px");
	      }).join(', ');
	    }
	  }, {
	    key: "renderErrorBar",
	    value: function renderErrorBar() {
	      if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
	        return null;
	      }

	      var _this$props2 = this.props,
	          points = _this$props2.points,
	          xAxis = _this$props2.xAxis,
	          yAxis = _this$props2.yAxis,
	          layout = _this$props2.layout,
	          children = _this$props2.children;
	      var errorBarItems = findAllByType(children, ErrorBar);

	      if (!errorBarItems) {
	        return null;
	      }

	      function dataPointFormatter(dataPoint, dataKey) {
	        return {
	          x: dataPoint.x,
	          y: dataPoint.y,
	          value: dataPoint.value,
	          errorVal: getValueByDataKey(dataPoint.payload, dataKey)
	        };
	      }

	      return errorBarItems.map(function (item, i) {
	        return react.cloneElement(item, {
	          key: i,
	          // eslint-disable-line react/no-array-index-key
	          data: points,
	          xAxis: xAxis,
	          yAxis: yAxis,
	          layout: layout,
	          dataPointFormatter: dataPointFormatter
	        });
	      });
	    }
	  }, {
	    key: "renderDots",
	    value: function renderDots(needClip, clipPathId) {
	      var _this2 = this;

	      var isAnimationActive = this.props.isAnimationActive;

	      if (isAnimationActive && !this.state.isAnimationFinished) {
	        return null;
	      }

	      var _this$props3 = this.props,
	          dot = _this$props3.dot,
	          points = _this$props3.points,
	          dataKey = _this$props3.dataKey;
	      var lineProps = getPresentationAttributes(this.props);
	      var customDotProps = getPresentationAttributes(dot);
	      var dotEvents = filterEventAttributes(dot);
	      var dots = points.map(function (entry, i) {
	        var dotProps = _objectSpread$x({
	          key: "dot-".concat(i),
	          r: 3
	        }, lineProps, {}, customDotProps, {}, dotEvents, {
	          value: entry.value,
	          dataKey: dataKey,
	          cx: entry.x,
	          cy: entry.y,
	          index: i,
	          payload: entry.payload
	        });

	        return _this2.constructor.renderDotItem(dot, dotProps);
	      });
	      var dotsProps = {
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
	      };
	      return react.createElement(Layer, _extends$s({
	        className: "recharts-line-dots",
	        key: "dots"
	      }, dotsProps), dots);
	    }
	  }, {
	    key: "renderCurveStatically",
	    value: function renderCurveStatically(points, needClip, clipPathId, props) {
	      var _this$props4 = this.props,
	          type = _this$props4.type,
	          layout = _this$props4.layout,
	          connectNulls = _this$props4.connectNulls;

	      var curveProps = _objectSpread$x({}, getPresentationAttributes(this.props), {}, filterEventAttributes(this.props), {
	        fill: 'none',
	        className: 'recharts-line-curve',
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null,
	        points: points
	      }, props, {
	        type: type,
	        layout: layout,
	        connectNulls: connectNulls
	      });

	      return react.createElement(Curve, _extends$s({}, curveProps, {
	        pathRef: this.pathRef
	      }));
	    }
	  }, {
	    key: "renderCurveWithAnimation",
	    value: function renderCurveWithAnimation(needClip, clipPathId) {
	      var _this3 = this;

	      var _this$props5 = this.props,
	          points = _this$props5.points,
	          strokeDasharray = _this$props5.strokeDasharray,
	          isAnimationActive = _this$props5.isAnimationActive,
	          animationBegin = _this$props5.animationBegin,
	          animationDuration = _this$props5.animationDuration,
	          animationEasing = _this$props5.animationEasing,
	          animationId = _this$props5.animationId,
	          width = _this$props5.width,
	          height = _this$props5.height;
	      var _this$state = this.state,
	          prevPoints = _this$state.prevPoints,
	          totalLength = _this$state.totalLength;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "line-".concat(animationId),
	        onAnimationEnd: this.handleAnimationEnd,
	        onAnimationStart: this.handleAnimationStart
	      }, function (_ref) {
	        var t = _ref.t;

	        if (prevPoints) {
	          var prevPointsDiffFactor = prevPoints.length / points.length;
	          var stepData = points.map(function (entry, index) {
	            var prevPointIndex = Math.floor(index * prevPointsDiffFactor);

	            if (prevPoints[prevPointIndex]) {
	              var prev = prevPoints[prevPointIndex];
	              var interpolatorX = interpolateNumber(prev.x, entry.x);
	              var interpolatorY = interpolateNumber(prev.y, entry.y);
	              return _objectSpread$x({}, entry, {
	                x: interpolatorX(t),
	                y: interpolatorY(t)
	              });
	            } // magic number of faking previous x and y location


	            if (_this3.animateNewValues) {
	              var _interpolatorX = interpolateNumber(width * 2, entry.x);

	              var _interpolatorY = interpolateNumber(height / 2, entry.y);

	              return _objectSpread$x({}, entry, {
	                x: _interpolatorX(t),
	                y: _interpolatorY(t)
	              });
	            }

	            return _objectSpread$x({}, entry, {
	              x: entry.x,
	              y: entry.y
	            });
	          });
	          return _this3.renderCurveStatically(stepData, needClip, clipPathId);
	        }

	        var interpolator = interpolateNumber(0, totalLength);
	        var curLength = interpolator(t);
	        var currentStrokeDasharray;

	        if (strokeDasharray) {
	          var lines = strokeDasharray.split(/[,\s]+/gim).map(function (num) {
	            return parseFloat(num);
	          });
	          currentStrokeDasharray = _this3.getStrokeDasharray(curLength, totalLength, lines);
	        } else {
	          currentStrokeDasharray = "".concat(curLength, "px ").concat(totalLength - curLength, "px");
	        }

	        return _this3.renderCurveStatically(points, needClip, clipPathId, {
	          strokeDasharray: currentStrokeDasharray
	        });
	      });
	    }
	  }, {
	    key: "renderCurve",
	    value: function renderCurve(needClip, clipPathId) {
	      var _this$props6 = this.props,
	          points = _this$props6.points,
	          isAnimationActive = _this$props6.isAnimationActive;
	      var _this$state2 = this.state,
	          prevPoints = _this$state2.prevPoints,
	          totalLength = _this$state2.totalLength;

	      if (isAnimationActive && points && points.length && (!prevPoints && totalLength > 0 || !isEqual_1(prevPoints, points))) {
	        return this.renderCurveWithAnimation(needClip, clipPathId);
	      }

	      return this.renderCurveStatically(points, needClip, clipPathId);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          hide = _this$props7.hide,
	          dot = _this$props7.dot,
	          points = _this$props7.points,
	          className = _this$props7.className,
	          xAxis = _this$props7.xAxis,
	          yAxis = _this$props7.yAxis,
	          top = _this$props7.top,
	          left = _this$props7.left,
	          width = _this$props7.width,
	          height = _this$props7.height,
	          isAnimationActive = _this$props7.isAnimationActive,
	          id = _this$props7.id;

	      if (hide || !points || !points.length) {
	        return null;
	      }

	      var isAnimationFinished = this.state.isAnimationFinished;
	      var hasSinglePoint = points.length === 1;
	      var layerClass = classnames('recharts-line', className);
	      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;
	      var clipPathId = isNil_1(id) ? this.id : id;
	      return react.createElement(Layer, {
	        className: layerClass
	      }, needClip ? react.createElement("defs", null, react.createElement("clipPath", {
	        id: "clipPath-".concat(clipPathId)
	      }, react.createElement("rect", {
	        x: left,
	        y: top,
	        width: width,
	        height: height
	      }))) : null, !hasSinglePoint && this.renderCurve(needClip, clipPathId), this.renderErrorBar(), (hasSinglePoint || dot) && this.renderDots(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));
	    }
	  }], [{
	    key: "repeat",
	    value: function repeat(lines, count) {
	      var linesUnit = lines.length % 2 !== 0 ? [].concat(_toConsumableArray$a(lines), [0]) : lines;
	      var result = [];

	      for (var i = 0; i < count; ++i) {
	        result = [].concat(_toConsumableArray$a(result), _toConsumableArray$a(linesUnit));
	      }

	      return result;
	    }
	  }, {
	    key: "renderDotItem",
	    value: function renderDotItem(option, props) {
	      var dotItem;

	      if (react.isValidElement(option)) {
	        dotItem = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        dotItem = option(props);
	      } else {
	        var className = classnames('recharts-line-dot', option ? option.className : '');
	        dotItem = react.createElement(Dot, _extends$s({}, props, {
	          className: className
	        }));
	      }

	      return dotItem;
	    }
	  }]);

	  return Line;
	}(react_4);

	Line.displayName = 'Line';
	Line.propTypes = _objectSpread$x({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  type: propTypes.oneOfType([propTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), propTypes.func]),
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  yAxis: propTypes.object,
	  xAxis: propTypes.object,
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  layout: propTypes.oneOf(['horizontal', 'vertical']),
	  connectNulls: propTypes.bool,
	  hide: propTypes.bool,
	  // whether have dot in line
	  activeDot: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  dot: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  top: propTypes.number,
	  left: propTypes.number,
	  width: propTypes.number,
	  height: propTypes.number,
	  points: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    value: propTypes.value
	  })),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  animateNewValues: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
	  animationId: propTypes.number,
	  id: propTypes.string
	});
	Line.defaultProps = {
	  xAxisId: 0,
	  yAxisId: 0,
	  connectNulls: false,
	  activeDot: true,
	  dot: true,
	  legendType: 'line',
	  stroke: '#3182bd',
	  strokeWidth: 1,
	  fill: '#fff',
	  points: [],
	  isAnimationActive: !isSsr(),
	  animateNewValues: true,
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease',
	  hide: false,
	  onAnimationStart: function onAnimationStart() {},
	  onAnimationEnd: function onAnimationEnd() {}
	};

	Line.getComposedData = function (_ref2) {
	  var props = _ref2.props,
	      xAxis = _ref2.xAxis,
	      yAxis = _ref2.yAxis,
	      xAxisTicks = _ref2.xAxisTicks,
	      yAxisTicks = _ref2.yAxisTicks,
	      dataKey = _ref2.dataKey,
	      bandSize = _ref2.bandSize,
	      displayedData = _ref2.displayedData,
	      offset = _ref2.offset;
	  var layout = props.layout;
	  var points = displayedData.map(function (entry, index) {
	    var value = getValueByDataKey(entry, dataKey);

	    if (layout === 'horizontal') {
	      return {
	        x: getCateCoordinateOfLine({
	          axis: xAxis,
	          ticks: xAxisTicks,
	          bandSize: bandSize,
	          entry: entry,
	          index: index
	        }),
	        y: isNil_1(value) ? null : yAxis.scale(value),
	        value: value,
	        payload: entry
	      };
	    }

	    return {
	      x: isNil_1(value) ? null : xAxis.scale(value),
	      y: getCateCoordinateOfLine({
	        axis: yAxis,
	        ticks: yAxisTicks,
	        bandSize: bandSize,
	        entry: entry,
	        index: index
	      }),
	      value: value,
	      payload: entry
	    };
	  });
	  return _objectSpread$x({
	    points: points,
	    layout: layout
	  }, offset);
	};

	function _typeof$w(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$w = function _typeof(obj) { return typeof obj; }; } else { _typeof$w = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$w(obj); }

	function _extends$t() { _extends$t = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$t.apply(this, arguments); }

	function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$v(source, true).forEach(function (key) { _defineProperty$C(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$v(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$C(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$u(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$u(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$u(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$u(Constructor.prototype, protoProps); if (staticProps) _defineProperties$u(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$t(self, call) { if (call && (_typeof$w(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$u(self); }

	function _assertThisInitialized$u(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$t(o) { _getPrototypeOf$t = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$t(o); }

	function _inherits$t(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$t(subClass, superClass); }

	function _setPrototypeOf$t(o, p) { _setPrototypeOf$t = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$t(o, p); }

	var Area =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$t(Area, _PureComponent);

	  function Area() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$u(this, Area);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$t(this, (_getPrototypeOf2 = _getPrototypeOf$t(Area)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: true
	    };
	    _this.id = uniqueId('recharts-area-');

	    _this.cachePrevData = function (points, baseLine) {
	      _this.setState({
	        prevPoints: points,
	        prevBaseLine: baseLine
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    return _this;
	  }

	  _createClass$u(Area, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          points = _this$props.points,
	          baseLine = _this$props.baseLine;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevData(points, baseLine);
	      }
	    }
	  }, {
	    key: "renderDots",
	    value: function renderDots(needClip, clipPathId) {
	      var _this2 = this;

	      var isAnimationActive = this.props.isAnimationActive;
	      var isAnimationFinished = this.state.isAnimationFinished;

	      if (isAnimationActive && !isAnimationFinished) {
	        return null;
	      }

	      var _this$props2 = this.props,
	          dot = _this$props2.dot,
	          points = _this$props2.points,
	          dataKey = _this$props2.dataKey;
	      var areaProps = getPresentationAttributes(this.props);
	      var customDotProps = getPresentationAttributes(dot);
	      var dotEvents = filterEventAttributes(dot);
	      var dots = points.map(function (entry, i) {
	        var dotProps = _objectSpread$y({
	          key: "dot-".concat(i),
	          r: 3
	        }, areaProps, {}, customDotProps, {}, dotEvents, {
	          dataKey: dataKey,
	          cx: entry.x,
	          cy: entry.y,
	          index: i,
	          value: entry.value,
	          payload: entry.payload
	        });

	        return _this2.constructor.renderDotItem(dot, dotProps);
	      });
	      var dotsProps = {
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
	      };
	      return react.createElement(Layer, _extends$t({
	        className: "recharts-area-dots"
	      }, dotsProps), dots);
	    }
	  }, {
	    key: "renderHorizontalRect",
	    value: function renderHorizontalRect(alpha) {
	      var _this$props3 = this.props,
	          baseLine = _this$props3.baseLine,
	          points = _this$props3.points,
	          strokeWidth = _this$props3.strokeWidth;
	      var startX = points[0].x;
	      var endX = points[points.length - 1].x;
	      var width = alpha * Math.abs(startX - endX);

	      var maxY = max_1(points.map(function (entry) {
	        return entry.y || 0;
	      }));

	      if (isNumber$3(baseLine)) {
	        maxY = Math.max(baseLine, maxY);
	      } else if (baseLine && isArray_1(baseLine) && baseLine.length) {
	        maxY = Math.max(max_1(baseLine.map(function (entry) {
	          return entry.y || 0;
	        })), maxY);
	      }

	      if (isNumber$3(maxY)) {
	        return react.createElement("rect", {
	          x: startX < endX ? startX : startX - width,
	          y: 0,
	          width: width,
	          height: parseInt(maxY + (strokeWidth || 1), 10)
	        });
	      }

	      return null;
	    }
	  }, {
	    key: "renderVerticalRect",
	    value: function renderVerticalRect(alpha) {
	      var _this$props4 = this.props,
	          baseLine = _this$props4.baseLine,
	          points = _this$props4.points,
	          strokeWidth = _this$props4.strokeWidth;
	      var startY = points[0].y;
	      var endY = points[points.length - 1].y;
	      var height = alpha * Math.abs(startY - endY);

	      var maxX = max_1(points.map(function (entry) {
	        return entry.x || 0;
	      }));

	      if (isNumber$3(baseLine)) {
	        maxX = Math.max(baseLine, maxX);
	      } else if (baseLine && isArray_1(baseLine) && baseLine.length) {
	        maxX = Math.max(max_1(baseLine.map(function (entry) {
	          return entry.x || 0;
	        })), maxX);
	      }

	      if (isNumber$3(maxX)) {
	        return react.createElement("rect", {
	          x: 0,
	          y: startY < endY ? startY : startY - height,
	          width: maxX + (strokeWidth || 1),
	          height: parseInt(height, 10)
	        });
	      }

	      return null;
	    }
	  }, {
	    key: "renderClipRect",
	    value: function renderClipRect(alpha) {
	      var layout = this.props.layout;

	      if (layout === 'vertical') {
	        return this.renderVerticalRect(alpha);
	      }

	      return this.renderHorizontalRect(alpha);
	    }
	  }, {
	    key: "renderAreaStatically",
	    value: function renderAreaStatically(points, baseLine, needClip, clipPathId) {
	      var _this$props5 = this.props,
	          layout = _this$props5.layout,
	          type = _this$props5.type,
	          stroke = _this$props5.stroke,
	          connectNulls = _this$props5.connectNulls,
	          isRange = _this$props5.isRange;
	      return react.createElement(Layer, {
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
	      }, react.createElement(Curve, _extends$t({}, this.props, {
	        points: points,
	        baseLine: baseLine,
	        stroke: "none",
	        className: "recharts-area-area"
	      })), stroke !== 'none' && react.createElement(Curve, _extends$t({}, getPresentationAttributes(this.props), {
	        className: "recharts-area-curve",
	        layout: layout,
	        type: type,
	        connectNulls: connectNulls,
	        fill: "none",
	        points: points
	      })), stroke !== 'none' && isRange && react.createElement(Curve, _extends$t({}, getPresentationAttributes(this.props), {
	        className: "recharts-area-curve",
	        layout: layout,
	        type: type,
	        connectNulls: connectNulls,
	        fill: "none",
	        points: baseLine
	      })));
	    }
	  }, {
	    key: "renderAreaWithAnimation",
	    value: function renderAreaWithAnimation(needClip, clipPathId) {
	      var _this3 = this;

	      var _this$props6 = this.props,
	          points = _this$props6.points,
	          baseLine = _this$props6.baseLine,
	          isAnimationActive = _this$props6.isAnimationActive,
	          animationBegin = _this$props6.animationBegin,
	          animationDuration = _this$props6.animationDuration,
	          animationEasing = _this$props6.animationEasing,
	          animationId = _this$props6.animationId;
	      var _this$state = this.state,
	          prevPoints = _this$state.prevPoints,
	          prevBaseLine = _this$state.prevBaseLine; // const clipPathId = _.isNil(id) ? this.id : id;

	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "area-".concat(animationId),
	        onAnimationEnd: this.handleAnimationEnd,
	        onAnimationStart: this.handleAnimationStart
	      }, function (_ref) {
	        var t = _ref.t;

	        if (prevPoints) {
	          var prevPointsDiffFactor = prevPoints.length / points.length; // update animtaion

	          var stepPoints = points.map(function (entry, index) {
	            var prevPointIndex = Math.floor(index * prevPointsDiffFactor);

	            if (prevPoints[prevPointIndex]) {
	              var prev = prevPoints[prevPointIndex];
	              var interpolatorX = interpolateNumber(prev.x, entry.x);
	              var interpolatorY = interpolateNumber(prev.y, entry.y);
	              return _objectSpread$y({}, entry, {
	                x: interpolatorX(t),
	                y: interpolatorY(t)
	              });
	            }

	            return entry;
	          });
	          var stepBaseLine;

	          if (isNumber$3(baseLine)) {
	            var interpolator = interpolateNumber(prevBaseLine, baseLine);
	            stepBaseLine = interpolator(t);
	          } else if (isNil_1(baseLine) || _isNaN(baseLine)) {
	            var _interpolator = interpolateNumber(prevBaseLine, 0);

	            stepBaseLine = _interpolator(t);
	          } else {
	            stepBaseLine = baseLine.map(function (entry, index) {
	              var prevPointIndex = Math.floor(index * prevPointsDiffFactor);

	              if (prevBaseLine[prevPointIndex]) {
	                var prev = prevBaseLine[prevPointIndex];
	                var interpolatorX = interpolateNumber(prev.x, entry.x);
	                var interpolatorY = interpolateNumber(prev.y, entry.y);
	                return _objectSpread$y({}, entry, {
	                  x: interpolatorX(t),
	                  y: interpolatorY(t)
	                });
	              }

	              return entry;
	            });
	          }

	          return _this3.renderAreaStatically(stepPoints, stepBaseLine, needClip, clipPathId);
	        }

	        return react.createElement(Layer, null, react.createElement("defs", null, react.createElement("clipPath", {
	          id: "animationClipPath-".concat(clipPathId)
	        }, _this3.renderClipRect(t))), react.createElement(Layer, {
	          clipPath: "url(#animationClipPath-".concat(clipPathId, ")")
	        }, _this3.renderAreaStatically(points, baseLine, needClip, clipPathId)));
	      });
	    }
	  }, {
	    key: "renderArea",
	    value: function renderArea(needClip, clipPathId) {
	      var _this$props7 = this.props,
	          points = _this$props7.points,
	          baseLine = _this$props7.baseLine,
	          isAnimationActive = _this$props7.isAnimationActive;
	      var _this$state2 = this.state,
	          prevPoints = _this$state2.prevPoints,
	          prevBaseLine = _this$state2.prevBaseLine,
	          totalLength = _this$state2.totalLength;

	      if (isAnimationActive && points && points.length && (!prevPoints && totalLength > 0 || !isEqual_1(prevPoints, points) || !isEqual_1(prevBaseLine, baseLine))) {
	        return this.renderAreaWithAnimation(needClip, clipPathId);
	      }

	      return this.renderAreaStatically(points, baseLine, needClip, clipPathId);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props8 = this.props,
	          hide = _this$props8.hide,
	          dot = _this$props8.dot,
	          points = _this$props8.points,
	          className = _this$props8.className,
	          top = _this$props8.top,
	          left = _this$props8.left,
	          xAxis = _this$props8.xAxis,
	          yAxis = _this$props8.yAxis,
	          width = _this$props8.width,
	          height = _this$props8.height,
	          isAnimationActive = _this$props8.isAnimationActive,
	          id = _this$props8.id;

	      if (hide || !points || !points.length) {
	        return null;
	      }

	      var isAnimationFinished = this.state.isAnimationFinished;
	      var hasSinglePoint = points.length === 1;
	      var layerClass = classnames('recharts-area', className);
	      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;
	      var clipPathId = isNil_1(id) ? this.id : id;
	      return react.createElement(Layer, {
	        className: layerClass
	      }, needClip ? react.createElement("defs", null, react.createElement("clipPath", {
	        id: "clipPath-".concat(clipPathId)
	      }, react.createElement("rect", {
	        x: left,
	        y: top,
	        width: width,
	        height: parseInt(height, 10)
	      }))) : null, !hasSinglePoint ? this.renderArea(needClip, clipPathId) : null, (dot || hasSinglePoint) && this.renderDots(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));
	    }
	  }]);

	  return Area;
	}(react_4);

	Area.displayName = 'Area';
	Area.propTypes = _objectSpread$y({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  type: propTypes.oneOfType([propTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), propTypes.func]),
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  yAxis: propTypes.object,
	  xAxis: propTypes.object,
	  stackId: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  connectNulls: propTypes.bool,
	  activeDot: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func, propTypes.bool]),
	  // dot configuration
	  dot: propTypes.oneOfType([propTypes.func, propTypes.element, propTypes.object, propTypes.bool]),
	  label: propTypes.oneOfType([propTypes.func, propTypes.element, propTypes.object, propTypes.bool]),
	  hide: propTypes.bool,
	  // have curve configuration
	  layout: propTypes.oneOf(['horizontal', 'vertical']),
	  baseLine: propTypes.oneOfType([propTypes.number, propTypes.array]),
	  isRange: propTypes.bool,
	  points: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    value: propTypes.oneOfType([propTypes.number, propTypes.array])
	  })),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  animationId: propTypes.number,
	  isAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
	  id: propTypes.string
	});
	Area.defaultProps = {
	  stroke: '#3182bd',
	  fill: '#3182bd',
	  fillOpacity: 0.6,
	  xAxisId: 0,
	  yAxisId: 0,
	  legendType: 'line',
	  connectNulls: false,
	  // points of area
	  points: [],
	  dot: false,
	  activeDot: true,
	  hide: false,
	  isAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease'
	};

	Area.getBaseValue = function (props, xAxis, yAxis) {
	  var layout = props.layout,
	      baseValue = props.baseValue;

	  if (isNumber$3(baseValue)) {
	    return baseValue;
	  }

	  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;
	  var domain = numericAxis.scale.domain();

	  if (numericAxis.type === 'number') {
	    var max = Math.max(domain[0], domain[1]);
	    var min = Math.min(domain[0], domain[1]);

	    if (baseValue === 'dataMin') {
	      return min;
	    }

	    if (baseValue === 'dataMax') {
	      return max;
	    }

	    return max < 0 ? max : Math.max(Math.min(domain[0], domain[1]), 0);
	  }

	  if (baseValue === 'dataMin') {
	    return domain[0];
	  }

	  if (baseValue === 'dataMax') {
	    return domain[1];
	  }

	  return domain[0];
	};

	Area.getComposedData = function (_ref2) {
	  var props = _ref2.props,
	      xAxis = _ref2.xAxis,
	      yAxis = _ref2.yAxis,
	      xAxisTicks = _ref2.xAxisTicks,
	      yAxisTicks = _ref2.yAxisTicks,
	      bandSize = _ref2.bandSize,
	      dataKey = _ref2.dataKey,
	      stackedData = _ref2.stackedData,
	      dataStartIndex = _ref2.dataStartIndex,
	      displayedData = _ref2.displayedData,
	      offset = _ref2.offset;
	  var layout = props.layout;
	  var hasStack = stackedData && stackedData.length;
	  var baseValue = Area.getBaseValue(props, xAxis, yAxis);
	  var isRange = false;
	  var points = displayedData.map(function (entry, index) {
	    var value;

	    if (hasStack) {
	      value = stackedData[dataStartIndex + index];
	    } else {
	      value = getValueByDataKey(entry, dataKey);

	      if (!isArray_1(value)) {
	        value = [baseValue, value];
	      } else {
	        isRange = true;
	      }
	    }

	    if (layout === 'horizontal') {
	      return {
	        x: getCateCoordinateOfLine({
	          axis: xAxis,
	          ticks: xAxisTicks,
	          bandSize: bandSize,
	          entry: entry,
	          index: index
	        }),
	        y: isNil_1(value[1]) ? null : yAxis.scale(value[1]),
	        value: value,
	        payload: entry
	      };
	    }

	    return {
	      x: isNil_1(value[1]) ? null : xAxis.scale(value[1]),
	      y: getCateCoordinateOfLine({
	        axis: yAxis,
	        ticks: yAxisTicks,
	        bandSize: bandSize,
	        entry: entry,
	        index: index
	      }),
	      value: value,
	      payload: entry
	    };
	  });
	  var baseLine;

	  if (hasStack || isRange) {
	    baseLine = points.map(function (entry) {
	      if (layout === 'horizontal') {
	        return {
	          x: entry.x,
	          y: !isNil_1(get_1(entry, 'value[0]')) ? yAxis.scale(get_1(entry, 'value[0]')) : null
	        };
	      }

	      return {
	        x: !isNil_1(get_1(entry, 'value[0]')) ? xAxis.scale(get_1(entry, 'value[0]')) : null,
	        y: entry.y
	      };
	    });
	  } else if (layout === 'horizontal') {
	    baseLine = yAxis.scale(baseValue);
	  } else {
	    baseLine = xAxis.scale(baseValue);
	  }

	  return _objectSpread$y({
	    points: points,
	    baseLine: baseLine,
	    layout: layout,
	    isRange: isRange
	  }, offset);
	};

	Area.renderDotItem = function (option, props) {
	  var dotItem;

	  if (react.isValidElement(option)) {
	    dotItem = react.cloneElement(option, props);
	  } else if (isFunction_1(option)) {
	    dotItem = option(props);
	  } else {
	    dotItem = react.createElement(Dot, _extends$t({}, props, {
	      className: "recharts-area-dot"
	    }));
	  }

	  return dotItem;
	};

	function _typeof$x(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$x = function _typeof(obj) { return typeof obj; }; } else { _typeof$x = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$x(obj); }

	function _objectWithoutProperties$d(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$e(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$e(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends$u() { _extends$u = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$u.apply(this, arguments); }

	function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$w(source, true).forEach(function (key) { _defineProperty$D(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$w(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$D(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$v(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$v(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$v(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$v(Constructor.prototype, protoProps); if (staticProps) _defineProperties$v(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$u(self, call) { if (call && (_typeof$x(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$v(self); }

	function _assertThisInitialized$v(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$u(o) { _getPrototypeOf$u = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$u(o); }

	function _inherits$u(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$u(subClass, superClass); }

	function _setPrototypeOf$u(o, p) { _setPrototypeOf$u = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$u(o, p); }

	var Bar =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$u(Bar, _PureComponent);

	  function Bar() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$v(this, Bar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$u(this, (_getPrototypeOf2 = _getPrototypeOf$u(Bar)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };
	    _this.id = uniqueId('recharts-bar-');

	    _this.cachePrevData = function (data) {
	      _this.setState({
	        prevData: data
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      _this.setState({
	        isAnimationFinished: true
	      });

	      _this.props.onAnimationEnd();
	    };

	    _this.handleAnimationStart = function () {
	      _this.setState({
	        isAnimationFinished: false
	      });

	      _this.props.onAnimationStart();
	    };

	    return _this;
	  }

	  _createClass$v(Bar, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          data = _this$props.data;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevData(data);
	      }
	    }
	  }, {
	    key: "renderRectanglesStatically",
	    value: function renderRectanglesStatically(data) {
	      var _this2 = this;

	      var shape = this.props.shape;
	      var baseProps = getPresentationAttributes(this.props);
	      return data && data.map(function (entry, i) {
	        var props = _objectSpread$z({}, baseProps, {}, entry, {
	          index: i
	        });

	        return react.createElement(Layer, _extends$u({
	          className: "recharts-bar-rectangle"
	        }, filterEventsOfChild(_this2.props, entry, i), {
	          key: "rectangle-".concat(i) // eslint-disable-line react/no-array-index-key

	        }), _this2.constructor.renderRectangle(shape, props));
	      });
	    }
	  }, {
	    key: "renderRectanglesWithAnimation",
	    value: function renderRectanglesWithAnimation() {
	      var _this3 = this;

	      var _this$props2 = this.props,
	          data = _this$props2.data,
	          layout = _this$props2.layout,
	          isAnimationActive = _this$props2.isAnimationActive,
	          animationBegin = _this$props2.animationBegin,
	          animationDuration = _this$props2.animationDuration,
	          animationEasing = _this$props2.animationEasing,
	          animationId = _this$props2.animationId;
	      var prevData = this.state.prevData;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "bar-".concat(animationId),
	        onAnimationEnd: this.handleAnimationEnd,
	        onAnimationStart: this.handleAnimationStart
	      }, function (_ref) {
	        var t = _ref.t;
	        var stepData = data.map(function (entry, index) {
	          var prev = prevData && prevData[index];

	          if (prev) {
	            var interpolatorX = interpolateNumber(prev.x, entry.x);
	            var interpolatorY = interpolateNumber(prev.y, entry.y);
	            var interpolatorWidth = interpolateNumber(prev.width, entry.width);
	            var interpolatorHeight = interpolateNumber(prev.height, entry.height);
	            return _objectSpread$z({}, entry, {
	              x: interpolatorX(t),
	              y: interpolatorY(t),
	              width: interpolatorWidth(t),
	              height: interpolatorHeight(t)
	            });
	          }

	          if (layout === 'horizontal') {
	            var _interpolatorHeight = interpolateNumber(0, entry.height);

	            var h = _interpolatorHeight(t);

	            return _objectSpread$z({}, entry, {
	              y: entry.y + entry.height - h,
	              height: h
	            });
	          }

	          var interpolator = interpolateNumber(0, entry.width);
	          var w = interpolator(t);
	          return _objectSpread$z({}, entry, {
	            width: w
	          });
	        });
	        return react.createElement(Layer, null, _this3.renderRectanglesStatically(stepData));
	      });
	    }
	  }, {
	    key: "renderRectangles",
	    value: function renderRectangles() {
	      var _this$props3 = this.props,
	          data = _this$props3.data,
	          isAnimationActive = _this$props3.isAnimationActive;
	      var prevData = this.state.prevData;

	      if (isAnimationActive && data && data.length && (!prevData || !isEqual_1(prevData, data))) {
	        return this.renderRectanglesWithAnimation();
	      }

	      return this.renderRectanglesStatically(data);
	    }
	  }, {
	    key: "renderBackground",
	    value: function renderBackground() {
	      var _this4 = this;

	      var data = this.props.data;
	      var backgroundProps = getPresentationAttributes(this.props.background);
	      return data.map(function (entry, i) {
	        // eslint-disable-next-line no-unused-vars
	        var value = entry.value,
	            background = entry.background,
	            rest = _objectWithoutProperties$d(entry, ["value", "background"]);

	        if (!background) {
	          return null;
	        }

	        var props = _objectSpread$z({}, rest, {
	          fill: '#eee'
	        }, background, {}, backgroundProps, {}, filterEventsOfChild(_this4.props, entry, i), {
	          index: i,
	          key: "background-bar-".concat(i),
	          className: 'recharts-bar-background-rectangle'
	        });

	        return _this4.constructor.renderRectangle(_this4.props.background, props);
	      });
	    }
	  }, {
	    key: "renderErrorBar",
	    value: function renderErrorBar() {
	      if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
	        return null;
	      }

	      var _this$props4 = this.props,
	          data = _this$props4.data,
	          xAxis = _this$props4.xAxis,
	          yAxis = _this$props4.yAxis,
	          layout = _this$props4.layout,
	          children = _this$props4.children;
	      var errorBarItems = findAllByType(children, ErrorBar);

	      if (!errorBarItems) {
	        return null;
	      }

	      var offset = layout === 'vertical' ? data[0].height / 2 : data[0].width / 2;

	      function dataPointFormatter(dataPoint, dataKey) {
	        return {
	          x: dataPoint.x,
	          y: dataPoint.y,
	          value: dataPoint.value,
	          errorVal: getValueByDataKey(dataPoint, dataKey)
	        };
	      }

	      return errorBarItems.map(function (item, i) {
	        return react.cloneElement(item, {
	          key: "error-bar-".concat(i),
	          // eslint-disable-line react/no-array-index-key
	          data: data,
	          xAxis: xAxis,
	          yAxis: yAxis,
	          layout: layout,
	          offset: offset,
	          dataPointFormatter: dataPointFormatter
	        });
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props5 = this.props,
	          hide = _this$props5.hide,
	          data = _this$props5.data,
	          className = _this$props5.className,
	          xAxis = _this$props5.xAxis,
	          yAxis = _this$props5.yAxis,
	          left = _this$props5.left,
	          top = _this$props5.top,
	          width = _this$props5.width,
	          height = _this$props5.height,
	          isAnimationActive = _this$props5.isAnimationActive,
	          background = _this$props5.background,
	          id = _this$props5.id;

	      if (hide || !data || !data.length) {
	        return null;
	      }

	      var isAnimationFinished = this.state.isAnimationFinished;
	      var layerClass = classnames('recharts-bar', className);
	      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;
	      var clipPathId = isNil_1(id) ? this.id : id;
	      return react.createElement(Layer, {
	        className: layerClass
	      }, needClip ? react.createElement("defs", null, react.createElement("clipPath", {
	        id: "clipPath-".concat(clipPathId)
	      }, react.createElement("rect", {
	        x: left,
	        y: top,
	        width: width,
	        height: height
	      }))) : null, react.createElement(Layer, {
	        className: "recharts-bar-rectangles",
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
	      }, background ? this.renderBackground() : null, this.renderRectangles()), this.renderErrorBar(), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, data));
	    }
	  }], [{
	    key: "renderRectangle",
	    value: function renderRectangle(option, props) {
	      var rectangle;

	      if (react.isValidElement(option)) {
	        rectangle = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        rectangle = option(props);
	      } else {
	        rectangle = react.createElement(Rectangle, props);
	      }

	      return rectangle;
	    }
	  }]);

	  return Bar;
	}(react_4);

	Bar.displayName = 'Bar';
	Bar.propTypes = _objectSpread$z({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  layout: propTypes.oneOf(['vertical', 'horizontal']),
	  xAxisId: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  yAxisId: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  yAxis: propTypes.object,
	  xAxis: propTypes.object,
	  stackId: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  barSize: propTypes.number,
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  minPointSize: propTypes.number,
	  maxBarSize: propTypes.number,
	  hide: propTypes.bool,
	  shape: propTypes.oneOfType([propTypes.func, propTypes.element]),
	  data: propTypes.arrayOf(propTypes.shape({
	    x: propTypes.number,
	    y: propTypes.number,
	    width: propTypes.number,
	    height: propTypes.number,
	    radius: propTypes.oneOfType([propTypes.number, propTypes.array]),
	    value: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.array])
	  })),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  animationId: propTypes.number,
	  isAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
	  id: propTypes.string
	});
	Bar.defaultProps = {
	  xAxisId: 0,
	  yAxisId: 0,
	  legendType: 'rect',
	  minPointSize: 0,
	  hide: false,
	  // data of bar
	  data: [],
	  layout: 'vertical',
	  isAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 400,
	  animationEasing: 'ease',
	  onAnimationStart: function onAnimationStart() {},
	  onAnimationEnd: function onAnimationEnd() {}
	};

	Bar.getComposedData = function (_ref2) {
	  var props = _ref2.props,
	      item = _ref2.item,
	      barPosition = _ref2.barPosition,
	      bandSize = _ref2.bandSize,
	      xAxis = _ref2.xAxis,
	      yAxis = _ref2.yAxis,
	      xAxisTicks = _ref2.xAxisTicks,
	      yAxisTicks = _ref2.yAxisTicks,
	      stackedData = _ref2.stackedData,
	      dataStartIndex = _ref2.dataStartIndex,
	      displayedData = _ref2.displayedData,
	      offset = _ref2.offset;
	  var pos = findPositionOfBar(barPosition, item);

	  if (!pos) {
	    return [];
	  }

	  var layout = props.layout;
	  var _item$props = item.props,
	      dataKey = _item$props.dataKey,
	      children = _item$props.children,
	      minPointSize = _item$props.minPointSize;
	  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;
	  var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
	  var baseValue = getBaseValueOfBar({
	    props: props,
	    numericAxis: numericAxis
	  });
	  var cells = findAllByType(children, Cell);
	  var rects = displayedData.map(function (entry, index) {
	    var value, x, y, width, height, background;

	    if (stackedData) {
	      value = truncateByDomain(stackedData[dataStartIndex + index], stackedDomain);
	    } else {
	      value = getValueByDataKey(entry, dataKey);

	      if (!isArray_1(value)) {
	        value = [baseValue, value];
	      }
	    }

	    if (layout === 'horizontal') {
	      x = getCateCoordinateOfBar({
	        axis: xAxis,
	        ticks: xAxisTicks,
	        bandSize: bandSize,
	        offset: pos.offset,
	        entry: entry,
	        index: index
	      });
	      y = yAxis.scale(value[1]);
	      width = pos.size;
	      height = yAxis.scale(value[0]) - yAxis.scale(value[1]);
	      background = {
	        x: x,
	        y: yAxis.y,
	        width: width,
	        height: yAxis.height
	      };

	      if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
	        var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
	        y -= delta;
	        height += delta;
	      }
	    } else {
	      x = xAxis.scale(value[0]);
	      y = getCateCoordinateOfBar({
	        axis: yAxis,
	        ticks: yAxisTicks,
	        bandSize: bandSize,
	        offset: pos.offset,
	        entry: entry,
	        index: index
	      });
	      width = xAxis.scale(value[1]) - xAxis.scale(value[0]);
	      height = pos.size;
	      background = {
	        x: xAxis.x,
	        y: y,
	        width: xAxis.width,
	        height: height
	      };

	      if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
	        var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));

	        width += _delta;
	      }
	    }

	    return _objectSpread$z({}, entry, {
	      x: x,
	      y: y,
	      width: width,
	      height: height,
	      value: stackedData ? value : value[1],
	      payload: entry,
	      background: background
	    }, cells && cells[index] && cells[index].props);
	  });
	  return _objectSpread$z({
	    data: rects,
	    layout: layout
	  }, offset);
	};

	function _typeof$y(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$y = function _typeof(obj) { return typeof obj; }; } else { _typeof$y = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$y(obj); }

	function _classCallCheck$w(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$w(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$w(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$w(Constructor.prototype, protoProps); if (staticProps) _defineProperties$w(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$v(self, call) { if (call && (_typeof$y(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$w(self); }

	function _assertThisInitialized$w(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$v(o) { _getPrototypeOf$v = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$v(o); }

	function _inherits$v(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$v(subClass, superClass); }

	function _setPrototypeOf$v(o, p) { _setPrototypeOf$v = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$v(o, p); }

	var ZAxis =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$v(ZAxis, _PureComponent);

	  function ZAxis() {
	    _classCallCheck$w(this, ZAxis);

	    return _possibleConstructorReturn$v(this, _getPrototypeOf$v(ZAxis).apply(this, arguments));
	  }

	  _createClass$w(ZAxis, [{
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return ZAxis;
	}(react_4);

	ZAxis.displayName = 'ZAxis';
	ZAxis.propTypes = {
	  type: propTypes.oneOf(['number', 'category']),
	  // The name of data displayed in the axis
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unit of data displayed in the axis
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unique id of z-axis
	  zAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The key of data displayed in the axis
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  // The range of axis
	  range: propTypes.arrayOf(propTypes.number),
	  scale: propTypes.oneOfType([propTypes.oneOf(['auto', 'linear', 'pow', 'sqrt', 'log', 'identity', 'time', 'band', 'point', 'ordinal', 'quantile', 'quantize', 'utc', 'sequential', 'threshold']), propTypes.func])
	};
	ZAxis.defaultProps = {
	  zAxisId: 0,
	  range: [64, 64],
	  scale: 'auto',
	  type: 'number'
	};

	function _typeof$z(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$z = function _typeof(obj) { return typeof obj; }; } else { _typeof$z = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$z(obj); }

	function _extends$v() { _extends$v = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$v.apply(this, arguments); }

	function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$x(source, true).forEach(function (key) { _defineProperty$E(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$x(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$E(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$x(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$x(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$x(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$x(Constructor.prototype, protoProps); if (staticProps) _defineProperties$x(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$w(self, call) { if (call && (_typeof$z(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$x(self); }

	function _assertThisInitialized$x(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$w(o) { _getPrototypeOf$w = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$w(o); }

	function _inherits$w(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$w(subClass, superClass); }

	function _setPrototypeOf$w(o, p) { _setPrototypeOf$w = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$w(o, p); }

	var Scatter =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$w(Scatter, _PureComponent);

	  function Scatter() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$x(this, Scatter);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$w(this, (_getPrototypeOf2 = _getPrototypeOf$w(Scatter)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };

	    _this.cachePrevPoints = function (points) {
	      _this.setState({
	        prevPoints: points
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      _this.setState({
	        isAnimationFinished: true
	      });
	    };

	    _this.handleAnimationStart = function () {
	      _this.setState({
	        isAnimationFinished: false
	      });
	    };

	    _this.id = uniqueId('recharts-scatter-');
	    return _this;
	  }

	  _createClass$x(Scatter, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          points = _this$props.points;

	      if (nextProps.animationId !== animationId) {
	        this.cachePrevPoints(points);
	      }
	    }
	  }, {
	    key: "renderSymbolsStatically",
	    value: function renderSymbolsStatically(points) {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          shape = _this$props2.shape,
	          activeShape = _this$props2.activeShape,
	          activeIndex = _this$props2.activeIndex;
	      var baseProps = getPresentationAttributes(this.props);
	      return points.map(function (entry, i) {
	        var props = _objectSpread$A({
	          key: "symbol-".concat(i)
	        }, baseProps, {}, entry);

	        return react.createElement(Layer, _extends$v({
	          className: "recharts-scatter-symbol"
	        }, filterEventsOfChild(_this2.props, entry, i), {
	          key: "symbol-".concat(i) // eslint-disable-line react/no-array-index-key

	        }), _this2.constructor.renderSymbolItem(activeIndex === i ? activeShape : shape, props));
	      });
	    }
	  }, {
	    key: "renderSymbolsWithAnimation",
	    value: function renderSymbolsWithAnimation() {
	      var _this3 = this;

	      var _this$props3 = this.props,
	          points = _this$props3.points,
	          isAnimationActive = _this$props3.isAnimationActive,
	          animationBegin = _this$props3.animationBegin,
	          animationDuration = _this$props3.animationDuration,
	          animationEasing = _this$props3.animationEasing,
	          animationId = _this$props3.animationId;
	      var prevPoints = this.state.prevPoints;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "pie-".concat(animationId),
	        onAnimationEnd: this.handleAnimationEnd,
	        onAnimationStart: this.handleAnimationStart
	      }, function (_ref) {
	        var t = _ref.t;
	        var stepData = points.map(function (entry, index) {
	          var prev = prevPoints && prevPoints[index];

	          if (prev) {
	            var interpolatorCx = interpolateNumber(prev.cx, entry.cx);
	            var interpolatorCy = interpolateNumber(prev.cy, entry.cy);
	            var interpolatorSize = interpolateNumber(prev.size, entry.size);
	            return _objectSpread$A({}, entry, {
	              cx: interpolatorCx(t),
	              cy: interpolatorCy(t),
	              size: interpolatorSize(t)
	            });
	          }

	          var interpolator = interpolateNumber(0, entry.size);
	          return _objectSpread$A({}, entry, {
	            size: interpolator(t)
	          });
	        });
	        return react.createElement(Layer, null, _this3.renderSymbolsStatically(stepData));
	      });
	    }
	  }, {
	    key: "renderSymbols",
	    value: function renderSymbols() {
	      var _this$props4 = this.props,
	          points = _this$props4.points,
	          isAnimationActive = _this$props4.isAnimationActive;
	      var prevPoints = this.state.prevPoints;

	      if (isAnimationActive && points && points.length && (!prevPoints || !isEqual_1(prevPoints, points))) {
	        return this.renderSymbolsWithAnimation();
	      }

	      return this.renderSymbolsStatically(points);
	    }
	  }, {
	    key: "renderErrorBar",
	    value: function renderErrorBar() {
	      var isAnimationActive = this.props.isAnimationActive;

	      if (isAnimationActive && !this.state.isAnimationFinished) {
	        return null;
	      }

	      var _this$props5 = this.props,
	          points = _this$props5.points,
	          xAxis = _this$props5.xAxis,
	          yAxis = _this$props5.yAxis,
	          children = _this$props5.children;
	      var errorBarItems = findAllByType(children, ErrorBar);

	      if (!errorBarItems) {
	        return null;
	      }

	      function dataPointFormatterY(dataPoint, dataKey) {
	        return {
	          x: dataPoint.cx,
	          y: dataPoint.cy,
	          value: dataPoint.node.y,
	          errorVal: getValueByDataKey(dataPoint, dataKey)
	        };
	      }

	      function dataPointFormatterX(dataPoint, dataKey) {
	        return {
	          x: dataPoint.cx,
	          y: dataPoint.cy,
	          value: dataPoint.node.x,
	          errorVal: getValueByDataKey(dataPoint, dataKey)
	        };
	      }

	      return errorBarItems.map(function (item, i) {
	        var direction = item.props.direction;
	        return react.cloneElement(item, {
	          key: i,
	          // eslint-disable-line react/no-array-index-key
	          data: points,
	          xAxis: xAxis,
	          yAxis: yAxis,
	          layout: direction === 'x' ? 'vertical' : 'horizontal',
	          dataPointFormatter: direction === 'x' ? dataPointFormatterX : dataPointFormatterY
	        });
	      });
	    }
	  }, {
	    key: "renderLine",
	    value: function renderLine() {
	      var _this$props6 = this.props,
	          points = _this$props6.points,
	          line = _this$props6.line,
	          lineType = _this$props6.lineType,
	          lineJointType = _this$props6.lineJointType;
	      var scatterProps = getPresentationAttributes(this.props);
	      var customLineProps = getPresentationAttributes(line);
	      var linePoints, lineItem;

	      if (lineType === 'joint') {
	        linePoints = points.map(function (entry) {
	          return {
	            x: entry.cx,
	            y: entry.cy
	          };
	        });
	      } else if (lineType === 'fitting') {
	        var _getLinearRegression = getLinearRegression(points),
	            xmin = _getLinearRegression.xmin,
	            xmax = _getLinearRegression.xmax,
	            a = _getLinearRegression.a,
	            b = _getLinearRegression.b;

	        var linearExp = function linearExp(x) {
	          return a * x + b;
	        };

	        linePoints = [{
	          x: xmin,
	          y: linearExp(xmin)
	        }, {
	          x: xmax,
	          y: linearExp(xmax)
	        }];
	      }

	      var lineProps = _objectSpread$A({}, scatterProps, {
	        fill: 'none',
	        stroke: scatterProps && scatterProps.fill
	      }, customLineProps, {
	        points: linePoints
	      });

	      if (react.isValidElement(line)) {
	        lineItem = react.cloneElement(line, lineProps);
	      } else if (isFunction_1(line)) {
	        lineItem = line(lineProps);
	      } else {
	        lineItem = react.createElement(Curve, _extends$v({}, lineProps, {
	          type: lineJointType
	        }));
	      }

	      return react.createElement(Layer, {
	        className: "recharts-scatter-line",
	        key: "recharts-scatter-line"
	      }, lineItem);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          hide = _this$props7.hide,
	          points = _this$props7.points,
	          line = _this$props7.line,
	          className = _this$props7.className,
	          xAxis = _this$props7.xAxis,
	          yAxis = _this$props7.yAxis,
	          left = _this$props7.left,
	          top = _this$props7.top,
	          width = _this$props7.width,
	          height = _this$props7.height,
	          id = _this$props7.id;

	      if (hide || !points || !points.length) {
	        return null;
	      }

	      var _this$state = this.state,
	          isAnimationActive = _this$state.isAnimationActive,
	          isAnimationFinished = _this$state.isAnimationFinished;
	      var layerClass = classnames('recharts-scatter', className);
	      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;
	      var clipPathId = isNil_1(id) ? this.id : id;
	      return react.createElement(Layer, {
	        className: layerClass,
	        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
	      }, needClip ? react.createElement("defs", null, react.createElement("clipPath", {
	        id: "clipPath-".concat(clipPathId)
	      }, react.createElement("rect", {
	        x: left,
	        y: top,
	        width: width,
	        height: height
	      }))) : null, line && this.renderLine(), this.renderErrorBar(), react.createElement(Layer, {
	        key: "recharts-scatter-symbols"
	      }, this.renderSymbols()), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, points));
	    }
	  }], [{
	    key: "renderSymbolItem",
	    value: function renderSymbolItem(option, props) {
	      var symbol;

	      if (react.isValidElement(option)) {
	        symbol = react.cloneElement(option, props);
	      } else if (isFunction_1(option)) {
	        symbol = option(props);
	      } else {
	        symbol = react.createElement(Symbols, _extends$v({}, props, {
	          type: option
	        }));
	      }

	      return symbol;
	    }
	  }]);

	  return Scatter;
	}(react_4);

	Scatter.displayName = 'Scatter';
	Scatter.propTypes = _objectSpread$A({}, EVENT_ATTRIBUTES, {}, PRESENTATION_ATTRIBUTES, {
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  zAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  line: propTypes.oneOfType([propTypes.bool, propTypes.object, propTypes.func, propTypes.element]),
	  lineType: propTypes.oneOf(['fitting', 'joint']),
	  lineJointType: propTypes.oneOfType([propTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), propTypes.func]),
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  className: propTypes.string,
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  activeIndex: propTypes.number,
	  activeShape: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.element]),
	  shape: propTypes.oneOfType([propTypes.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']), propTypes.element, propTypes.func]),
	  points: propTypes.arrayOf(propTypes.shape({
	    cx: propTypes.number,
	    cy: propTypes.number,
	    size: propTypes.number,
	    node: propTypes.shape({
	      x: propTypes.oneOfType([propTypes.number, propTypes.string]),
	      y: propTypes.oneOfType([propTypes.number, propTypes.string]),
	      z: propTypes.oneOfType([propTypes.number, propTypes.string])
	    }),
	    payload: propTypes.any
	  })),
	  hide: propTypes.bool,
	  isAnimationActive: propTypes.bool,
	  animationId: propTypes.number,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])
	});
	Scatter.defaultProps = {
	  xAxisId: 0,
	  yAxisId: 0,
	  zAxisId: 0,
	  legendType: 'circle',
	  lineType: 'joint',
	  lineJointType: 'linear',
	  data: [],
	  shape: 'circle',
	  hide: false,
	  isAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 400,
	  animationEasing: 'linear'
	};

	Scatter.getComposedData = function (_ref2) {
	  var xAxis = _ref2.xAxis,
	      yAxis = _ref2.yAxis,
	      zAxis = _ref2.zAxis,
	      item = _ref2.item,
	      displayedData = _ref2.displayedData,
	      onItemMouseLeave = _ref2.onItemMouseLeave,
	      onItemMouseEnter = _ref2.onItemMouseEnter,
	      offset = _ref2.offset,
	      xAxisTicks = _ref2.xAxisTicks,
	      yAxisTicks = _ref2.yAxisTicks;
	  var tooltipType = item.props.tooltipType;
	  var cells = findAllByType(item.props.children, Cell);
	  var xAxisDataKey = isNil_1(xAxis.dataKey) ? item.props.dataKey : xAxis.dataKey;
	  var yAxisDataKey = isNil_1(yAxis.dataKey) ? item.props.dataKey : yAxis.dataKey;
	  var zAxisDataKey = zAxis && zAxis.dataKey;
	  var defaultRangeZ = zAxis ? zAxis.range : ZAxis.defaultProps.range;
	  var defaultZ = defaultRangeZ && defaultRangeZ[0];
	  var xBandSize = xAxis.scale.bandwidth ? xAxis.scale.bandwidth() : 0;
	  var yBandSize = yAxis.scale.bandwidth ? yAxis.scale.bandwidth() : 0;
	  var points = displayedData.map(function (entry, index) {
	    var x = entry[xAxisDataKey];
	    var y = entry[yAxisDataKey];
	    var z = !isNil_1(zAxisDataKey) && entry[zAxisDataKey] || '-';
	    var tooltipPayload = [{
	      name: xAxis.name || xAxis.dataKey,
	      unit: xAxis.unit || '',
	      value: x,
	      payload: entry,
	      dataKey: xAxisDataKey,
	      type: tooltipType
	    }, {
	      name: yAxis.name || yAxis.dataKey,
	      unit: yAxis.unit || '',
	      value: y,
	      payload: entry,
	      dataKey: yAxisDataKey,
	      type: tooltipType
	    }];

	    if (z !== '-') {
	      tooltipPayload.push({
	        name: zAxis.name || zAxis.dataKey,
	        unit: zAxis.unit || '',
	        value: z,
	        payload: entry,
	        dataKey: zAxisDataKey,
	        type: tooltipType
	      });
	    }

	    var cx = getCateCoordinateOfLine({
	      axis: xAxis,
	      ticks: xAxisTicks,
	      bandSize: xBandSize,
	      entry: entry,
	      index: index,
	      dataKey: xAxisDataKey
	    });
	    var cy = getCateCoordinateOfLine({
	      axis: yAxis,
	      ticks: yAxisTicks,
	      bandSize: yBandSize,
	      entry: entry,
	      index: index,
	      dataKey: yAxisDataKey
	    });
	    var size = z !== '-' ? zAxis.scale(z) : defaultZ;
	    var radius = Math.sqrt(Math.max(size, 0) / Math.PI);
	    return _objectSpread$A({}, entry, {
	      cx: cx,
	      cy: cy,
	      x: cx - radius,
	      y: cy - radius,
	      xAxis: xAxis,
	      yAxis: yAxis,
	      zAxis: zAxis,
	      width: 2 * radius,
	      height: 2 * radius,
	      size: size,
	      node: {
	        x: x,
	        y: y,
	        z: z
	      },
	      tooltipPayload: tooltipPayload,
	      tooltipPosition: {
	        x: cx,
	        y: cy
	      },
	      payload: entry
	    }, cells && cells[index] && cells[index].props);
	  });
	  return _objectSpread$A({
	    onMouseLeave: onItemMouseLeave,
	    onMouseEnter: onItemMouseEnter,
	    points: points
	  }, offset);
	};

	function _typeof$A(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$A = function _typeof(obj) { return typeof obj; }; } else { _typeof$A = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$A(obj); }

	function _classCallCheck$y(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$y(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$y(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$y(Constructor.prototype, protoProps); if (staticProps) _defineProperties$y(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$x(self, call) { if (call && (_typeof$A(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$y(self); }

	function _assertThisInitialized$y(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$x(o) { _getPrototypeOf$x = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$x(o); }

	function _inherits$x(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$x(subClass, superClass); }

	function _setPrototypeOf$x(o, p) { _setPrototypeOf$x = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$x(o, p); }

	var XAxis =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$x(XAxis, _PureComponent);

	  function XAxis() {
	    _classCallCheck$y(this, XAxis);

	    return _possibleConstructorReturn$x(this, _getPrototypeOf$x(XAxis).apply(this, arguments));
	  }

	  _createClass$y(XAxis, [{
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return XAxis;
	}(react_4);

	XAxis.displayName = 'XAxis';
	XAxis.propTypes = {
	  allowDecimals: propTypes.bool,
	  allowDuplicatedCategory: propTypes.bool,
	  hide: propTypes.bool,
	  // The name of data displayed in the axis
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unit of data displayed in the axis
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unique id of x-axis
	  xAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  domain: propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func, propTypes.oneOf(['auto', 'dataMin', 'dataMax'])])),
	  // The key of data displayed in the axis
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  // The width of axis which is usually calculated internally
	  width: propTypes.number,
	  // The height of axis, which need to be setted by user
	  height: propTypes.number,
	  mirror: propTypes.bool,
	  // The orientation of axis
	  orientation: propTypes.oneOf(['top', 'bottom']),
	  type: propTypes.oneOf(['number', 'category']),
	  // Ticks can be any type when the axis is the type of category
	  // Ticks must be numbers when the axis is the type of number
	  ticks: propTypes.array,
	  // The count of ticks
	  tickCount: propTypes.number,
	  // The formatter function of tick
	  tickFormatter: propTypes.func,
	  padding: propTypes.shape({
	    left: propTypes.number,
	    right: propTypes.number
	  }),
	  allowDataOverflow: propTypes.bool,
	  scale: propTypes.oneOfType([propTypes.oneOf(SCALE_TYPES), propTypes.func]),
	  tick: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.object, propTypes.element]),
	  axisLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  tickLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  minTickGap: propTypes.number,
	  tickSize: propTypes.number,
	  interval: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['preserveStart', 'preserveEnd', 'preserveStartEnd'])]),
	  reversed: propTypes.bool
	};
	XAxis.defaultProps = {
	  allowDecimals: true,
	  hide: false,
	  orientation: 'bottom',
	  width: 0,
	  height: 30,
	  mirror: false,
	  xAxisId: 0,
	  tickCount: 5,
	  type: 'category',
	  domain: [0, 'auto'],
	  padding: {
	    left: 0,
	    right: 0
	  },
	  allowDataOverflow: false,
	  scale: 'auto',
	  reversed: false,
	  allowDuplicatedCategory: true
	};

	function _typeof$B(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$B = function _typeof(obj) { return typeof obj; }; } else { _typeof$B = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$B(obj); }

	function _classCallCheck$z(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$z(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$z(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$z(Constructor.prototype, protoProps); if (staticProps) _defineProperties$z(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$y(self, call) { if (call && (_typeof$B(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$z(self); }

	function _assertThisInitialized$z(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$y(o) { _getPrototypeOf$y = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$y(o); }

	function _inherits$y(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$y(subClass, superClass); }

	function _setPrototypeOf$y(o, p) { _setPrototypeOf$y = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$y(o, p); }

	var YAxis =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$y(YAxis, _PureComponent);

	  function YAxis() {
	    _classCallCheck$z(this, YAxis);

	    return _possibleConstructorReturn$y(this, _getPrototypeOf$y(YAxis).apply(this, arguments));
	  }

	  _createClass$z(YAxis, [{
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return YAxis;
	}(react_4);

	YAxis.displayName = 'YAxis';
	YAxis.propTypes = {
	  allowDecimals: propTypes.bool,
	  allowDuplicatedCategory: propTypes.bool,
	  hide: propTypes.bool,
	  // The name of data displayed in the axis
	  name: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unit of data displayed in the axis
	  unit: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  // The unique id of y-axis
	  yAxisId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	  domain: propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func, propTypes.oneOf(['auto', 'dataMin', 'dataMax'])])),
	  // The key of data displayed in the axis
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  // Ticks can be any type when the axis is the type of category
	  // Ticks must be numbers when the axis is the type of number
	  ticks: propTypes.array,
	  // The count of ticks
	  tickCount: propTypes.number,
	  // The formatter function of tick
	  tickFormatter: propTypes.func,
	  // The width of axis, which need to be setted by user
	  width: propTypes.number,
	  // The height of axis which is usually calculated in Chart
	  height: propTypes.number,
	  mirror: propTypes.bool,
	  // The orientation of axis
	  orientation: propTypes.oneOf(['left', 'right']),
	  type: propTypes.oneOf(['number', 'category']),
	  padding: propTypes.shape({
	    top: propTypes.number,
	    bottom: propTypes.number
	  }),
	  allowDataOverflow: propTypes.bool,
	  scale: propTypes.oneOfType([propTypes.oneOf(['auto', 'linear', 'pow', 'sqrt', 'log', 'identity', 'time', 'band', 'point', 'ordinal', 'quantile', 'quantize', 'utc', 'sequential', 'threshold']), propTypes.func]),
	  tick: propTypes.oneOfType([propTypes.bool, propTypes.func, propTypes.object, propTypes.element]),
	  axisLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  tickLine: propTypes.oneOfType([propTypes.bool, propTypes.object]),
	  minTickGap: propTypes.number,
	  tickSize: propTypes.number,
	  interval: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['preserveStart', 'preserveEnd', 'preserveStartEnd'])]),
	  reversed: propTypes.bool
	};
	YAxis.defaultProps = {
	  allowDuplicatedCategory: true,
	  allowDecimals: true,
	  hide: false,
	  orientation: 'left',
	  width: 60,
	  height: 0,
	  mirror: false,
	  yAxisId: 0,
	  tickCount: 5,
	  type: 'number',
	  domain: [0, 'auto'],
	  padding: {
	    top: 0,
	    bottom: 0
	  },
	  allowDataOverflow: false,
	  scale: 'auto',
	  reversed: false
	};

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function(collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike_1(collection)) {
	      var iteratee = _baseIteratee(predicate);
	      collection = keys_1(collection);
	      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	var _createFind = createFind;

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite_1(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	var toInteger_1 = toInteger;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$5 = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger_1(fromIndex);
	  if (index < 0) {
	    index = nativeMax$5(length + index, 0);
	  }
	  return _baseFindIndex(array, _baseIteratee(predicate), index);
	}

	var findIndex_1 = findIndex;

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = _createFind(findIndex_1);

	var find_1 = find;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$4 = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle$2(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$4);
	  }
	  if (isObject_1(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce_1(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	var throttle_1 = throttle$2;

	var detectReferenceElementsDomain = function detectReferenceElementsDomain(children, domain, axisId, axisType, specifiedTicks) {
	  var lines = findAllByType(children, ReferenceLine);
	  var dots = findAllByType(children, ReferenceDot);
	  var elements = lines.concat(dots);
	  var areas = findAllByType(children, ReferenceArea);
	  var idKey = "".concat(axisType, "Id");
	  var valueKey = axisType[0];
	  var finalDomain = domain;

	  if (elements.length) {
	    finalDomain = elements.reduce(function (result, el) {
	      if (el.props[idKey] === axisId && ifOverflowMatches(el.props, 'extendDomain') && isNumber$3(el.props[valueKey])) {
	        var value = el.props[valueKey];
	        return [Math.min(result[0], value), Math.max(result[1], value)];
	      }

	      return result;
	    }, finalDomain);
	  }

	  if (areas.length) {
	    var key1 = "".concat(valueKey, "1");
	    var key2 = "".concat(valueKey, "2");
	    finalDomain = areas.reduce(function (result, el) {
	      if (el.props[idKey] === axisId && ifOverflowMatches(el.props, 'extendDomain') && isNumber$3(el.props[key1]) && isNumber$3(el.props[key2])) {
	        var value1 = el.props[key1];
	        var value2 = el.props[key2];
	        return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];
	      }

	      return result;
	    }, finalDomain);
	  }

	  if (specifiedTicks && specifiedTicks.length) {
	    finalDomain = specifiedTicks.reduce(function (result, tick) {
	      if (isNumber$3(tick)) {
	        return [Math.min(result[0], tick), Math.max(result[1], tick)];
	      }

	      return result;
	    }, finalDomain);
	  }

	  return finalDomain;
	};

	var eventCenter = new EventEmitter();

	if (eventCenter.setMaxListeners) {
	  eventCenter.setMaxListeners(10);
	}
	var SYNC_EVENT = 'recharts.syncMouseEvents';

	function _typeof$C(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$C = function _typeof(obj) { return typeof obj; }; } else { _typeof$C = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$C(obj); }

	function _objectWithoutProperties$e(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$f(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$f(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends$w() { _extends$w = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$w.apply(this, arguments); }

	function _toConsumableArray$b(arr) { return _arrayWithoutHoles$b(arr) || _iterableToArray$c(arr) || _nonIterableSpread$b(); }

	function _nonIterableSpread$b() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$c(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$b(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$y(source, true).forEach(function (key) { _defineProperty$F(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$y(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$F(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$A(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$A(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$A(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$A(Constructor.prototype, protoProps); if (staticProps) _defineProperties$A(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$z(self, call) { if (call && (_typeof$C(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$A(self); }

	function _getPrototypeOf$z(o) { _getPrototypeOf$z = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$z(o); }

	function _assertThisInitialized$A(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits$z(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$z(subClass, superClass); }

	function _setPrototypeOf$z(o, p) { _setPrototypeOf$z = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$z(o, p); }
	var ORIENT_MAP = {
	  xAxis: ['bottom', 'top'],
	  yAxis: ['left', 'right']
	};
	var originCoordinate = {
	  x: 0,
	  y: 0
	};

	var generateCategoricalChart = function generateCategoricalChart(_ref) {
	  var chartName = _ref.chartName,
	      GraphicalChild = _ref.GraphicalChild,
	      _ref$eventType = _ref.eventType,
	      eventType = _ref$eventType === void 0 ? 'axis' : _ref$eventType,
	      axisComponents = _ref.axisComponents,
	      legendContent = _ref.legendContent,
	      formatAxisMap = _ref.formatAxisMap,
	      defaultProps = _ref.defaultProps,
	      propTypes$1 = _ref.propTypes;

	  var CategoricalChartWrapper =
	  /*#__PURE__*/
	  function (_Component) {
	    _inherits$z(CategoricalChartWrapper, _Component);

	    /**
	     * Returns default, reset state for the categorical chart.
	     * @param {Object} props Props object to use when creating the default state
	     * @return {Object} Whole new state
	     */
	    function CategoricalChartWrapper(_props) {
	      var _this;

	      _classCallCheck$A(this, CategoricalChartWrapper);

	      _this = _possibleConstructorReturn$z(this, _getPrototypeOf$z(CategoricalChartWrapper).call(this, _props));

	      _this.handleLegendBBoxUpdate = function (box) {
	        if (box && _this.legendInstance) {
	          var _this$state = _this.state,
	              dataStartIndex = _this$state.dataStartIndex,
	              dataEndIndex = _this$state.dataEndIndex,
	              updateId = _this$state.updateId;

	          _this.setState(_this.updateStateOfAxisMapsOffsetAndStackGroups({
	            props: _this.props,
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex,
	            updateId: updateId
	          }));
	        }
	      };

	      _this.handleReceiveSyncEvent = function (cId, chartId, data) {
	        var _this$props = _this.props,
	            syncId = _this$props.syncId,
	            layout = _this$props.layout;
	        var updateId = _this.state.updateId;

	        if (syncId === cId && chartId !== _this.uniqueChartId) {
	          var dataStartIndex = data.dataStartIndex,
	              dataEndIndex = data.dataEndIndex;

	          if (!isNil_1(data.dataStartIndex) || !isNil_1(data.dataEndIndex)) {
	            _this.setState(_objectSpread$B({
	              dataStartIndex: dataStartIndex,
	              dataEndIndex: dataEndIndex
	            }, _this.updateStateOfAxisMapsOffsetAndStackGroups({
	              props: _this.props,
	              dataStartIndex: dataStartIndex,
	              dataEndIndex: dataEndIndex,
	              updateId: updateId
	            })));
	          } else if (!isNil_1(data.activeTooltipIndex)) {
	            var chartX = data.chartX,
	                chartY = data.chartY,
	                activeTooltipIndex = data.activeTooltipIndex;
	            var _this$state2 = _this.state,
	                offset = _this$state2.offset,
	                tooltipTicks = _this$state2.tooltipTicks;

	            if (!offset) {
	              return;
	            }

	            var viewBox = _objectSpread$B({}, offset, {
	              x: offset.left,
	              y: offset.top
	            }); // When a categotical chart is combined with another chart, the value of chartX
	            // and chartY may beyond the boundaries.


	            var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);
	            var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);
	            var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;

	            var activePayload = _this.getTooltipContent(activeTooltipIndex);

	            var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {
	              x: layout === 'horizontal' ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,
	              y: layout === 'horizontal' ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate
	            } : originCoordinate;

	            _this.setState(_objectSpread$B({}, data, {
	              activeLabel: activeLabel,
	              activeCoordinate: activeCoordinate,
	              activePayload: activePayload
	            }));
	          } else {
	            _this.setState(data);
	          }
	        }
	      };

	      _this.handleBrushChange = function (_ref2) {
	        var startIndex = _ref2.startIndex,
	            endIndex = _ref2.endIndex;

	        // Only trigger changes if the extents of the brush have actually changed
	        if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {
	          var updateId = _this.state.updateId;

	          _this.setState(function () {
	            return _objectSpread$B({
	              dataStartIndex: startIndex,
	              dataEndIndex: endIndex
	            }, _this.updateStateOfAxisMapsOffsetAndStackGroups({
	              props: _this.props,
	              dataStartIndex: startIndex,
	              dataEndIndex: endIndex,
	              updateId: updateId
	            }));
	          });

	          _this.triggerSyncEvent({
	            dataStartIndex: startIndex,
	            dataEndIndex: endIndex
	          });
	        }
	      };

	      _this.handleMouseEnter = function (e) {
	        var onMouseEnter = _this.props.onMouseEnter;

	        var mouse = _this.getMouseInfo(e);

	        if (mouse) {
	          var nextState = _objectSpread$B({}, mouse, {
	            isTooltipActive: true
	          });

	          _this.setState(nextState);

	          _this.triggerSyncEvent(nextState);

	          if (isFunction_1(onMouseEnter)) {
	            onMouseEnter(nextState, e);
	          }
	        }
	      };

	      _this.triggeredAfterMouseMove = function (e) {
	        var onMouseMove = _this.props.onMouseMove;

	        var mouse = _this.getMouseInfo(e);

	        var nextState = mouse ? _objectSpread$B({}, mouse, {
	          isTooltipActive: true
	        }) : {
	          isTooltipActive: false
	        };

	        _this.setState(nextState);

	        _this.triggerSyncEvent(nextState);

	        if (isFunction_1(onMouseMove)) {
	          onMouseMove(nextState, e);
	        }
	      };

	      _this.handleItemMouseEnter = function (el) {
	        _this.setState(function () {
	          return {
	            isTooltipActive: true,
	            activeItem: el,
	            activePayload: el.tooltipPayload,
	            activeCoordinate: el.tooltipPosition || {
	              x: el.cx,
	              y: el.cy
	            }
	          };
	        });
	      };

	      _this.handleItemMouseLeave = function () {
	        _this.setState(function () {
	          return {
	            isTooltipActive: false
	          };
	        });
	      };

	      _this.handleMouseMove = function (e) {
	        if (e && isFunction_1(e.persist)) {
	          e.persist();
	        }

	        _this.triggeredAfterMouseMove(e);
	      };

	      _this.handleMouseLeave = function (e) {
	        var onMouseLeave = _this.props.onMouseLeave;
	        var nextState = {
	          isTooltipActive: false
	        };

	        _this.setState(nextState);

	        _this.triggerSyncEvent(nextState);

	        if (isFunction_1(onMouseLeave)) {
	          onMouseLeave(nextState, e);
	        }
	      };

	      _this.handleOuterEvent = function (e) {
	        var eventName = getReactEventByType(e);

	        if (eventName && isFunction_1(_this.props[eventName])) {
	          var mouse = _this.getMouseInfo(e);

	          var handler = _this.props[eventName];
	          handler(mouse, e);
	        }
	      };

	      _this.handleClick = function (e) {
	        var onClick = _this.props.onClick;

	        if (isFunction_1(onClick)) {
	          var mouse = _this.getMouseInfo(e);

	          onClick(mouse, e);
	        }
	      };

	      _this.handleMouseDown = function (e) {
	        var onMouseDown = _this.props.onMouseDown;

	        if (isFunction_1(onMouseDown)) {
	          var mouse = _this.getMouseInfo(e);

	          onMouseDown(mouse, e);
	        }
	      };

	      _this.handleMouseUp = function (e) {
	        var onMouseUp = _this.props.onMouseUp;

	        if (isFunction_1(onMouseUp)) {
	          var mouse = _this.getMouseInfo(e);

	          onMouseUp(mouse, e);
	        }
	      };

	      _this.handleTouchMove = function (e) {
	        if (e.changedTouches != null && e.changedTouches.length > 0) {
	          _this.handleMouseMove(e.changedTouches[0]);
	        }
	      };

	      _this.handleTouchStart = function (e) {
	        if (e.changedTouches != null && e.changedTouches.length > 0) {
	          _this.handleMouseDown(e.changedTouches[0]);
	        }
	      };

	      _this.handleTouchEnd = function (e) {
	        if (e.changedTouches != null && e.changedTouches.length > 0) {
	          _this.handleMouseUp(e.changedTouches[0]);
	        }
	      };

	      _this.verticalCoordinatesGenerator = function (_ref3) {
	        var xAxis = _ref3.xAxis,
	            width = _ref3.width,
	            height = _ref3.height,
	            offset = _ref3.offset;
	        return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread$B({}, CartesianAxis.defaultProps, {}, xAxis, {
	          ticks: getTicksOfAxis(xAxis, true),
	          viewBox: {
	            x: 0,
	            y: 0,
	            width: width,
	            height: height
	          }
	        })), offset.left, offset.left + offset.width);
	      };

	      _this.horizontalCoordinatesGenerator = function (_ref4) {
	        var yAxis = _ref4.yAxis,
	            width = _ref4.width,
	            height = _ref4.height,
	            offset = _ref4.offset;
	        return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread$B({}, CartesianAxis.defaultProps, {}, yAxis, {
	          ticks: getTicksOfAxis(yAxis, true),
	          viewBox: {
	            x: 0,
	            y: 0,
	            width: width,
	            height: height
	          }
	        })), offset.top, offset.top + offset.height);
	      };

	      _this.axesTicksGenerator = function (axis) {
	        return getTicksOfAxis(axis, true);
	      };

	      _this.tooltipTicksGenerator = function (axisMap) {
	        var axis = getAnyElementOfObject(axisMap);
	        var tooltipTicks = getTicksOfAxis(axis, false, true);
	        return {
	          tooltipTicks: tooltipTicks,
	          orderedTooltipTicks: sortBy_1(tooltipTicks, function (o) {
	            return o.coordinate;
	          }),
	          tooltipAxis: axis,
	          tooltipAxisBandSize: getBandSizeOfAxis(axis)
	        };
	      };

	      _this.renderCursor = function (element) {
	        var _this$state3 = _this.state,
	            isTooltipActive = _this$state3.isTooltipActive,
	            activeCoordinate = _this$state3.activeCoordinate,
	            activePayload = _this$state3.activePayload,
	            offset = _this$state3.offset;

	        if (!element || !element.props.cursor || !isTooltipActive || !activeCoordinate) {
	          return null;
	        }

	        var layout = _this.props.layout;
	        var restProps;
	        var cursorComp = Curve;

	        if (chartName === 'ScatterChart') {
	          restProps = activeCoordinate;
	          cursorComp = Cross;
	        } else if (chartName === 'BarChart') {
	          restProps = _this.getCursorRectangle();
	          cursorComp = Rectangle;
	        } else if (layout === 'radial') {
	          var _this$getCursorPoints = _this.getCursorPoints(),
	              cx = _this$getCursorPoints.cx,
	              cy = _this$getCursorPoints.cy,
	              radius = _this$getCursorPoints.radius,
	              startAngle = _this$getCursorPoints.startAngle,
	              endAngle = _this$getCursorPoints.endAngle;

	          restProps = {
	            cx: cx,
	            cy: cy,
	            startAngle: startAngle,
	            endAngle: endAngle,
	            innerRadius: radius,
	            outerRadius: radius
	          };
	          cursorComp = Sector;
	        } else {
	          restProps = {
	            points: _this.getCursorPoints()
	          };
	          cursorComp = Curve;
	        }

	        var key = element.key || '_recharts-cursor';

	        var cursorProps = _objectSpread$B({
	          stroke: '#ccc',
	          pointerEvents: 'none'
	        }, offset, {}, restProps, {}, getPresentationAttributes(element.props.cursor), {
	          payload: activePayload,
	          key: key,
	          className: 'recharts-tooltip-cursor'
	        });

	        return react_26(element.props.cursor) ? react_24(element.props.cursor, cursorProps) : react_23(cursorComp, cursorProps);
	      };

	      _this.renderPolarAxis = function (element, displayName, index) {
	        var axisType = element.type.axisType;

	        var axisMap = _this.state["".concat(axisType, "Map")];

	        var axisOption = axisMap[element.props["".concat(axisType, "Id")]];
	        return react_24(element, _objectSpread$B({}, axisOption, {
	          className: axisType,
	          key: element.key || "".concat(displayName, "-").concat(index),
	          ticks: getTicksOfAxis(axisOption, true)
	        }));
	      };

	      _this.renderXAxis = function (element, displayName, index) {
	        var xAxisMap = _this.state.xAxisMap;
	        var axisObj = xAxisMap[element.props.xAxisId];
	        return _this.renderAxis(axisObj, element, displayName, index);
	      };

	      _this.renderYAxis = function (element, displayName, index) {
	        var yAxisMap = _this.state.yAxisMap;
	        var axisObj = yAxisMap[element.props.yAxisId];
	        return _this.renderAxis(axisObj, element, displayName, index);
	      };

	      _this.renderGrid = function (element) {
	        var _this$state4 = _this.state,
	            xAxisMap = _this$state4.xAxisMap,
	            yAxisMap = _this$state4.yAxisMap,
	            offset = _this$state4.offset;
	        var _this$props2 = _this.props,
	            width = _this$props2.width,
	            height = _this$props2.height;
	        var xAxis = getAnyElementOfObject(xAxisMap);

	        var yAxisWithFiniteDomain = find_1(yAxisMap, function (axis) {
	          return every_1(axis.domain, Number.isFinite);
	        });

	        var yAxis = yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);
	        var props = element.props || {};
	        return react_24(element, {
	          key: element.key || 'grid',
	          x: isNumber$3(props.x) ? props.x : offset.left,
	          y: isNumber$3(props.y) ? props.y : offset.top,
	          width: isNumber$3(props.width) ? props.width : offset.width,
	          height: isNumber$3(props.height) ? props.height : offset.height,
	          xAxis: xAxis,
	          yAxis: yAxis,
	          offset: offset,
	          chartWidth: width,
	          chartHeight: height,
	          verticalCoordinatesGenerator: props.verticalCoordinatesGenerator || _this.verticalCoordinatesGenerator,
	          horizontalCoordinatesGenerator: props.horizontalCoordinatesGenerator || _this.horizontalCoordinatesGenerator
	        });
	      };

	      _this.renderPolarGrid = function (element) {
	        var _this$state5 = _this.state,
	            radiusAxisMap = _this$state5.radiusAxisMap,
	            angleAxisMap = _this$state5.angleAxisMap;
	        var radiusAxis = getAnyElementOfObject(radiusAxisMap);
	        var angleAxis = getAnyElementOfObject(angleAxisMap);
	        var cx = angleAxis.cx,
	            cy = angleAxis.cy,
	            innerRadius = angleAxis.innerRadius,
	            outerRadius = angleAxis.outerRadius;
	        return react_24(element, {
	          polarAngles: getTicksOfAxis(angleAxis, true).map(function (entry) {
	            return entry.coordinate;
	          }),
	          polarRadius: getTicksOfAxis(radiusAxis, true).map(function (entry) {
	            return entry.coordinate;
	          }),
	          cx: cx,
	          cy: cy,
	          innerRadius: innerRadius,
	          outerRadius: outerRadius,
	          key: element.key || 'polar-grid'
	        });
	      };

	      _this.renderBrush = function (element) {
	        var _this$props3 = _this.props,
	            margin = _this$props3.margin,
	            data = _this$props3.data;
	        var _this$state6 = _this.state,
	            offset = _this$state6.offset,
	            dataStartIndex = _this$state6.dataStartIndex,
	            dataEndIndex = _this$state6.dataEndIndex,
	            updateId = _this$state6.updateId; // TODO: update brush when children update

	        return react_24(element, {
	          key: element.key || '_recharts-brush',
	          onChange: combineEventHandlers(_this.handleBrushChange, null, element.props.onChange),
	          data: data,
	          x: isNumber$3(element.props.x) ? element.props.x : offset.left,
	          y: isNumber$3(element.props.y) ? element.props.y : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),
	          width: isNumber$3(element.props.width) ? element.props.width : offset.width,
	          startIndex: dataStartIndex,
	          endIndex: dataEndIndex,
	          updateId: "brush-".concat(updateId)
	        });
	      };

	      _this.renderReferenceElement = function (element, displayName, index) {
	        if (!element) {
	          return null;
	        }

	        var _assertThisInitialize = _assertThisInitialized$A(_this),
	            clipPathId = _assertThisInitialize.clipPathId;

	        var _this$state7 = _this.state,
	            xAxisMap = _this$state7.xAxisMap,
	            yAxisMap = _this$state7.yAxisMap,
	            offset = _this$state7.offset;
	        var _element$props = element.props,
	            xAxisId = _element$props.xAxisId,
	            yAxisId = _element$props.yAxisId;
	        return react_24(element, {
	          key: element.key || "".concat(displayName, "-").concat(index),
	          xAxis: xAxisMap[xAxisId],
	          yAxis: yAxisMap[yAxisId],
	          viewBox: {
	            x: offset.left,
	            y: offset.top,
	            width: offset.width,
	            height: offset.height
	          },
	          clipPathId: clipPathId
	        });
	      };

	      _this.renderGraphicChild = function (element, displayName, index) {
	        var item = _this.filterFormatItem(element, displayName, index);

	        if (!item) {
	          return null;
	        }

	        var graphicalItem = react_24(element, item.props);
	        var _this$state8 = _this.state,
	            isTooltipActive = _this$state8.isTooltipActive,
	            tooltipAxis = _this$state8.tooltipAxis,
	            activeTooltipIndex = _this$state8.activeTooltipIndex,
	            activeLabel = _this$state8.activeLabel;
	        var children = _this.props.children;
	        var tooltipItem = findChildByType(children, Tooltip);
	        var _item$props = item.props,
	            points = _item$props.points,
	            isRange = _item$props.isRange,
	            baseLine = _item$props.baseLine;
	        var _item$item$props = item.item.props,
	            activeDot = _item$item$props.activeDot,
	            hide = _item$item$props.hide;
	        var hasActive = !hide && isTooltipActive && tooltipItem && activeDot && activeTooltipIndex >= 0;

	        function findWithPayload(entry) {
	          return tooltipAxis.dataKey(entry.payload);
	        }

	        if (hasActive) {
	          var activePoint, basePoint;

	          if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
	            var specifiedKey = typeof tooltipAxis.dataKey === 'function' ? findWithPayload : 'payload.'.concat(tooltipAxis.dataKey);
	            activePoint = findEntryInArray(points, specifiedKey, activeLabel);
	            basePoint = isRange && baseLine && findEntryInArray(baseLine, specifiedKey, activeLabel);
	          } else {
	            activePoint = points[activeTooltipIndex];
	            basePoint = isRange && baseLine && baseLine[activeTooltipIndex];
	          }

	          if (!isNil_1(activePoint)) {
	            return [graphicalItem].concat(_toConsumableArray$b(_this.renderActivePoints({
	              item: item,
	              activePoint: activePoint,
	              basePoint: basePoint,
	              childIndex: activeTooltipIndex,
	              isRange: isRange
	            })));
	          }
	        }

	        if (isRange) {
	          return [graphicalItem, null, null];
	        }

	        return [graphicalItem, null];
	      };

	      _this.renderCustomized = function (element) {
	        return react_24(element, _objectSpread$B({}, _this.props, {}, _this.state));
	      };

	      var defaultState = _this.constructor.createDefaultState(_props);

	      var _updateId = 0;
	      _this.state = _objectSpread$B({}, defaultState, {
	        updateId: 0
	      }, _this.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread$B({
	        props: _props
	      }, defaultState, {
	        updateId: _updateId
	      })));
	      _this.uniqueChartId = isNil_1(_props.id) ? uniqueId('recharts') : _props.id;
	      _this.clipPathId = "".concat(_this.uniqueChartId, "-clip");

	      if (_props.throttleDelay) {
	        _this.triggeredAfterMouseMove = throttle_1(_this.triggeredAfterMouseMove, _props.throttleDelay);
	      }

	      return _this;
	    }
	    /* eslint-disable  react/no-did-mount-set-state */


	    _createClass$A(CategoricalChartWrapper, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        if (!isNil_1(this.props.syncId)) {
	          this.addListener();
	        }
	      } // eslint-disable-next-line camelcase

	    }, {
	      key: "componentWillReceiveProps",
	      value: function componentWillReceiveProps(nextProps) {
	        var _this2 = this;

	        var _this$props4 = this.props,
	            data = _this$props4.data,
	            children = _this$props4.children,
	            width = _this$props4.width,
	            height = _this$props4.height,
	            layout = _this$props4.layout,
	            stackOffset = _this$props4.stackOffset,
	            margin = _this$props4.margin;
	        var updateId = this.state.updateId;

	        if (nextProps.data !== data || nextProps.width !== width || nextProps.height !== height || nextProps.layout !== layout || nextProps.stackOffset !== stackOffset || !shallowEqual$1(nextProps.margin, margin)) {
	          var defaultState = this.constructor.createDefaultState(nextProps);
	          this.setState(_objectSpread$B({}, defaultState, {
	            updateId: updateId + 1
	          }, this.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread$B({
	            props: nextProps
	          }, defaultState, {
	            updateId: updateId + 1
	          }))));
	        } else if (!isChildrenEqual(nextProps.children, children)) {
	          // update configuration in chilren
	          var hasGlobalData = !isNil_1(nextProps.data);
	          var newUpdateId = hasGlobalData ? updateId : updateId + 1;
	          this.setState(function (prevState) {
	            return _objectSpread$B({
	              updateId: newUpdateId
	            }, _this2.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread$B({
	              props: nextProps
	            }, prevState, {
	              updateId: newUpdateId
	            })));
	          });
	        } // add syncId


	        if (isNil_1(this.props.syncId) && !isNil_1(nextProps.syncId)) {
	          this.addListener();
	        } // remove syncId


	        if (!isNil_1(this.props.syncId) && isNil_1(nextProps.syncId)) {
	          this.removeListener();
	        }
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        if (!isNil_1(this.props.syncId)) {
	          this.removeListener();
	        }

	        if (typeof this.triggeredAfterMouseMove.cancel === 'function') {
	          this.triggeredAfterMouseMove.cancel();
	        }
	      }
	      /**
	      * Get the configuration of all x-axis or y-axis
	      * @param  {Object} props          Latest props
	      * @param  {String} axisType       The type of axis
	      * @param  {Array}  graphicalItems The instances of item
	      * @param  {Object} stackGroups    The items grouped by axisId and stackId
	      * @param {Number} dataStartIndex  The start index of the data series when a brush is applied
	      * @param {Number} dataEndIndex    The end index of the data series when a brush is applied
	      * @return {Object}          Configuration
	      */

	    }, {
	      key: "getAxisMap",
	      value: function getAxisMap(props, _ref5) {
	        var _ref5$axisType = _ref5.axisType,
	            axisType = _ref5$axisType === void 0 ? 'xAxis' : _ref5$axisType,
	            AxisComp = _ref5.AxisComp,
	            graphicalItems = _ref5.graphicalItems,
	            stackGroups = _ref5.stackGroups,
	            dataStartIndex = _ref5.dataStartIndex,
	            dataEndIndex = _ref5.dataEndIndex;
	        var children = props.children;
	        var axisIdKey = "".concat(axisType, "Id"); // Get all the instance of Axis

	        var axes = findAllByType(children, AxisComp);
	        var axisMap = {};

	        if (axes && axes.length) {
	          axisMap = this.getAxisMapByAxes(props, {
	            axes: axes,
	            graphicalItems: graphicalItems,
	            axisType: axisType,
	            axisIdKey: axisIdKey,
	            stackGroups: stackGroups,
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex
	          });
	        } else if (graphicalItems && graphicalItems.length) {
	          axisMap = this.getAxisMapByItems(props, {
	            Axis: AxisComp,
	            graphicalItems: graphicalItems,
	            axisType: axisType,
	            axisIdKey: axisIdKey,
	            stackGroups: stackGroups,
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex
	          });
	        }

	        return axisMap;
	      }
	      /**
	       * Get the configuration of axis by the options of axis instance
	       * @param  {Object} props         Latest props
	       * @param {Array}  axes           The instance of axes
	       * @param  {Array} graphicalItems The instances of item
	       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis
	       * @param  {String} axisIdKey     The unique id of an axis
	       * @param  {Object} stackGroups   The items grouped by axisId and stackId
	       * @param {Number} dataStartIndex The start index of the data series when a brush is applied
	       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied
	       * @return {Object}      Configuration
	       */

	    }, {
	      key: "getAxisMapByAxes",
	      value: function getAxisMapByAxes(props, _ref6) {
	        var _this3 = this;

	        var axes = _ref6.axes,
	            graphicalItems = _ref6.graphicalItems,
	            axisType = _ref6.axisType,
	            axisIdKey = _ref6.axisIdKey,
	            stackGroups = _ref6.stackGroups,
	            dataStartIndex = _ref6.dataStartIndex,
	            dataEndIndex = _ref6.dataEndIndex;
	        var layout = props.layout,
	            children = props.children,
	            stackOffset = props.stackOffset;
	        var isCategorial = isCategorialAxis(layout, axisType); // Eliminate duplicated axes

	        var axisMap = axes.reduce(function (result, child) {
	          var _child$props = child.props,
	              type = _child$props.type,
	              dataKey = _child$props.dataKey,
	              allowDataOverflow = _child$props.allowDataOverflow,
	              allowDuplicatedCategory = _child$props.allowDuplicatedCategory,
	              scale = _child$props.scale,
	              ticks = _child$props.ticks;
	          var axisId = child.props[axisIdKey];

	          var displayedData = _this3.constructor.getDisplayedData(props, {
	            graphicalItems: graphicalItems.filter(function (item) {
	              return item.props[axisIdKey] === axisId;
	            }),
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex
	          });

	          var len = displayedData.length;

	          if (!result[axisId]) {
	            var domain, duplicateDomain, categoricalDomain;

	            if (dataKey) {
	              domain = getDomainOfDataByKey(displayedData, dataKey, type);

	              if (type === 'category' && isCategorial) {
	                var duplicate = hasDuplicate(domain);

	                if (allowDuplicatedCategory && duplicate) {
	                  duplicateDomain = domain; // When category axis has duplicated text, serial numbers are used to generate scale

	                  domain = range_1(0, len);
	                } else if (!allowDuplicatedCategory) {
	                  // remove duplicated category
	                  domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function (finalDomain, entry) {
	                    return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray$b(finalDomain), [entry]);
	                  }, []);
	                }
	              } else if (type === 'category') {
	                if (!allowDuplicatedCategory) {
	                  domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function (finalDomain, entry) {
	                    return finalDomain.indexOf(entry) >= 0 || entry === '' || isNil_1(entry) ? finalDomain : [].concat(_toConsumableArray$b(finalDomain), [entry]);
	                  }, []);
	                } else {
	                  // eliminate undefined or null or empty string
	                  domain = domain.filter(function (entry) {
	                    return entry !== '' && !isNil_1(entry);
	                  });
	                }
	              } else if (type === 'number') {
	                var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function (item) {
	                  return item.props[axisIdKey] === axisId && !item.props.hide;
	                }), dataKey, axisType);

	                if (errorBarsDomain) {
	                  domain = errorBarsDomain;
	                }
	              }

	              if (isCategorial && (type === 'number' || scale !== 'auto')) {
	                categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, 'category');
	              }
	            } else if (isCategorial) {
	              domain = range_1(0, len);
	            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === 'number') {
	              // when stackOffset is 'expand', the domain may be calculated as [0, 1.000000000002]
	              domain = stackOffset === 'expand' ? [0, 1] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
	            } else {
	              domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function (item) {
	                return item.props[axisIdKey] === axisId && !item.props.hide;
	              }), type, true);
	            }

	            if (type === 'number') {
	              // To detect wether there is any reference lines whose props alwaysShow is true
	              domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks);

	              if (child.props.domain) {
	                domain = parseSpecifiedDomain(child.props.domain, domain, allowDataOverflow);
	              }
	            }

	            return _objectSpread$B({}, result, _defineProperty$F({}, axisId, _objectSpread$B({}, child.props, {
	              axisType: axisType,
	              domain: domain,
	              categoricalDomain: categoricalDomain,
	              duplicateDomain: duplicateDomain,
	              originalDomain: child.props.domain,
	              isCategorial: isCategorial,
	              layout: layout
	            })));
	          }

	          return result;
	        }, {});
	        return axisMap;
	      }
	      /**
	       * Get the configuration of axis by the options of item,
	       * this kind of axis does not display in chart
	       * @param  {Object} props         Latest props
	       * @param  {Array} graphicalItems The instances of item
	       * @param  {ReactElement} Axis    Axis Component
	       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis
	       * @param  {String} axisIdKey     The unique id of an axis
	       * @param  {Object} stackGroups   The items grouped by axisId and stackId
	       * @param {Number} dataStartIndex The start index of the data series when a brush is applied
	       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied
	       * @return {Object}               Configuration
	       */

	    }, {
	      key: "getAxisMapByItems",
	      value: function getAxisMapByItems(props, _ref7) {
	        var graphicalItems = _ref7.graphicalItems,
	            Axis = _ref7.Axis,
	            axisType = _ref7.axisType,
	            axisIdKey = _ref7.axisIdKey,
	            stackGroups = _ref7.stackGroups,
	            dataStartIndex = _ref7.dataStartIndex,
	            dataEndIndex = _ref7.dataEndIndex;
	        var layout = props.layout,
	            children = props.children;
	        var displayedData = this.constructor.getDisplayedData(props, {
	          graphicalItems: graphicalItems,
	          dataStartIndex: dataStartIndex,
	          dataEndIndex: dataEndIndex
	        });
	        var len = displayedData.length;
	        var isCategorial = isCategorialAxis(layout, axisType);
	        var index = -1; // The default type of x-axis is category axis,
	        // The default contents of x-axis is the serial numbers of data
	        // The default type of y-axis is number axis
	        // The default contents of y-axis is the domain of data

	        var axisMap = graphicalItems.reduce(function (result, child) {
	          var axisId = child.props[axisIdKey];

	          if (!result[axisId]) {
	            index++;
	            var domain;

	            if (isCategorial) {
	              domain = range_1(0, len);
	            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
	              domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
	              domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
	            } else {
	              domain = parseSpecifiedDomain(Axis.defaultProps.domain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function (item) {
	                return item.props[axisIdKey] === axisId && !item.props.hide;
	              }), 'number'), Axis.defaultProps.allowDataOverflow);
	              domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
	            }

	            return _objectSpread$B({}, result, _defineProperty$F({}, axisId, _objectSpread$B({
	              axisType: axisType
	            }, Axis.defaultProps, {
	              hide: true,
	              orientation: ORIENT_MAP[axisType] && ORIENT_MAP[axisType][index % 2],
	              domain: domain,
	              originalDomain: Axis.defaultProps.domain,
	              isCategorial: isCategorial,
	              layout: layout // specify scale when no Axis
	              // scale: isCategorial ? 'band' : 'linear',

	            })));
	          }

	          return result;
	        }, {});
	        return axisMap;
	      }
	    }, {
	      key: "getActiveCoordinate",
	      value: function getActiveCoordinate(tooltipTicks, activeIndex, rangeObj) {
	        var layout = this.props.layout;
	        var entry = tooltipTicks.find(function (tick) {
	          return tick && tick.index === activeIndex;
	        });

	        if (entry) {
	          if (layout === 'horizontal') {
	            return {
	              x: entry.coordinate,
	              y: rangeObj.y
	            };
	          }

	          if (layout === 'vertical') {
	            return {
	              x: rangeObj.x,
	              y: entry.coordinate
	            };
	          }

	          if (layout === 'centric') {
	            var _angle = entry.coordinate;
	            var _radius = rangeObj.radius;
	            return _objectSpread$B({}, rangeObj, {}, polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle), {
	              angle: _angle,
	              radius: _radius
	            });
	          }

	          var radius = entry.coordinate;
	          var angle = rangeObj.angle;
	          return _objectSpread$B({}, rangeObj, {}, polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle), {
	            angle: angle,
	            radius: radius
	          });
	        }

	        return originCoordinate;
	      }
	      /**
	       * Get the information of mouse in chart, return null when the mouse is not in the chart
	       * @param  {Object} event    The event object
	       * @return {Object}          Mouse data
	       */

	    }, {
	      key: "getMouseInfo",
	      value: function getMouseInfo(event) {
	        if (!this.container) {
	          return null;
	        }

	        var containerOffset = getOffset(this.container);
	        var e = calculateChartCoordinate(event, containerOffset);
	        var rangeObj = this.inRange(e.chartX, e.chartY);

	        if (!rangeObj) {
	          return null;
	        }

	        var _this$state9 = this.state,
	            xAxisMap = _this$state9.xAxisMap,
	            yAxisMap = _this$state9.yAxisMap;

	        if (eventType !== 'axis' && xAxisMap && yAxisMap) {
	          var xScale = getAnyElementOfObject(xAxisMap).scale;
	          var yScale = getAnyElementOfObject(yAxisMap).scale;
	          var xValue = xScale && xScale.invert ? xScale.invert(e.chartX) : null;
	          var yValue = yScale && yScale.invert ? yScale.invert(e.chartY) : null;
	          return _objectSpread$B({}, e, {
	            xValue: xValue,
	            yValue: yValue
	          });
	        }

	        var _this$state10 = this.state,
	            ticks = _this$state10.orderedTooltipTicks,
	            axis = _this$state10.tooltipAxis,
	            tooltipTicks = _this$state10.tooltipTicks;
	        var pos = this.calculateTooltipPos(rangeObj);
	        var activeIndex = calculateActiveTickIndex(pos, ticks, tooltipTicks, axis);

	        if (activeIndex >= 0 && tooltipTicks) {
	          var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;
	          var activePayload = this.getTooltipContent(activeIndex, activeLabel);
	          var activeCoordinate = this.getActiveCoordinate(ticks, activeIndex, rangeObj);
	          return _objectSpread$B({}, e, {
	            activeTooltipIndex: activeIndex,
	            activeLabel: activeLabel,
	            activePayload: activePayload,
	            activeCoordinate: activeCoordinate
	          });
	        }

	        return null;
	      }
	      /**
	       * Get the content to be displayed in the tooltip
	       * @param  {Number} activeIndex    Active index of data
	       * @param  {String} activeLabel    Active label of data
	       * @return {Array}                 The content of tooltip
	       */

	    }, {
	      key: "getTooltipContent",
	      value: function getTooltipContent(activeIndex, activeLabel) {
	        var _this$state11 = this.state,
	            graphicalItems = _this$state11.graphicalItems,
	            tooltipAxis = _this$state11.tooltipAxis;
	        var displayedData = this.constructor.getDisplayedData(this.props, this.state);

	        if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {
	          return null;
	        } // get data by activeIndex when the axis don't allow duplicated category


	        return graphicalItems.reduce(function (result, child) {
	          var hide = child.props.hide;

	          if (hide) {
	            return result;
	          }

	          var _child$props2 = child.props,
	              dataKey = _child$props2.dataKey,
	              name = _child$props2.name,
	              unit = _child$props2.unit,
	              formatter = _child$props2.formatter,
	              data = _child$props2.data,
	              tooltipType = _child$props2.tooltipType;
	          var payload;

	          if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
	            // graphic child has data props
	            payload = findEntryInArray(data || displayedData, tooltipAxis.dataKey, activeLabel);
	          } else {
	            payload = data && data[activeIndex] || displayedData[activeIndex];
	          }

	          if (!payload) {
	            return result;
	          }

	          return [].concat(_toConsumableArray$b(result), [_objectSpread$B({}, getPresentationAttributes(child), {
	            dataKey: dataKey,
	            unit: unit,
	            formatter: formatter,
	            name: name || dataKey,
	            color: getMainColorOfGraphicItem(child),
	            value: getValueByDataKey(payload, dataKey),
	            type: tooltipType,
	            payload: payload
	          })]);
	        }, []);
	      }
	    }, {
	      key: "getFormatItems",
	      value: function getFormatItems(props, currentState) {
	        var _this4 = this;

	        var graphicalItems = currentState.graphicalItems,
	            stackGroups = currentState.stackGroups,
	            offset = currentState.offset,
	            updateId = currentState.updateId,
	            dataStartIndex = currentState.dataStartIndex,
	            dataEndIndex = currentState.dataEndIndex;
	        var barSize = props.barSize,
	            layout = props.layout,
	            barGap = props.barGap,
	            barCategoryGap = props.barCategoryGap,
	            globalMaxBarSize = props.maxBarSize;

	        var _this$constructor$get = this.constructor.getAxisNameByLayout(layout),
	            numericAxisName = _this$constructor$get.numericAxisName,
	            cateAxisName = _this$constructor$get.cateAxisName;

	        var hasBar = this.constructor.hasBar(graphicalItems);
	        var sizeList = hasBar && getBarSizeList({
	          barSize: barSize,
	          stackGroups: stackGroups
	        });
	        var formatedItems = [];
	        graphicalItems.forEach(function (item, index) {
	          var displayedData = _this4.constructor.getDisplayedData(props, {
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex
	          }, item);

	          var _item$props2 = item.props,
	              dataKey = _item$props2.dataKey,
	              childMaxBarSize = _item$props2.maxBarSize;
	          var numericAxisId = item.props["".concat(numericAxisName, "Id")];
	          var cateAxisId = item.props["".concat(cateAxisName, "Id")];
	          var axisObj = axisComponents.reduce(function (result, entry) {
	            var _objectSpread4;

	            var axisMap = currentState["".concat(entry.axisType, "Map")];
	            var id = item.props["".concat(entry.axisType, "Id")];
	            var axis = axisMap && axisMap[id];
	            return _objectSpread$B({}, result, (_objectSpread4 = {}, _defineProperty$F(_objectSpread4, entry.axisType, axis), _defineProperty$F(_objectSpread4, "".concat(entry.axisType, "Ticks"), getTicksOfAxis(axis)), _objectSpread4));
	          }, {});
	          var cateAxis = axisObj[cateAxisName];
	          var cateTicks = axisObj["".concat(cateAxisName, "Ticks")];
	          var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);
	          var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);
	          var maxBarSize = isNil_1(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
	          var barPosition = hasBar && getBarPosition({
	            barGap: barGap,
	            barCategoryGap: barCategoryGap,
	            bandSize: bandSize,
	            sizeList: sizeList[cateAxisId],
	            maxBarSize: maxBarSize
	          });
	          var componsedFn = item && item.type && item.type.getComposedData;

	          if (componsedFn) {
	            var _objectSpread5;

	            formatedItems.push({
	              props: _objectSpread$B({}, componsedFn(_objectSpread$B({}, axisObj, {
	                displayedData: displayedData,
	                props: props,
	                dataKey: dataKey,
	                item: item,
	                bandSize: bandSize,
	                barPosition: barPosition,
	                offset: offset,
	                stackedData: stackedData,
	                layout: layout,
	                dataStartIndex: dataStartIndex,
	                dataEndIndex: dataEndIndex,
	                onItemMouseLeave: combineEventHandlers(_this4.handleItemMouseLeave, null, item.props.onMouseLeave),
	                onItemMouseEnter: combineEventHandlers(_this4.handleItemMouseEnter, null, item.props.onMouseEnter)
	              })), (_objectSpread5 = {
	                key: item.key || "item-".concat(index)
	              }, _defineProperty$F(_objectSpread5, numericAxisName, axisObj[numericAxisName]), _defineProperty$F(_objectSpread5, cateAxisName, axisObj[cateAxisName]), _defineProperty$F(_objectSpread5, "animationId", updateId), _objectSpread5)),
	              childIndex: parseChildIndex(item, props.children),
	              item: item
	            });
	          }
	        });
	        return formatedItems;
	      }
	    }, {
	      key: "getCursorRectangle",
	      value: function getCursorRectangle() {
	        var layout = this.props.layout;
	        var _this$state12 = this.state,
	            activeCoordinate = _this$state12.activeCoordinate,
	            offset = _this$state12.offset,
	            tooltipAxisBandSize = _this$state12.tooltipAxisBandSize;
	        var halfSize = tooltipAxisBandSize / 2;
	        return {
	          stroke: 'none',
	          fill: '#ccc',
	          x: layout === 'horizontal' ? activeCoordinate.x - halfSize : offset.left + 0.5,
	          y: layout === 'horizontal' ? offset.top + 0.5 : activeCoordinate.y - halfSize,
	          width: layout === 'horizontal' ? tooltipAxisBandSize : offset.width - 1,
	          height: layout === 'horizontal' ? offset.height - 1 : tooltipAxisBandSize
	        };
	      }
	    }, {
	      key: "getCursorPoints",
	      value: function getCursorPoints() {
	        var layout = this.props.layout;
	        var _this$state13 = this.state,
	            activeCoordinate = _this$state13.activeCoordinate,
	            offset = _this$state13.offset;
	        var x1, y1, x2, y2;

	        if (layout === 'horizontal') {
	          x1 = activeCoordinate.x;
	          x2 = x1;
	          y1 = offset.top;
	          y2 = offset.top + offset.height;
	        } else if (layout === 'vertical') {
	          y1 = activeCoordinate.y;
	          y2 = y1;
	          x1 = offset.left;
	          x2 = offset.left + offset.width;
	        } else if (!isNil_1(activeCoordinate.cx) || !isNil_1(activeCoordinate.cy)) {
	          if (layout === 'centric') {
	            var cx = activeCoordinate.cx,
	                cy = activeCoordinate.cy,
	                innerRadius = activeCoordinate.innerRadius,
	                outerRadius = activeCoordinate.outerRadius,
	                angle = activeCoordinate.angle;
	            var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
	            var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
	            x1 = innerPoint.x;
	            y1 = innerPoint.y;
	            x2 = outerPoint.x;
	            y2 = outerPoint.y;
	          } else {
	            var _cx = activeCoordinate.cx,
	                _cy = activeCoordinate.cy,
	                radius = activeCoordinate.radius,
	                startAngle = activeCoordinate.startAngle,
	                endAngle = activeCoordinate.endAngle;
	            var startPoint = polarToCartesian(_cx, _cy, radius, startAngle);
	            var endPoint = polarToCartesian(_cx, _cy, radius, endAngle);
	            return {
	              points: [startPoint, endPoint],
	              cx: _cx,
	              cy: _cy,
	              radius: radius,
	              startAngle: startAngle,
	              endAngle: endAngle
	            };
	          }
	        }

	        return [{
	          x: x1,
	          y: y1
	        }, {
	          x: x2,
	          y: y2
	        }];
	      }
	    }, {
	      key: "calculateTooltipPos",
	      value: function calculateTooltipPos(rangeObj) {
	        var layout = this.props.layout;

	        if (layout === 'horizontal') {
	          return rangeObj.x;
	        }

	        if (layout === 'vertical') {
	          return rangeObj.y;
	        }

	        if (layout === 'centric') {
	          return rangeObj.angle;
	        }

	        return rangeObj.radius;
	      }
	    }, {
	      key: "inRange",
	      value: function inRange(x, y) {
	        var layout = this.props.layout;

	        if (layout === 'horizontal' || layout === 'vertical') {
	          var offset = this.state.offset;
	          var isInRange = x >= offset.left && x <= offset.left + offset.width && y >= offset.top && y <= offset.top + offset.height;
	          return isInRange ? {
	            x: x,
	            y: y
	          } : null;
	        }

	        var _this$state14 = this.state,
	            angleAxisMap = _this$state14.angleAxisMap,
	            radiusAxisMap = _this$state14.radiusAxisMap;

	        if (angleAxisMap && radiusAxisMap) {
	          var angleAxis = getAnyElementOfObject(angleAxisMap);
	          return inRangeOfSector({
	            x: x,
	            y: y
	          }, angleAxis);
	        }

	        return null;
	      }
	    }, {
	      key: "parseEventsOfWrapper",
	      value: function parseEventsOfWrapper() {
	        var children = this.props.children;
	        var tooltipItem = findChildByType(children, Tooltip);
	        var tooltipEvents = tooltipItem && eventType === 'axis' ? {
	          onMouseEnter: this.handleMouseEnter,
	          onMouseMove: this.handleMouseMove,
	          onMouseLeave: this.handleMouseLeave,
	          onTouchMove: this.handleTouchMove,
	          onTouchStart: this.handleTouchStart,
	          onTouchEnd: this.handleTouchEnd
	        } : {};
	        var outerEvents = filterEventAttributes(this.props, this.handleOuterEvent);
	        return _objectSpread$B({}, outerEvents, {}, tooltipEvents);
	      }
	      /**
	       * The AxisMaps are expensive to render on large data sets
	       * so provide the ability to store them in state and only update them when necessary
	       * they are dependent upon the start and end index of
	       * the brush so it's important that this method is called _after_
	       * the state is updated with any new start/end indices
	       *
	       * @param {Object} props          The props object to be used for updating the axismaps
	       * @param {Number} dataStartIndex The start index of the data series when a brush is applied
	       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied
	       * @param {Number} updateId       The update id
	       * @return {Object} state New state to set
	       */

	    }, {
	      key: "updateStateOfAxisMapsOffsetAndStackGroups",
	      value: function updateStateOfAxisMapsOffsetAndStackGroups(_ref8) {
	        var _this5 = this;

	        var props = _ref8.props,
	            dataStartIndex = _ref8.dataStartIndex,
	            dataEndIndex = _ref8.dataEndIndex,
	            updateId = _ref8.updateId;

	        if (!validateWidthHeight({
	          props: props
	        })) {
	          return null;
	        }

	        var children = props.children,
	            layout = props.layout,
	            stackOffset = props.stackOffset,
	            data = props.data,
	            reverseStackOrder = props.reverseStackOrder;

	        var _this$constructor$get2 = this.constructor.getAxisNameByLayout(layout),
	            numericAxisName = _this$constructor$get2.numericAxisName,
	            cateAxisName = _this$constructor$get2.cateAxisName;

	        var graphicalItems = findAllByType(children, GraphicalChild);
	        var stackGroups = getStackGroupsByAxisId(data, graphicalItems, "".concat(numericAxisName, "Id"), "".concat(cateAxisName, "Id"), stackOffset, reverseStackOrder);
	        var axisObj = axisComponents.reduce(function (result, entry) {
	          var name = "".concat(entry.axisType, "Map");
	          return _objectSpread$B({}, result, _defineProperty$F({}, name, _this5.getAxisMap(props, _objectSpread$B({}, entry, {
	            graphicalItems: graphicalItems,
	            stackGroups: entry.axisType === numericAxisName && stackGroups,
	            dataStartIndex: dataStartIndex,
	            dataEndIndex: dataEndIndex
	          }))));
	        }, {});
	        var offset = this.calculateOffset(_objectSpread$B({}, axisObj, {
	          props: props,
	          graphicalItems: graphicalItems
	        }));
	        Object.keys(axisObj).forEach(function (key) {
	          axisObj[key] = formatAxisMap(props, axisObj[key], offset, key.replace('Map', ''), chartName);
	        });
	        var cateAxisMap = axisObj["".concat(cateAxisName, "Map")];
	        var ticksObj = this.tooltipTicksGenerator(cateAxisMap);
	        var formatedGraphicalItems = this.getFormatItems(props, _objectSpread$B({}, axisObj, {
	          dataStartIndex: dataStartIndex,
	          dataEndIndex: dataEndIndex,
	          updateId: updateId,
	          graphicalItems: graphicalItems,
	          stackGroups: stackGroups,
	          offset: offset
	        }));
	        return _objectSpread$B({
	          formatedGraphicalItems: formatedGraphicalItems,
	          graphicalItems: graphicalItems,
	          offset: offset,
	          stackGroups: stackGroups
	        }, ticksObj, {}, axisObj);
	      }
	      /* eslint-disable  no-underscore-dangle */

	    }, {
	      key: "addListener",
	      value: function addListener() {
	        eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);

	        if (eventCenter.setMaxListeners && eventCenter._maxListeners) {
	          eventCenter.setMaxListeners(eventCenter._maxListeners + 1);
	        }
	      }
	    }, {
	      key: "removeListener",
	      value: function removeListener() {
	        eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);

	        if (eventCenter.setMaxListeners && eventCenter._maxListeners) {
	          eventCenter.setMaxListeners(eventCenter._maxListeners - 1);
	        }
	      }
	      /**
	       * Calculate the offset of main part in the svg element
	       * @param  {Object} props          Latest props
	       * @param  {Array}  graphicalItems The instances of item
	       * @param  {Object} xAxisMap       The configuration of x-axis
	       * @param  {Object} yAxisMap       The configuration of y-axis
	       * @return {Object} The offset of main part in the svg element
	       */

	    }, {
	      key: "calculateOffset",
	      value: function calculateOffset(_ref9) {
	        var props = _ref9.props,
	            graphicalItems = _ref9.graphicalItems,
	            _ref9$xAxisMap = _ref9.xAxisMap,
	            xAxisMap = _ref9$xAxisMap === void 0 ? {} : _ref9$xAxisMap,
	            _ref9$yAxisMap = _ref9.yAxisMap,
	            yAxisMap = _ref9$yAxisMap === void 0 ? {} : _ref9$yAxisMap;
	        var width = props.width,
	            height = props.height,
	            children = props.children;
	        var margin = props.margin || {};
	        var brushItem = findChildByType(children, Brush);
	        var legendItem = findChildByType(children, Legend);
	        var offsetH = Object.keys(yAxisMap).reduce(function (result, id) {
	          var entry = yAxisMap[id];
	          var orientation = entry.orientation;

	          if (!entry.mirror && !entry.hide) {
	            return _objectSpread$B({}, result, _defineProperty$F({}, orientation, result[orientation] + entry.width));
	          }

	          return result;
	        }, {
	          left: margin.left || 0,
	          right: margin.right || 0
	        });
	        var offsetV = Object.keys(xAxisMap).reduce(function (result, id) {
	          var entry = xAxisMap[id];
	          var orientation = entry.orientation;

	          if (!entry.mirror && !entry.hide) {
	            return _objectSpread$B({}, result, _defineProperty$F({}, orientation, result[orientation] + entry.height));
	          }

	          return result;
	        }, {
	          top: margin.top || 0,
	          bottom: margin.bottom || 0
	        });

	        var offset = _objectSpread$B({}, offsetV, {}, offsetH);

	        var brushBottom = offset.bottom;

	        if (brushItem) {
	          offset.bottom += brushItem.props.height || Brush.defaultProps.height;
	        }

	        if (legendItem && this.legendInstance) {
	          var legendBox = this.legendInstance.getBBox();
	          offset = appendOffsetOfLegend(offset, graphicalItems, props, legendBox);
	        }

	        return _objectSpread$B({
	          brushBottom: brushBottom
	        }, offset, {
	          width: width - offset.left - offset.right,
	          height: height - offset.top - offset.bottom
	        });
	      }
	    }, {
	      key: "triggerSyncEvent",
	      value: function triggerSyncEvent(data) {
	        var syncId = this.props.syncId;

	        if (!isNil_1(syncId)) {
	          eventCenter.emit(SYNC_EVENT, syncId, this.uniqueChartId, data);
	        }
	      }
	    }, {
	      key: "filterFormatItem",
	      value: function filterFormatItem(item, displayName, childIndex) {
	        var formatedGraphicalItems = this.state.formatedGraphicalItems;

	        for (var i = 0, len = formatedGraphicalItems.length; i < len; i++) {
	          var entry = formatedGraphicalItems[i];

	          if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {
	            return entry;
	          }
	        }

	        return null;
	      }
	    }, {
	      key: "renderAxis",

	      /**
	       * Draw axis
	       * @param {Object} axisOptions The options of axis
	       * @param {Object} element      The axis element
	       * @param {String} displayName  The display name of axis
	       * @param {Number} index        The index of element
	       * @return {ReactElement}       The instance of x-axes
	       */
	      value: function renderAxis(axisOptions, element, displayName, index) {
	        var _this$props5 = this.props,
	            width = _this$props5.width,
	            height = _this$props5.height;
	        return react.createElement(CartesianAxis, _extends$w({}, axisOptions, {
	          className: "recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType),
	          key: element.key || "".concat(displayName, "-").concat(index),
	          viewBox: {
	            x: 0,
	            y: 0,
	            width: width,
	            height: height
	          },
	          ticksGenerator: this.axesTicksGenerator
	        }));
	      }
	      /**
	       * Draw grid
	       * @param  {ReactElement} element the grid item
	       * @return {ReactElement} The instance of grid
	       */

	    }, {
	      key: "renderLegend",

	      /**
	       * Draw legend
	       * @return {ReactElement}            The instance of Legend
	       */
	      value: function renderLegend() {
	        var _this6 = this;

	        var formatedGraphicalItems = this.state.formatedGraphicalItems;
	        var _this$props6 = this.props,
	            children = _this$props6.children,
	            width = _this$props6.width,
	            height = _this$props6.height;
	        var margin = this.props.margin || {};
	        var legendWidth = width - (margin.left || 0) - (margin.right || 0);
	        var legendHeight = height - (margin.top || 0) - (margin.bottom || 0);
	        var props = getLegendProps({
	          children: children,
	          formatedGraphicalItems: formatedGraphicalItems,
	          legendWidth: legendWidth,
	          legendHeight: legendHeight,
	          legendContent: legendContent
	        });

	        if (!props) {
	          return null;
	        }

	        var item = props.item,
	            otherProps = _objectWithoutProperties$e(props, ["item"]);

	        return react_24(item, _objectSpread$B({}, otherProps, {
	          chartWidth: width,
	          chartHeight: height,
	          margin: margin,
	          ref: function ref(legend) {
	            _this6.legendInstance = legend;
	          },
	          onBBoxUpdate: this.handleLegendBBoxUpdate
	        }));
	      }
	      /**
	       * Draw Tooltip
	       * @return {ReactElement}  The instance of Tooltip
	       */

	    }, {
	      key: "renderTooltip",
	      value: function renderTooltip() {
	        var children = this.props.children;
	        var tooltipItem = findChildByType(children, Tooltip);

	        if (!tooltipItem) {
	          return null;
	        }

	        var _this$state15 = this.state,
	            isTooltipActive = _this$state15.isTooltipActive,
	            activeCoordinate = _this$state15.activeCoordinate,
	            activePayload = _this$state15.activePayload,
	            activeLabel = _this$state15.activeLabel,
	            offset = _this$state15.offset;
	        return react_24(tooltipItem, {
	          viewBox: _objectSpread$B({}, offset, {
	            x: offset.left,
	            y: offset.top
	          }),
	          active: isTooltipActive,
	          label: activeLabel,
	          payload: isTooltipActive ? activePayload : [],
	          coordinate: activeCoordinate
	        });
	      }
	    }, {
	      key: "renderActivePoints",
	      value: function renderActivePoints(_ref10) {
	        var item = _ref10.item,
	            activePoint = _ref10.activePoint,
	            basePoint = _ref10.basePoint,
	            childIndex = _ref10.childIndex,
	            isRange = _ref10.isRange;
	        var result = [];
	        var key = item.props.key;
	        var _item$item$props2 = item.item.props,
	            activeDot = _item$item$props2.activeDot,
	            dataKey = _item$item$props2.dataKey;

	        var dotProps = _objectSpread$B({
	          index: childIndex,
	          dataKey: dataKey,
	          cx: activePoint.x,
	          cy: activePoint.y,
	          r: 4,
	          fill: getMainColorOfGraphicItem(item.item),
	          strokeWidth: 2,
	          stroke: '#fff',
	          payload: activePoint.payload,
	          value: activePoint.value,
	          key: "".concat(key, "-activePoint-").concat(childIndex)
	        }, getPresentationAttributes(activeDot), {}, filterEventAttributes(activeDot));

	        result.push(this.constructor.renderActiveDot(activeDot, dotProps, childIndex));

	        if (basePoint) {
	          result.push(this.constructor.renderActiveDot(activeDot, _objectSpread$B({}, dotProps, {
	            cx: basePoint.x,
	            cy: basePoint.y,
	            key: "".concat(key, "-basePoint-").concat(childIndex)
	          }), childIndex));
	        } else if (isRange) {
	          result.push(null);
	        }

	        return result;
	      }
	    }, {
	      key: "renderClipPath",
	      value: function renderClipPath() {
	        var clipPathId = this.clipPathId;
	        var _this$state$offset = this.state.offset,
	            left = _this$state$offset.left,
	            top = _this$state$offset.top,
	            height = _this$state$offset.height,
	            width = _this$state$offset.width;
	        return react.createElement("defs", null, react.createElement("clipPath", {
	          id: clipPathId
	        }, react.createElement("rect", {
	          x: left,
	          y: top,
	          height: height,
	          width: width
	        })));
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this7 = this;

	        if (!validateWidthHeight(this)) {
	          return null;
	        }

	        var _this$props7 = this.props,
	            children = _this$props7.children,
	            className = _this$props7.className,
	            width = _this$props7.width,
	            height = _this$props7.height,
	            style = _this$props7.style,
	            compact = _this$props7.compact,
	            others = _objectWithoutProperties$e(_this$props7, ["children", "className", "width", "height", "style", "compact"]);

	        var attrs = getPresentationAttributes(others);
	        var map = {
	          CartesianGrid: {
	            handler: this.renderGrid,
	            once: true
	          },
	          ReferenceArea: {
	            handler: this.renderReferenceElement
	          },
	          ReferenceLine: {
	            handler: this.renderReferenceElement
	          },
	          ReferenceDot: {
	            handler: this.renderReferenceElement
	          },
	          XAxis: {
	            handler: this.renderXAxis
	          },
	          YAxis: {
	            handler: this.renderYAxis
	          },
	          Brush: {
	            handler: this.renderBrush,
	            once: true
	          },
	          Bar: {
	            handler: this.renderGraphicChild
	          },
	          Line: {
	            handler: this.renderGraphicChild
	          },
	          Area: {
	            handler: this.renderGraphicChild
	          },
	          Radar: {
	            handler: this.renderGraphicChild
	          },
	          RadialBar: {
	            handler: this.renderGraphicChild
	          },
	          Scatter: {
	            handler: this.renderGraphicChild
	          },
	          Pie: {
	            handler: this.renderGraphicChild
	          },
	          Funnel: {
	            handler: this.renderGraphicChild
	          },
	          Tooltip: {
	            handler: this.renderCursor,
	            once: true
	          },
	          PolarGrid: {
	            handler: this.renderPolarGrid,
	            once: true
	          },
	          PolarAngleAxis: {
	            handler: this.renderPolarAxis
	          },
	          PolarRadiusAxis: {
	            handler: this.renderPolarAxis
	          },
	          Customized: {
	            handler: this.renderCustomized
	          }
	        }; // The "compact" mode is mainly used as the panorama within Brush

	        if (compact) {
	          return react.createElement(Surface, _extends$w({}, attrs, {
	            width: width,
	            height: height
	          }), this.renderClipPath(), renderByOrder(children, map));
	        }

	        var events = this.parseEventsOfWrapper();
	        return react.createElement("div", _extends$w({
	          className: classnames('recharts-wrapper', className),
	          style: _objectSpread$B({
	            position: 'relative',
	            cursor: 'default',
	            width: width,
	            height: height
	          }, style)
	        }, events, {
	          ref: function ref(node) {
	            _this7.container = node;
	          }
	        }), react.createElement(Surface, _extends$w({}, attrs, {
	          width: width,
	          height: height
	        }), this.renderClipPath(), renderByOrder(children, map)), this.renderLegend(), this.renderTooltip());
	      }
	    }], [{
	      key: "getAxisNameByLayout",
	      value: function getAxisNameByLayout(layout) {
	        if (layout === 'horizontal') {
	          return {
	            numericAxisName: 'yAxis',
	            cateAxisName: 'xAxis'
	          };
	        }

	        if (layout === 'vertical') {
	          return {
	            numericAxisName: 'xAxis',
	            cateAxisName: 'yAxis'
	          };
	        }

	        if (layout === 'centric') {
	          return {
	            numericAxisName: 'radiusAxis',
	            cateAxisName: 'angleAxis'
	          };
	        }

	        return {
	          numericAxisName: 'angleAxis',
	          cateAxisName: 'radiusAxis'
	        };
	      }
	    }, {
	      key: "renderActiveDot",
	      value: function renderActiveDot(option, props) {
	        var dot;

	        if (react_26(option)) {
	          dot = react_24(option, props);
	        } else if (isFunction_1(option)) {
	          dot = option(props);
	        } else {
	          dot = react.createElement(Dot, props);
	        }

	        return react.createElement(Layer, {
	          className: "recharts-active-dot",
	          key: props.key
	        }, dot);
	      }
	    }]);

	    return CategoricalChartWrapper;
	  }(react_3);

	  CategoricalChartWrapper.displayName = chartName;
	  CategoricalChartWrapper.propTypes = _objectSpread$B({
	    syncId: propTypes.oneOfType([propTypes.string, propTypes.number]),
	    compact: propTypes.bool,
	    width: propTypes.number,
	    height: propTypes.number,
	    data: propTypes.arrayOf(propTypes.object),
	    layout: propTypes.oneOf(['horizontal', 'vertical']),
	    stackOffset: propTypes.oneOf(['sign', 'expand', 'none', 'wiggle', 'silhouette']),
	    throttleDelay: propTypes.number,
	    margin: propTypes.shape({
	      top: propTypes.number,
	      right: propTypes.number,
	      bottom: propTypes.number,
	      left: propTypes.number
	    }),
	    barCategoryGap: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    barGap: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    barSize: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    maxBarSize: propTypes.number,
	    style: propTypes.object,
	    className: propTypes.string,
	    children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
	    defaultShowTooltip: propTypes.bool,
	    onClick: propTypes.func,
	    onMouseLeave: propTypes.func,
	    onMouseEnter: propTypes.func,
	    onMouseMove: propTypes.func,
	    onMouseDown: propTypes.func,
	    onMouseUp: propTypes.func,
	    reverseStackOrder: propTypes.bool,
	    id: propTypes.string
	  }, propTypes$1);
	  CategoricalChartWrapper.defaultProps = _objectSpread$B({
	    layout: 'horizontal',
	    stackOffset: 'none',
	    barCategoryGap: '10%',
	    barGap: 4,
	    margin: {
	      top: 5,
	      right: 5,
	      bottom: 5,
	      left: 5
	    },
	    reverseStackOrder: false
	  }, defaultProps);

	  CategoricalChartWrapper.createDefaultState = function (props) {
	    var children = props.children,
	        defaultShowTooltip = props.defaultShowTooltip;
	    var brushItem = findChildByType(children, Brush);
	    var startIndex = brushItem && brushItem.props && brushItem.props.startIndex || 0;
	    var endIndex = brushItem && brushItem.props && brushItem.props.endIndex || props.data && props.data.length - 1 || 0;
	    return {
	      chartX: 0,
	      chartY: 0,
	      dataStartIndex: startIndex,
	      dataEndIndex: endIndex,
	      activeTooltipIndex: -1,
	      isTooltipActive: !isNil_1(defaultShowTooltip) ? defaultShowTooltip : false
	    };
	  };

	  CategoricalChartWrapper.hasBar = function (graphicalItems) {
	    if (!graphicalItems || !graphicalItems.length) {
	      return false;
	    }

	    return graphicalItems.some(function (item) {
	      var name = getDisplayName(item && item.type);
	      return name && name.indexOf('Bar') >= 0;
	    });
	  };

	  CategoricalChartWrapper.getDisplayedData = function (props, _ref11, item) {
	    var graphicalItems = _ref11.graphicalItems,
	        dataStartIndex = _ref11.dataStartIndex,
	        dataEndIndex = _ref11.dataEndIndex;
	    var itemsData = (graphicalItems || []).reduce(function (result, child) {
	      var itemData = child.props.data;

	      if (itemData && itemData.length) {
	        return [].concat(_toConsumableArray$b(result), _toConsumableArray$b(itemData));
	      }

	      return result;
	    }, []);

	    if (itemsData && itemsData.length > 0) {
	      return itemsData;
	    }

	    if (item && item.props && item.props.data && item.props.data.length > 0) {
	      return item.props.data;
	    }

	    var data = props.data;

	    if (data && data.length && isNumber$3(dataStartIndex) && isNumber$3(dataEndIndex)) {
	      return data.slice(dataStartIndex, dataEndIndex + 1);
	    }

	    return [];
	  };

	  return CategoricalChartWrapper;
	};

	/**
	 * @fileOverview Line Chart
	 */
	var LineChart = generateCategoricalChart({
	  chartName: 'LineChart',
	  GraphicalChild: Line,
	  axisComponents: [{
	    axisType: 'xAxis',
	    AxisComp: XAxis
	  }, {
	    axisType: 'yAxis',
	    AxisComp: YAxis
	  }],
	  formatAxisMap: formatAxisMap$1
	});

	/**
	 * @fileOverview Bar Chart
	 */
	var BarChart = generateCategoricalChart({
	  chartName: 'BarChart',
	  GraphicalChild: Bar,
	  axisComponents: [{
	    axisType: 'xAxis',
	    AxisComp: XAxis
	  }, {
	    axisType: 'yAxis',
	    AxisComp: YAxis
	  }],
	  formatAxisMap: formatAxisMap$1
	});

	/**
	 * @fileOverview Pie Chart
	 */
	var PieChart = generateCategoricalChart({
	  chartName: 'PieChart',
	  GraphicalChild: Pie,
	  eventType: 'item',
	  legendContent: 'children',
	  axisComponents: [{
	    axisType: 'angleAxis',
	    AxisComp: PolarAngleAxis
	  }, {
	    axisType: 'radiusAxis',
	    AxisComp: PolarRadiusAxis
	  }],
	  formatAxisMap: formatAxisMap,
	  defaultProps: {
	    layout: 'centric',
	    startAngle: 0,
	    endAngle: 360,
	    cx: '50%',
	    cy: '50%',
	    innerRadius: 0,
	    outerRadius: '80%'
	  },
	  propTypes: {
	    layout: propTypes.oneOf(['centric']),
	    startAngle: propTypes.number,
	    endAngle: propTypes.number,
	    cx: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    cy: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    innerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    outerRadius: propTypes.oneOfType([propTypes.number, propTypes.string])
	  }
	});

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	var _arrayEach = arrayEach;

	/** Used for built-in method references. */
	var objectProto$f = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$e = objectProto$f.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$e.call(object, key) && eq_1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    _baseAssignValue(object, key, value);
	  }
	}

	var _assignValue = assignValue;

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      _baseAssignValue(object, key, newValue);
	    } else {
	      _assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	var _copyObject = copyObject;

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && _copyObject(source, keys_1(source), object);
	}

	var _baseAssign = baseAssign;

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _nativeKeysIn = nativeKeysIn;

	/** Used for built-in method references. */
	var objectProto$g = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$f = objectProto$g.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject_1(object)) {
	    return _nativeKeysIn(object);
	  }
	  var isProto = _isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$f.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeysIn = baseKeysIn;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn$1(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
	}

	var keysIn_1 = keysIn$1;

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && _copyObject(source, keysIn_1(source), object);
	}

	var _baseAssignIn = baseAssignIn;

	var _cloneBuffer = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? _root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
	});

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	var _copyArray = copyArray;

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return _copyObject(source, _getSymbols(source), object);
	}

	var _copySymbols = copySymbols;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
	  var result = [];
	  while (object) {
	    _arrayPush(result, _getSymbols(object));
	    object = _getPrototype(object);
	  }
	  return result;
	};

	var _getSymbolsIn = getSymbolsIn;

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return _copyObject(source, _getSymbolsIn(source), object);
	}

	var _copySymbolsIn = copySymbolsIn;

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
	}

	var _getAllKeysIn = getAllKeysIn;

	/** Used for built-in method references. */
	var objectProto$h = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$g = objectProto$h.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty$g.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	var _initCloneArray = initCloneArray;

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
	  return result;
	}

	var _cloneArrayBuffer = cloneArrayBuffer;

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	var _cloneDataView = cloneDataView;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	var _cloneRegExp = cloneRegExp;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
	}

	var _cloneSymbol = cloneSymbol;

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	var _cloneTypedArray = cloneTypedArray;

	/** `Object#toString` result references. */
	var boolTag$2 = '[object Boolean]',
	    dateTag$2 = '[object Date]',
	    mapTag$3 = '[object Map]',
	    numberTag$3 = '[object Number]',
	    regexpTag$2 = '[object RegExp]',
	    setTag$3 = '[object Set]',
	    stringTag$3 = '[object String]',
	    symbolTag$4 = '[object Symbol]';

	var arrayBufferTag$2 = '[object ArrayBuffer]',
	    dataViewTag$3 = '[object DataView]',
	    float32Tag$1 = '[object Float32Array]',
	    float64Tag$1 = '[object Float64Array]',
	    int8Tag$1 = '[object Int8Array]',
	    int16Tag$1 = '[object Int16Array]',
	    int32Tag$1 = '[object Int32Array]',
	    uint8Tag$1 = '[object Uint8Array]',
	    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
	    uint16Tag$1 = '[object Uint16Array]',
	    uint32Tag$1 = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag$2:
	      return _cloneArrayBuffer(object);

	    case boolTag$2:
	    case dateTag$2:
	      return new Ctor(+object);

	    case dataViewTag$3:
	      return _cloneDataView(object, isDeep);

	    case float32Tag$1: case float64Tag$1:
	    case int8Tag$1: case int16Tag$1: case int32Tag$1:
	    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
	      return _cloneTypedArray(object, isDeep);

	    case mapTag$3:
	      return new Ctor;

	    case numberTag$3:
	    case stringTag$3:
	      return new Ctor(object);

	    case regexpTag$2:
	      return _cloneRegExp(object);

	    case setTag$3:
	      return new Ctor;

	    case symbolTag$4:
	      return _cloneSymbol(object);
	  }
	}

	var _initCloneByTag = initCloneByTag;

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject_1(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	var _baseCreate = baseCreate;

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !_isPrototype(object))
	    ? _baseCreate(_getPrototype(object))
	    : {};
	}

	var _initCloneObject = initCloneObject;

	/** `Object#toString` result references. */
	var mapTag$4 = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap(value) {
	  return isObjectLike_1(value) && _getTag(value) == mapTag$4;
	}

	var _baseIsMap = baseIsMap;

	/* Node.js helper references. */
	var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

	var isMap_1 = isMap;

	/** `Object#toString` result references. */
	var setTag$4 = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet(value) {
	  return isObjectLike_1(value) && _getTag(value) == setTag$4;
	}

	var _baseIsSet = baseIsSet;

	/* Node.js helper references. */
	var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

	var isSet_1 = isSet;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag$3 = '[object Arguments]',
	    arrayTag$2 = '[object Array]',
	    boolTag$3 = '[object Boolean]',
	    dateTag$3 = '[object Date]',
	    errorTag$2 = '[object Error]',
	    funcTag$2 = '[object Function]',
	    genTag$1 = '[object GeneratorFunction]',
	    mapTag$5 = '[object Map]',
	    numberTag$4 = '[object Number]',
	    objectTag$4 = '[object Object]',
	    regexpTag$3 = '[object RegExp]',
	    setTag$5 = '[object Set]',
	    stringTag$4 = '[object String]',
	    symbolTag$5 = '[object Symbol]',
	    weakMapTag$2 = '[object WeakMap]';

	var arrayBufferTag$3 = '[object ArrayBuffer]',
	    dataViewTag$4 = '[object DataView]',
	    float32Tag$2 = '[object Float32Array]',
	    float64Tag$2 = '[object Float64Array]',
	    int8Tag$2 = '[object Int8Array]',
	    int16Tag$2 = '[object Int16Array]',
	    int32Tag$2 = '[object Int32Array]',
	    uint8Tag$2 = '[object Uint8Array]',
	    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
	    uint16Tag$2 = '[object Uint16Array]',
	    uint32Tag$2 = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
	cloneableTags[arrayBufferTag$3] = cloneableTags[dataViewTag$4] =
	cloneableTags[boolTag$3] = cloneableTags[dateTag$3] =
	cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
	cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
	cloneableTags[int32Tag$2] = cloneableTags[mapTag$5] =
	cloneableTags[numberTag$4] = cloneableTags[objectTag$4] =
	cloneableTags[regexpTag$3] = cloneableTags[setTag$5] =
	cloneableTags[stringTag$4] = cloneableTags[symbolTag$5] =
	cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
	cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
	cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
	cloneableTags[weakMapTag$2] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject_1(value)) {
	    return value;
	  }
	  var isArr = isArray_1(value);
	  if (isArr) {
	    result = _initCloneArray(value);
	    if (!isDeep) {
	      return _copyArray(value, result);
	    }
	  } else {
	    var tag = _getTag(value),
	        isFunc = tag == funcTag$2 || tag == genTag$1;

	    if (isBuffer_1(value)) {
	      return _cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag$4 || tag == argsTag$3 || (isFunc && !object)) {
	      result = (isFlat || isFunc) ? {} : _initCloneObject(value);
	      if (!isDeep) {
	        return isFlat
	          ? _copySymbolsIn(value, _baseAssignIn(result, value))
	          : _copySymbols(value, _baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = _initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new _Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet_1(value)) {
	    value.forEach(function(subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });
	  } else if (isMap_1(value)) {
	    value.forEach(function(subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });
	  }

	  var keysFunc = isFull
	    ? (isFlat ? _getAllKeysIn : _getAllKeys)
	    : (isFlat ? keysIn : keys_1);

	  var props = isArr ? undefined : keysFunc(value);
	  _arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	var _baseClone = baseClone;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	var _baseSlice = baseSlice;

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
	}

	var _parent = parent;

	/**
	 * The base implementation of `_.unset`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The property path to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 */
	function baseUnset(object, path) {
	  path = _castPath(path, object);
	  object = _parent(object, path);
	  return object == null || delete object[_toKey(last_1(path))];
	}

	var _baseUnset = baseUnset;

	/**
	 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	 * objects.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {string} key The key of the property to inspect.
	 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	 */
	function customOmitClone(value) {
	  return isPlainObject_1(value) ? undefined : value;
	}

	var _customOmitClone = customOmitClone;

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? _baseFlatten(array, 1) : [];
	}

	var flatten_1 = flatten$1;

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return _setToString(_overRest(func, undefined, flatten_1), func + '');
	}

	var _flatRest = flatRest;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG$1 = 1,
	    CLONE_FLAT_FLAG$1 = 2,
	    CLONE_SYMBOLS_FLAG$1 = 4;

	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable property paths of `object` that are not omitted.
	 *
	 * **Note:** This method is considerably slower than `_.pick`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to omit.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omit(object, ['a', 'c']);
	 * // => { 'b': '2' }
	 */
	var omit = _flatRest(function(object, paths) {
	  var result = {};
	  if (object == null) {
	    return result;
	  }
	  var isDeep = false;
	  paths = _arrayMap(paths, function(path) {
	    path = _castPath(path, object);
	    isDeep || (isDeep = path.length > 1);
	    return path;
	  });
	  _copyObject(object, _getAllKeysIn(object), result);
	  if (isDeep) {
	    result = _baseClone(result, CLONE_DEEP_FLAG$1 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$1, _customOmitClone);
	  }
	  var length = paths.length;
	  while (length--) {
	    _baseUnset(result, paths[length]);
	  }
	  return result;
	});

	var omit_1 = omit;

	var COLOR_PANEL = ['#1890FF', '#66B5FF', '#41D9C7', '#2FC25B', '#6EDB8F', '#9AE65C', '#FACC14', '#E6965C', '#57AD71', '#223273', '#738AE6', '#7564CC', '#8543E0', '#A877ED', '#5C8EE6', '#13C2C2', '#70E0E0', '#5CA3E6', '#3436C7', '#8082FF', '#DD81E6', '#F04864', '#FA7D92', '#D598D9'];

	function _typeof$D(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$D = function _typeof(obj) { return typeof obj; }; } else { _typeof$D = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$D(obj); }

	function _extends$x() { _extends$x = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$x.apply(this, arguments); }

	function _objectWithoutProperties$f(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$g(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$g(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _classCallCheck$B(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$B(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$B(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$B(Constructor.prototype, protoProps); if (staticProps) _defineProperties$B(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$A(self, call) { if (call && (_typeof$D(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$B(self); }

	function _assertThisInitialized$B(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$A(o) { _getPrototypeOf$A = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$A(o); }

	function _inherits$A(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$A(subClass, superClass); }

	function _setPrototypeOf$A(o, p) { _setPrototypeOf$A = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$A(o, p); }

	function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$z(source, true).forEach(function (key) { _defineProperty$G(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$z(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$G(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var computeNode = function computeNode(_ref) {
	  var depth = _ref.depth,
	      node = _ref.node,
	      index = _ref.index,
	      valueKey = _ref.valueKey;
	  var children = node.children;
	  var childDepth = depth + 1;
	  var computedChildren = children && children.length ? children.map(function (child, i) {
	    return computeNode({
	      depth: childDepth,
	      node: child,
	      index: i,
	      valueKey: valueKey
	    });
	  }) : null;
	  var value;

	  if (children && children.length) {
	    value = computedChildren.reduce(function (result, child) {
	      return result + child.value;
	    }, 0);
	  } else {
	    value = _isNaN(node[valueKey]) || node[valueKey] <= 0 ? 0 : node[valueKey];
	  }

	  return _objectSpread$C({}, node, {
	    children: computedChildren,
	    value: value,
	    depth: depth,
	    index: index
	  });
	};

	var filterRect = function filterRect(node) {
	  return {
	    x: node.x,
	    y: node.y,
	    width: node.width,
	    height: node.height
	  };
	}; // Compute the area for each child based on value & scale.


	var getAreaOfChildren = function getAreaOfChildren(children, areaValueRatio) {
	  var ratio = areaValueRatio < 0 ? 0 : areaValueRatio;
	  return children.map(function (child) {
	    var area = child.value * ratio;
	    return _objectSpread$C({}, child, {
	      area: _isNaN(area) || area <= 0 ? 0 : area
	    });
	  });
	}; // Computes the score for the specified row, as the worst aspect ratio.


	var getWorstScore = function getWorstScore(row, parentSize, aspectRatio) {
	  var parentArea = parentSize * parentSize;
	  var rowArea = row.area * row.area;

	  var _row$reduce = row.reduce(function (result, child) {
	    return {
	      min: Math.min(result.min, child.area),
	      max: Math.max(result.max, child.area)
	    };
	  }, {
	    min: Infinity,
	    max: 0
	  }),
	      min = _row$reduce.min,
	      max = _row$reduce.max;

	  return rowArea ? Math.max(parentArea * max * aspectRatio / rowArea, rowArea / (parentArea * min * aspectRatio)) : Infinity;
	};

	var horizontalPosition = function horizontalPosition(row, parentSize, parentRect, isFlush) {
	  var rowHeight = parentSize ? Math.round(row.area / parentSize) : 0;

	  if (isFlush || rowHeight > parentRect.height) {
	    rowHeight = parentRect.height;
	  }

	  var curX = parentRect.x;
	  var child;

	  for (var i = 0, len = row.length; i < len; i++) {
	    child = row[i];
	    child.x = curX;
	    child.y = parentRect.y;
	    child.height = rowHeight;
	    child.width = Math.min(rowHeight ? Math.round(child.area / rowHeight) : 0, parentRect.x + parentRect.width - curX);
	    curX += child.width;
	  } // what's z


	  child.z = true; // add the remain x to the last one of row

	  child.width += parentRect.x + parentRect.width - curX;
	  return _objectSpread$C({}, parentRect, {
	    y: parentRect.y + rowHeight,
	    height: parentRect.height - rowHeight
	  });
	};

	var verticalPosition = function verticalPosition(row, parentSize, parentRect, isFlush) {
	  var rowWidth = parentSize ? Math.round(row.area / parentSize) : 0;

	  if (isFlush || rowWidth > parentRect.width) {
	    rowWidth = parentRect.width;
	  }

	  var curY = parentRect.y;
	  var child;

	  for (var i = 0, len = row.length; i < len; i++) {
	    child = row[i];
	    child.x = parentRect.x;
	    child.y = curY;
	    child.width = rowWidth;
	    child.height = Math.min(rowWidth ? Math.round(child.area / rowWidth) : 0, parentRect.y + parentRect.height - curY);
	    curY += child.height;
	  }

	  child.z = false;
	  child.height += parentRect.y + parentRect.height - curY;
	  return _objectSpread$C({}, parentRect, {
	    x: parentRect.x + rowWidth,
	    width: parentRect.width - rowWidth
	  });
	};

	var position = function position(row, parentSize, parentRect, isFlush) {
	  if (parentSize === parentRect.width) {
	    return horizontalPosition(row, parentSize, parentRect, isFlush);
	  }

	  return verticalPosition(row, parentSize, parentRect, isFlush);
	}; // Recursively arranges the specified node's children into squarified rows.


	var squarify = function squarify(node, aspectRatio) {
	  var children = node.children;

	  if (children && children.length) {
	    var rect = filterRect(node);
	    var row = [];
	    var best = Infinity; // the best row score so far

	    var child, score; // the current row score

	    var size = Math.min(rect.width, rect.height); // initial orientation

	    var scaleChildren = getAreaOfChildren(children, rect.width * rect.height / node.value);
	    var tempChildren = scaleChildren.slice();
	    row.area = 0;

	    while (tempChildren.length > 0) {
	      // row first
	      // eslint-disable-next-line prefer-destructuring
	      row.push(child = tempChildren[0]);
	      row.area += child.area;
	      score = getWorstScore(row, size, aspectRatio);

	      if (score <= best) {
	        // continue with this orientation
	        tempChildren.shift();
	        best = score;
	      } else {
	        // abort, and try a different orientation
	        row.area -= row.pop().area;
	        rect = position(row, size, rect, false);
	        size = Math.min(rect.width, rect.height);
	        row.length = row.area = 0;
	        best = Infinity;
	      }
	    }

	    if (row.length) {
	      rect = position(row, size, rect, true);
	      row.length = row.area = 0;
	    }

	    return _objectSpread$C({}, node, {
	      children: scaleChildren.map(function (c) {
	        return squarify(c, aspectRatio);
	      })
	    });
	  }

	  return node;
	};

	var Treemap =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$A(Treemap, _PureComponent);

	  function Treemap() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$B(this, Treemap);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$A(this, (_getPrototypeOf2 = _getPrototypeOf$A(Treemap)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = _this.constructor.createDefaultState();

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    return _this;
	  }

	  _createClass$B(Treemap, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this$props = this.props,
	          type = _this$props.type,
	          width = _this$props.width,
	          height = _this$props.height,
	          data = _this$props.data,
	          dataKey = _this$props.dataKey,
	          aspectRatio = _this$props.aspectRatio;

	      var _this$computeRoot = this.computeRoot({
	        type: type,
	        width: width,
	        height: height,
	        data: data,
	        dataKey: dataKey,
	        aspectRatio: aspectRatio
	      }),
	          formatRoot = _this$computeRoot.formatRoot,
	          currentRoot = _this$computeRoot.currentRoot,
	          nestIndex = _this$computeRoot.nestIndex;

	      this.setState({
	        formatRoot: formatRoot,
	        currentRoot: currentRoot,
	        nestIndex: nestIndex
	      });
	    }
	  }, {
	    key: "computeRoot",
	    value: function computeRoot(_ref2) {
	      var type = _ref2.type,
	          width = _ref2.width,
	          height = _ref2.height,
	          data = _ref2.data,
	          dataKey = _ref2.dataKey,
	          aspectRatio = _ref2.aspectRatio;
	      var root = computeNode({
	        depth: 0,
	        node: {
	          children: data,
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        },
	        index: 0,
	        valueKey: dataKey
	      });
	      var formatRoot = squarify(root, aspectRatio);
	      var nestIndex = this.state.nestIndex;

	      if (type === 'nest') {
	        nestIndex.push(root);
	      }

	      return {
	        formatRoot: formatRoot,
	        currentRoot: root,
	        nestIndex: nestIndex
	      };
	    } // eslint-disable-next-line camelcase

	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var type = nextProps.type,
	          width = nextProps.width,
	          height = nextProps.height,
	          data = nextProps.data,
	          dataKey = nextProps.dataKey,
	          aspectRatio = nextProps.aspectRatio;

	      if (data !== this.props.data || type !== this.props.type || width !== this.props.width || height !== this.props.height || dataKey !== this.props.dataKey || aspectRatio !== this.props.aspectRatio) {
	        var nextRoot = this.computeRoot({
	          type: type,
	          width: width,
	          height: height,
	          data: data,
	          dataKey: dataKey,
	          aspectRatio: aspectRatio
	        });
	        this.setState(_objectSpread$C({}, this.constructor.createDefaultState(), {}, nextRoot, {
	          nestIndex: [nextRoot.currentRoot]
	        }));
	      }
	    }
	    /**
	     * Returns default, reset state for the treemap chart.
	     * @return {Object} Whole new state
	     */

	  }, {
	    key: "handleMouseEnter",
	    value: function handleMouseEnter(node, e) {
	      var _this$props2 = this.props,
	          onMouseEnter = _this$props2.onMouseEnter,
	          children = _this$props2.children;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (tooltipItem) {
	        this.setState({
	          isTooltipActive: true,
	          activeNode: node
	        }, function () {
	          if (onMouseEnter) {
	            onMouseEnter(node, e);
	          }
	        });
	      } else if (onMouseEnter) {
	        onMouseEnter(node, e);
	      }
	    }
	  }, {
	    key: "handleMouseLeave",
	    value: function handleMouseLeave(node, e) {
	      var _this$props3 = this.props,
	          onMouseLeave = _this$props3.onMouseLeave,
	          children = _this$props3.children;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (tooltipItem) {
	        this.setState({
	          isTooltipActive: false,
	          activeNode: null
	        }, function () {
	          if (onMouseLeave) {
	            onMouseLeave(node, e);
	          }
	        });
	      } else if (onMouseLeave) {
	        onMouseLeave(node, e);
	      }
	    }
	  }, {
	    key: "handleClick",
	    value: function handleClick(node) {
	      var _this$props4 = this.props,
	          onClick = _this$props4.onClick,
	          type = _this$props4.type;

	      if (type === 'nest' && node.children) {
	        var _this$props5 = this.props,
	            width = _this$props5.width,
	            height = _this$props5.height,
	            dataKey = _this$props5.dataKey,
	            aspectRatio = _this$props5.aspectRatio;
	        var root = computeNode({
	          depth: 0,
	          node: _objectSpread$C({}, node, {
	            x: 0,
	            y: 0,
	            width: width,
	            height: height
	          }),
	          index: 0,
	          valueKey: dataKey
	        });
	        var formatRoot = squarify(root, aspectRatio);
	        var nestIndex = this.state.nestIndex;
	        nestIndex.push(node);
	        this.setState({
	          formatRoot: formatRoot,
	          currentRoot: root,
	          nestIndex: nestIndex
	        });
	      }

	      if (onClick) {
	        onClick(node);
	      }
	    }
	  }, {
	    key: "handleNestIndex",
	    value: function handleNestIndex(node, i) {
	      var nestIndex = this.state.nestIndex;
	      var _this$props6 = this.props,
	          width = _this$props6.width,
	          height = _this$props6.height,
	          dataKey = _this$props6.dataKey,
	          aspectRatio = _this$props6.aspectRatio;
	      var root = computeNode({
	        depth: 0,
	        node: _objectSpread$C({}, node, {
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        }),
	        index: 0,
	        valueKey: dataKey
	      });
	      var formatRoot = squarify(root, aspectRatio);
	      nestIndex = nestIndex.slice(0, i + 1);
	      this.setState({
	        formatRoot: formatRoot,
	        currentRoot: node,
	        nestIndex: nestIndex
	      });
	    }
	  }, {
	    key: "renderItem",
	    value: function renderItem(content, nodeProps, isLeaf) {
	      var _this2 = this;

	      var _this$props7 = this.props,
	          isAnimationActive = _this$props7.isAnimationActive,
	          animationBegin = _this$props7.animationBegin,
	          animationDuration = _this$props7.animationDuration,
	          animationEasing = _this$props7.animationEasing,
	          isUpdateAnimationActive = _this$props7.isUpdateAnimationActive,
	          type = _this$props7.type,
	          animationId = _this$props7.animationId,
	          colorPanel = _this$props7.colorPanel;
	      var isAnimationFinished = this.state.isAnimationFinished;
	      var width = nodeProps.width,
	          height = nodeProps.height,
	          x = nodeProps.x,
	          y = nodeProps.y,
	          depth = nodeProps.depth;
	      var translateX = parseInt((Math.random() * 2 - 1) * width, 10);
	      var event = {};

	      if (isLeaf || type === 'nest') {
	        event = {
	          onMouseEnter: this.handleMouseEnter.bind(this, nodeProps),
	          onMouseLeave: this.handleMouseLeave.bind(this, nodeProps),
	          onClick: this.handleClick.bind(this, nodeProps)
	        };
	      }

	      if (!isAnimationActive) {
	        return react.createElement(Layer, event, this.constructor.renderContentItem(content, _objectSpread$C({}, nodeProps, {
	          isAnimationActive: false,
	          isUpdateAnimationActive: false,
	          width: width,
	          height: height,
	          x: x,
	          y: y
	        }), type, colorPanel));
	      }

	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        key: "treemap-".concat(animationId),
	        from: {
	          x: x,
	          y: y,
	          width: width,
	          height: height
	        },
	        to: {
	          x: x,
	          y: y,
	          width: width,
	          height: height
	        },
	        onAnimationStart: this.handleAnimationStart,
	        onAnimationEnd: this.handleAnimationEnd
	      }, function (_ref3) {
	        var currX = _ref3.x,
	            currY = _ref3.y,
	            currWidth = _ref3.width,
	            currHeight = _ref3.height;
	        return react.createElement(Animate, {
	          from: "translate(".concat(translateX, "px, ").concat(translateX, "px)"),
	          to: "translate(0, 0)",
	          attributeName: "transform",
	          begin: animationBegin,
	          easing: animationEasing,
	          isActive: isAnimationActive,
	          duration: animationDuration
	        }, react.createElement(Layer, event, function () {
	          // when animation Duration , only render depth=1 nodes
	          if (depth > 2 && !isAnimationFinished) {
	            return null;
	          }

	          return _this2.constructor.renderContentItem(content, _objectSpread$C({}, nodeProps, {
	            isAnimationActive: isAnimationActive,
	            isUpdateAnimationActive: !isUpdateAnimationActive,
	            width: currWidth,
	            height: currHeight,
	            x: currX,
	            y: currY
	          }), type, colorPanel);
	        }()));
	      });
	    }
	  }, {
	    key: "renderNode",
	    value: function renderNode(root, node, i) {
	      var _this3 = this;

	      var _this$props8 = this.props,
	          content = _this$props8.content,
	          type = _this$props8.type;

	      var nodeProps = _objectSpread$C({}, getPresentationAttributes(this.props), {}, node, {
	        root: root
	      });

	      var isLeaf = !node.children || !node.children.length;
	      var currentRoot = this.state.currentRoot;
	      var isCurrentRootChild = (currentRoot.children || []).filter(function (item) {
	        return item.depth === node.depth && item.name === node.name;
	      });

	      if (!isCurrentRootChild.length && root.depth && type === 'nest') {
	        return null;
	      }

	      return (// eslint-disable-next-line react/no-array-index-key
	        react.createElement(Layer, {
	          key: "recharts-treemap-node-".concat(i),
	          className: "recharts-treemap-depth-".concat(node.depth)
	        }, this.renderItem(content, nodeProps, isLeaf), node.children && node.children.length ? node.children.map(function (child, index) {
	          return _this3.renderNode(node, child, index);
	        }) : null)
	      );
	    }
	  }, {
	    key: "renderAllNodes",
	    value: function renderAllNodes() {
	      var formatRoot = this.state.formatRoot;

	      if (!formatRoot) {
	        return null;
	      }

	      return this.renderNode(formatRoot, formatRoot, 0);
	    }
	  }, {
	    key: "renderTooltip",
	    value: function renderTooltip() {
	      var _this$props9 = this.props,
	          children = _this$props9.children,
	          nameKey = _this$props9.nameKey;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (!tooltipItem) {
	        return null;
	      }

	      var _this$props10 = this.props,
	          width = _this$props10.width,
	          height = _this$props10.height,
	          dataKey = _this$props10.dataKey;
	      var _this$state = this.state,
	          isTooltipActive = _this$state.isTooltipActive,
	          activeNode = _this$state.activeNode;
	      var viewBox = {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height
	      };
	      var coordinate = activeNode ? {
	        x: activeNode.x + activeNode.width / 2,
	        y: activeNode.y + activeNode.height / 2
	      } : null;
	      var payload = isTooltipActive && activeNode ? [{
	        payload: activeNode,
	        name: getValueByDataKey(activeNode, nameKey, ''),
	        value: getValueByDataKey(activeNode, dataKey)
	      }] : [];
	      return react.cloneElement(tooltipItem, {
	        viewBox: viewBox,
	        active: isTooltipActive,
	        coordinate: coordinate,
	        label: '',
	        payload: payload
	      });
	    } // render nest treemap

	  }, {
	    key: "renderNestIndex",
	    value: function renderNestIndex() {
	      var _this4 = this;

	      var _this$props11 = this.props,
	          nameKey = _this$props11.nameKey,
	          nestIndexContent = _this$props11.nestIndexContent;
	      var nestIndex = this.state.nestIndex;
	      return react.createElement("div", {
	        className: "recharts-treemap-nest-index-wrapper",
	        style: {
	          marginTop: '8px',
	          textAlign: 'center'
	        }
	      }, nestIndex.map(function (item, i) {
	        var name = get_1(item, nameKey, 'root');

	        var content = null;

	        if (react.isValidElement(nestIndexContent)) {
	          content = react.cloneElement(nestIndexContent, item, i);
	        }

	        if (isFunction_1(nestIndexContent)) {
	          content = nestIndexContent(item, i);
	        } else {
	          content = name;
	        }

	        return (// eslint-disable-next-line jsx-a11y/click-events-have-key-events
	          react.createElement("div", {
	            onClick: _this4.handleNestIndex.bind(_this4, item, i),
	            key: "nest-index-".concat(uniqueId()),
	            className: "recharts-treemap-nest-index-box",
	            style: {
	              cursor: 'pointer',
	              display: 'inline-block',
	              padding: '0 7px',
	              background: '#000',
	              color: '#fff',
	              marginRight: '3px'
	            }
	          }, content)
	        );
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      if (!validateWidthHeight(this)) {
	        return null;
	      }

	      var _this$props12 = this.props,
	          width = _this$props12.width,
	          height = _this$props12.height,
	          className = _this$props12.className,
	          style = _this$props12.style,
	          children = _this$props12.children,
	          type = _this$props12.type,
	          others = _objectWithoutProperties$f(_this$props12, ["width", "height", "className", "style", "children", "type"]);

	      var attrs = getPresentationAttributes(others);
	      return react.createElement("div", {
	        className: classnames('recharts-wrapper', className),
	        style: _objectSpread$C({}, style, {
	          position: 'relative',
	          cursor: 'default',
	          width: width,
	          height: height
	        })
	      }, react.createElement(Surface, _extends$x({}, attrs, {
	        width: width,
	        height: type === 'nest' ? height - 30 : height
	      }), this.renderAllNodes(), filterSvgElements(children)), this.renderTooltip(), type === 'nest' && this.renderNestIndex());
	    }
	  }], [{
	    key: "createDefaultState",
	    value: function createDefaultState() {
	      return {
	        isTooltipActive: false,
	        isAnimationFinished: false,
	        activeNode: null,
	        currentRoot: null,
	        formatRoot: null,
	        nestIndex: []
	      };
	    }
	  }, {
	    key: "renderContentItem",
	    value: function renderContentItem(content, nodeProps, type, colorPanel) {
	      if (react.isValidElement(content)) {
	        return react.cloneElement(content, nodeProps);
	      }

	      if (isFunction_1(content)) {
	        return content(nodeProps);
	      } // optimize default shape


	      var x = nodeProps.x,
	          y = nodeProps.y,
	          width = nodeProps.width,
	          height = nodeProps.height,
	          index = nodeProps.index;
	      var arrow = null;

	      if (width > 10 && height > 10 && nodeProps.children && type === 'nest') {
	        arrow = react.createElement(Polygon, {
	          points: [{
	            x: x + 2,
	            y: y + height / 2
	          }, {
	            x: x + 6,
	            y: y + height / 2 + 3
	          }, {
	            x: x + 2,
	            y: y + height / 2 + 6
	          }]
	        });
	      }

	      var text = null;
	      var nameSize = getStringSize(nodeProps.name);

	      if (width > 20 && height > 20 && nameSize.width < width && nameSize.height < height) {
	        text = react.createElement("text", {
	          x: x + 8,
	          y: y + height / 2 + 7,
	          fontSize: 14
	        }, nodeProps.name);
	      }

	      var colors = colorPanel || COLOR_PANEL;
	      return react.createElement("g", null, react.createElement(Rectangle, _extends$x({
	        fill: nodeProps.depth < 2 ? colors[index % colors.length] : 'rgba(255,255,255,0)',
	        stroke: "#fff"
	      }, omit_1(nodeProps, 'children'))), arrow, text);
	    }
	  }]);

	  return Treemap;
	}(react_4);

	Treemap.displayName = 'Treemap';
	Treemap.propTypes = {
	  width: propTypes.number,
	  height: propTypes.number,
	  data: propTypes.array,
	  animationId: propTypes.number,
	  style: propTypes.object,
	  aspectRatio: propTypes.number,
	  content: propTypes.oneOfType([propTypes.element, propTypes.func]),
	  fill: propTypes.string,
	  stroke: propTypes.string,
	  className: propTypes.string,
	  nameKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
	  // optional values flat/nest, flat show whole treemap, nest only show depth=1 node
	  type: propTypes.oneOf(['flat', 'nest']),
	  colorPanel: propTypes.array,
	  // customize nest index content
	  nestIndexContent: propTypes.oneOfType([propTypes.element, propTypes.func]),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onClick: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  isUpdateAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])
	};
	Treemap.defaultProps = {
	  dataKey: 'value',
	  aspectRatio: 0.5 * (1 + Math.sqrt(5)),
	  isAnimationActive: !isSsr(),
	  isUpdateAnimationActive: !isSsr(),
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'linear',
	  type: 'flat'
	};

	/**
	 * The base implementation of `_.sum` and `_.sumBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function baseSum(array, iteratee) {
	  var result,
	      index = -1,
	      length = array.length;

	  while (++index < length) {
	    var current = iteratee(array[index]);
	    if (current !== undefined) {
	      result = result === undefined ? current : (result + current);
	    }
	  }
	  return result;
	}

	var _baseSum = baseSum;

	/**
	 * This method is like `_.sum` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the value to be summed.
	 * The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	 *
	 * _.sumBy(objects, function(o) { return o.n; });
	 * // => 20
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.sumBy(objects, 'n');
	 * // => 20
	 */
	function sumBy(array, iteratee) {
	  return (array && array.length)
	    ? _baseSum(array, _baseIteratee(iteratee))
	    : 0;
	}

	var sumBy_1 = sumBy;

	function _typeof$E(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$E = function _typeof(obj) { return typeof obj; }; } else { _typeof$E = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$E(obj); }

	function _objectWithoutProperties$g(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$h(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$h(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _extends$y() { _extends$y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$y.apply(this, arguments); }

	function _classCallCheck$C(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$C(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$C(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$C(Constructor.prototype, protoProps); if (staticProps) _defineProperties$C(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$B(self, call) { if (call && (_typeof$E(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$C(self); }

	function _assertThisInitialized$C(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$B(o) { _getPrototypeOf$B = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$B(o); }

	function _inherits$B(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$B(subClass, superClass); }

	function _setPrototypeOf$B(o, p) { _setPrototypeOf$B = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$B(o, p); }

	function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$A(source, true).forEach(function (key) { _defineProperty$H(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$A(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$H(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	var defaultCoordinateOfTooltip = {
	  x: 0,
	  y: 0
	};

	var interpolationGenerator = function interpolationGenerator(a, b) {
	  var ka = +a;
	  var kb = b - ka;
	  return function (t) {
	    return ka + kb * t;
	  };
	};

	var centerY = function centerY(node) {
	  return node.y + node.dy / 2;
	};

	var getValue$1 = function getValue(entry) {
	  return entry && entry.value || 0;
	};

	var getSumOfIds = function getSumOfIds(links, ids) {
	  return ids.reduce(function (result, id) {
	    return result + getValue$1(links[id]);
	  }, 0);
	};

	var getSumWithWeightedSource = function getSumWithWeightedSource(tree, links, ids) {
	  return ids.reduce(function (result, id) {
	    var link = links[id];
	    var sourceNode = tree[link.source];
	    return result + centerY(sourceNode) * getValue$1(links[id]);
	  }, 0);
	};

	var getSumWithWeightedTarget = function getSumWithWeightedTarget(tree, links, ids) {
	  return ids.reduce(function (result, id) {
	    var link = links[id];
	    var targetNode = tree[link.target];
	    return result + centerY(targetNode) * getValue$1(links[id]);
	  }, 0);
	};

	var ascendingY = function ascendingY(a, b) {
	  return a.y - b.y;
	};

	var searchTargetsAndSources = function searchTargetsAndSources(links, id) {
	  var sourceNodes = [];
	  var sourceLinks = [];
	  var targetNodes = [];
	  var targetLinks = [];

	  for (var i = 0, len = links.length; i < len; i++) {
	    var link = links[i];

	    if (link.source === id) {
	      targetNodes.push(link.target);
	      targetLinks.push(i);
	    }

	    if (link.target === id) {
	      sourceNodes.push(link.source);
	      sourceLinks.push(i);
	    }
	  }

	  return {
	    sourceNodes: sourceNodes,
	    sourceLinks: sourceLinks,
	    targetLinks: targetLinks,
	    targetNodes: targetNodes
	  };
	};

	var updateDepthOfTargets = function updateDepthOfTargets(tree, curNode) {
	  var targetNodes = curNode.targetNodes;

	  for (var i = 0, len = targetNodes.length; i < len; i++) {
	    var target = tree[targetNodes[i]];

	    if (target) {
	      target.depth = Math.max(curNode.depth + 1, target.depth);
	      updateDepthOfTargets(tree, target);
	    }
	  }
	};

	var getNodesTree = function getNodesTree(_ref, width, nodeWidth) {
	  var nodes = _ref.nodes,
	      links = _ref.links;
	  var tree = nodes.map(function (entry, index) {
	    var result = searchTargetsAndSources(links, index);
	    return _objectSpread$D({}, entry, {}, result, {
	      value: Math.max(getSumOfIds(links, result.sourceLinks), getSumOfIds(links, result.targetLinks)),
	      depth: 0
	    });
	  });

	  for (var i = 0, len = tree.length; i < len; i++) {
	    var node = tree[i];

	    if (!node.sourceNodes.length) {
	      updateDepthOfTargets(tree, node);
	    }
	  }

	  var maxDepth = maxBy_1(tree, function (entry) {
	    return entry.depth;
	  }).depth;

	  if (maxDepth >= 1) {
	    var childWidth = (width - nodeWidth) / maxDepth;

	    for (var _i = 0, _len = tree.length; _i < _len; _i++) {
	      var _node = tree[_i];

	      if (!_node.targetNodes.length) {
	        _node.depth = maxDepth;
	      }

	      _node.x = _node.depth * childWidth;
	      _node.dx = nodeWidth;
	    }
	  }

	  return {
	    tree: tree,
	    maxDepth: maxDepth
	  };
	};

	var getDepthTree = function getDepthTree(tree) {
	  var result = [];

	  for (var i = 0, len = tree.length; i < len; i++) {
	    var node = tree[i];

	    if (!result[node.depth]) {
	      result[node.depth] = [];
	    }

	    result[node.depth].push(node);
	  }

	  return result;
	};

	var updateYOfTree = function updateYOfTree(depthTree, height, nodePadding, links) {
	  var yRatio = min_1(depthTree.map(function (nodes) {
	    return (height - (nodes.length - 1) * nodePadding) / sumBy_1(nodes, getValue$1);
	  }));

	  for (var d = 0, maxDepth = depthTree.length; d < maxDepth; d++) {
	    for (var i = 0, len = depthTree[d].length; i < len; i++) {
	      var node = depthTree[d][i];
	      node.y = i;
	      node.dy = node.value * yRatio;
	    }
	  }

	  return links.map(function (link) {
	    return _objectSpread$D({}, link, {
	      dy: getValue$1(link) * yRatio
	    });
	  });
	};

	var resolveCollisions = function resolveCollisions(depthTree, height, nodePadding) {
	  for (var i = 0, len = depthTree.length; i < len; i++) {
	    var nodes = depthTree[i];
	    var n = nodes.length; // Sort by the value of y

	    nodes.sort(ascendingY);
	    var y0 = 0;

	    for (var j = 0; j < n; j++) {
	      var node = nodes[j];
	      var dy = y0 - node.y;

	      if (dy > 0) {
	        node.y += dy;
	      }

	      y0 = node.y + node.dy + nodePadding;
	    }

	    y0 = height + nodePadding;

	    for (var _j = n - 1; _j >= 0; _j--) {
	      var _node2 = nodes[_j];

	      var _dy = _node2.y + _node2.dy + nodePadding - y0;

	      if (_dy > 0) {
	        _node2.y -= _dy;
	        y0 = _node2.y;
	      } else {
	        break;
	      }
	    }
	  }
	};

	var relaxLeftToRight = function relaxLeftToRight(tree, depthTree, links, alpha) {
	  for (var i = 0, maxDepth = depthTree.length; i < maxDepth; i++) {
	    var nodes = depthTree[i];

	    for (var j = 0, len = nodes.length; j < len; j++) {
	      var node = nodes[j];

	      if (node.sourceLinks.length) {
	        var sourceSum = getSumOfIds(links, node.sourceLinks);
	        var weightedSum = getSumWithWeightedSource(tree, links, node.sourceLinks);
	        var y = weightedSum / sourceSum;
	        node.y += (y - centerY(node)) * alpha;
	      }
	    }
	  }
	};

	var relaxRightToLeft = function relaxRightToLeft(tree, depthTree, links, alpha) {
	  for (var i = depthTree.length - 1; i >= 0; i--) {
	    var nodes = depthTree[i];

	    for (var j = 0, len = nodes.length; j < len; j++) {
	      var node = nodes[j];

	      if (node.targetLinks.length) {
	        var targetSum = getSumOfIds(links, node.targetLinks);
	        var weightedSum = getSumWithWeightedTarget(tree, links, node.targetLinks);
	        var y = weightedSum / targetSum;
	        node.y += (y - centerY(node)) * alpha;
	      }
	    }
	  }
	};

	var updateYOfLinks = function updateYOfLinks(tree, links) {
	  for (var i = 0, len = tree.length; i < len; i++) {
	    var node = tree[i];
	    var sy = 0;
	    var ty = 0;
	    node.targetLinks.sort(function (a, b) {
	      return tree[links[a].target].y - tree[links[b].target].y;
	    });
	    node.sourceLinks.sort(function (a, b) {
	      return tree[links[a].source].y - tree[links[b].source].y;
	    });

	    for (var j = 0, tLen = node.targetLinks.length; j < tLen; j++) {
	      var link = links[node.targetLinks[j]];

	      if (link) {
	        link.sy = sy;
	        sy += link.dy;
	      }
	    }

	    for (var _j2 = 0, sLen = node.sourceLinks.length; _j2 < sLen; _j2++) {
	      var _link = links[node.sourceLinks[_j2]];

	      if (_link) {
	        _link.ty = ty;
	        ty += _link.dy;
	      }
	    }
	  }
	};

	var computeData = function computeData(_ref2) {
	  var data = _ref2.data,
	      width = _ref2.width,
	      height = _ref2.height,
	      iterations = _ref2.iterations,
	      nodeWidth = _ref2.nodeWidth,
	      nodePadding = _ref2.nodePadding;
	  var links = data.links;

	  var _getNodesTree = getNodesTree(data, width, nodeWidth),
	      tree = _getNodesTree.tree;

	  var depthTree = getDepthTree(tree);
	  var newLinks = updateYOfTree(depthTree, height, nodePadding, links);
	  resolveCollisions(depthTree, height, nodePadding);
	  var alpha = 1;

	  for (var i = 1; i <= iterations; i++) {
	    relaxRightToLeft(tree, depthTree, newLinks, alpha *= 0.99);
	    resolveCollisions(depthTree, height, nodePadding);
	    relaxLeftToRight(tree, depthTree, newLinks, alpha);
	    resolveCollisions(depthTree, height, nodePadding);
	  }

	  updateYOfLinks(tree, newLinks);
	  return {
	    nodes: tree,
	    links: newLinks
	  };
	};

	var getCoordinateOfTooltip = function getCoordinateOfTooltip(el, type) {
	  if (type === 'node') {
	    return {
	      x: el.x + el.width / 2,
	      y: el.y + el.height / 2
	    };
	  }

	  return {
	    x: (el.sourceX + el.targetX) / 2,
	    y: (el.sourceY + el.targetY) / 2
	  };
	};

	var getPayloadOfTooltip = function getPayloadOfTooltip(el, type, nameKey) {
	  var payload = el.payload;

	  if (type === 'node') {
	    return [{
	      payload: el,
	      name: getValueByDataKey(payload, nameKey, ''),
	      value: getValueByDataKey(payload, 'value')
	    }];
	  }

	  if (payload.source && payload.target) {
	    var sourceName = getValueByDataKey(payload.source, nameKey, '');
	    var targetName = getValueByDataKey(payload.target, nameKey, '');
	    return [{
	      payload: el,
	      name: "".concat(sourceName, " - ").concat(targetName),
	      value: getValueByDataKey(payload, 'value')
	    }];
	  }

	  return [];
	};

	var Sankey =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$B(Sankey, _PureComponent);

	  function Sankey(props) {
	    var _this;

	    _classCallCheck$C(this, Sankey);

	    _this = _possibleConstructorReturn$B(this, _getPrototypeOf$B(Sankey).call(this, props));
	    _this.state = _this.constructor.createDefaultState(props);
	    return _this;
	  } // eslint-disable-next-line camelcase


	  _createClass$C(Sankey, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          data = _this$props.data,
	          width = _this$props.width,
	          height = _this$props.height,
	          margin = _this$props.margin,
	          iterations = _this$props.iterations,
	          nodeWidth = _this$props.nodeWidth,
	          nodePadding = _this$props.nodePadding,
	          nameKey = _this$props.nameKey;

	      if (nextProps.data !== data || nextProps.width !== width || nextProps.height !== height || !shallowEqual$1(nextProps.margin, margin) || nextProps.iterations !== iterations || nextProps.nodeWidth !== nodeWidth || nextProps.nodePadding !== nodePadding || nextProps.nameKey !== nameKey) {
	        this.setState(this.constructor.createDefaultState(nextProps));
	      }
	    }
	    /**
	     * Returns default, reset state for the sankey chart.
	     * @param  {Object} props The latest props
	     * @return {Object} Whole new state
	     */

	  }, {
	    key: "handleMouseEnter",
	    value: function handleMouseEnter(el, type, e) {
	      var _this$props2 = this.props,
	          onMouseEnter = _this$props2.onMouseEnter,
	          children = _this$props2.children;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (tooltipItem) {
	        this.setState({
	          activeElement: el,
	          activeElementType: type,
	          isTooltipActive: true
	        }, function () {
	          if (onMouseEnter) {
	            onMouseEnter(el, type, e);
	          }
	        });
	      } else if (onMouseEnter) {
	        onMouseEnter(el, type, e);
	      }
	    }
	  }, {
	    key: "handleMouseLeave",
	    value: function handleMouseLeave(el, type, e) {
	      var _this$props3 = this.props,
	          onMouseLeave = _this$props3.onMouseLeave,
	          children = _this$props3.children;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (tooltipItem) {
	        this.setState({
	          isTooltipActive: false
	        }, function () {
	          if (onMouseLeave) {
	            onMouseLeave(el, type, e);
	          }
	        });
	      } else if (onMouseLeave) {
	        onMouseLeave(el, type, e);
	      }
	    }
	  }, {
	    key: "handleClick",
	    value: function handleClick(el, type, e) {
	      var onClick = this.props.onClick;
	      if (onClick) onClick(el, type, e);
	    }
	  }, {
	    key: "renderLinks",
	    value: function renderLinks(links, nodes) {
	      var _this2 = this;

	      var _this$props4 = this.props,
	          linkCurvature = _this$props4.linkCurvature,
	          linkContent = _this$props4.link,
	          margin = _this$props4.margin;
	      var top = margin.top || 0;
	      var left = margin.left || 0;
	      return react.createElement(Layer, {
	        className: "recharts-sankey-links",
	        key: "recharts-sankey-links"
	      }, links.map(function (link, i) {
	        var sourceRelativeY = link.sy,
	            targetRelativeY = link.ty,
	            linkWidth = link.dy;
	        var source = nodes[link.source];
	        var target = nodes[link.target];
	        var sourceX = source.x + source.dx + left;
	        var targetX = target.x + left;
	        var interpolationFunc = interpolationGenerator(sourceX, targetX);
	        var sourceControlX = interpolationFunc(linkCurvature);
	        var targetControlX = interpolationFunc(1 - linkCurvature);
	        var sourceY = source.y + sourceRelativeY + linkWidth / 2 + top;
	        var targetY = target.y + targetRelativeY + linkWidth / 2 + top;

	        var linkProps = _objectSpread$D({
	          sourceX: sourceX,
	          targetX: targetX,
	          sourceY: sourceY,
	          targetY: targetY,
	          sourceControlX: sourceControlX,
	          targetControlX: targetControlX,
	          sourceRelativeY: sourceRelativeY,
	          targetRelativeY: targetRelativeY,
	          linkWidth: linkWidth,
	          index: i,
	          payload: _objectSpread$D({}, link, {
	            source: source,
	            target: target
	          })
	        }, getPresentationAttributes(linkContent));

	        var events = {
	          onMouseEnter: _this2.handleMouseEnter.bind(_this2, linkProps, 'link'),
	          onMouseLeave: _this2.handleMouseLeave.bind(_this2, linkProps, 'link'),
	          onClick: _this2.handleClick.bind(_this2, linkProps, 'link')
	        };
	        return (// eslint-disable-next-line react/no-array-index-key
	          react.createElement(Layer, _extends$y({
	            key: "link".concat(i)
	          }, events), _this2.constructor.renderLinkItem(linkContent, linkProps))
	        );
	      }));
	    }
	  }, {
	    key: "renderNodes",
	    value: function renderNodes(nodes) {
	      var _this3 = this;

	      var _this$props5 = this.props,
	          nodeContent = _this$props5.node,
	          margin = _this$props5.margin;
	      var top = margin.top || 0;
	      var left = margin.left || 0;
	      return react.createElement(Layer, {
	        className: "recharts-sankey-nodes",
	        key: "recharts-sankey-nodes"
	      }, nodes.map(function (node, i) {
	        var x = node.x,
	            y = node.y,
	            dx = node.dx,
	            dy = node.dy;

	        var nodeProps = _objectSpread$D({}, getPresentationAttributes(nodeContent), {
	          x: x + left,
	          y: y + top,
	          width: dx,
	          height: dy,
	          index: i,
	          payload: node
	        });

	        var events = {
	          onMouseEnter: _this3.handleMouseEnter.bind(_this3, nodeProps, 'node'),
	          onMouseLeave: _this3.handleMouseLeave.bind(_this3, nodeProps, 'node'),
	          onClick: _this3.handleClick.bind(_this3, nodeProps, 'node')
	        };
	        return (// eslint-disable-next-line react/no-array-index-key
	          react.createElement(Layer, _extends$y({
	            key: "node".concat(i)
	          }, events), _this3.constructor.renderNodeItem(nodeContent, nodeProps))
	        );
	      }));
	    }
	  }, {
	    key: "renderTooltip",
	    value: function renderTooltip() {
	      var _this$props6 = this.props,
	          children = _this$props6.children,
	          width = _this$props6.width,
	          height = _this$props6.height,
	          nameKey = _this$props6.nameKey;
	      var tooltipItem = findChildByType(children, Tooltip);

	      if (!tooltipItem) {
	        return null;
	      }

	      var _this$state = this.state,
	          isTooltipActive = _this$state.isTooltipActive,
	          activeElement = _this$state.activeElement,
	          activeElementType = _this$state.activeElementType;
	      var viewBox = {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height
	      };
	      var coordinate = activeElement ? getCoordinateOfTooltip(activeElement, activeElementType) : defaultCoordinateOfTooltip;
	      var payload = activeElement ? getPayloadOfTooltip(activeElement, activeElementType, nameKey) : [];
	      return react.cloneElement(tooltipItem, {
	        viewBox: viewBox,
	        active: isTooltipActive,
	        coordinate: coordinate,
	        label: '',
	        payload: payload
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      if (!validateWidthHeight(this)) {
	        return null;
	      }

	      var _this$props7 = this.props,
	          width = _this$props7.width,
	          height = _this$props7.height,
	          className = _this$props7.className,
	          style = _this$props7.style,
	          children = _this$props7.children,
	          others = _objectWithoutProperties$g(_this$props7, ["width", "height", "className", "style", "children"]);

	      var _this$state2 = this.state,
	          links = _this$state2.links,
	          nodes = _this$state2.nodes;
	      var attrs = getPresentationAttributes(others);
	      return react.createElement("div", {
	        className: classnames('recharts-wrapper', className),
	        style: _objectSpread$D({}, style, {
	          position: 'relative',
	          cursor: 'default',
	          width: width,
	          height: height
	        })
	      }, react.createElement(Surface, _extends$y({}, attrs, {
	        width: width,
	        height: height
	      }), filterSvgElements(children), this.renderLinks(links, nodes), this.renderNodes(nodes)), this.renderTooltip());
	    }
	  }], [{
	    key: "createDefaultState",
	    value: function createDefaultState(props) {
	      var data = props.data,
	          width = props.width,
	          height = props.height,
	          margin = props.margin,
	          iterations = props.iterations,
	          nodeWidth = props.nodeWidth,
	          nodePadding = props.nodePadding;
	      var contentWidth = width - (margin && margin.left || 0) - (margin && margin.right || 0);
	      var contentHeight = height - (margin && margin.top || 0) - (margin && margin.bottom || 0);

	      var _computeData = computeData({
	        data: data,
	        width: contentWidth,
	        height: contentHeight,
	        iterations: iterations,
	        nodeWidth: nodeWidth,
	        nodePadding: nodePadding
	      }),
	          links = _computeData.links,
	          nodes = _computeData.nodes;

	      return {
	        activeElement: null,
	        activeElementType: null,
	        isTooltipActive: false,
	        nodes: nodes,
	        links: links
	      };
	    }
	  }, {
	    key: "renderLinkItem",
	    value: function renderLinkItem(option, props) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      if (isFunction_1(option)) {
	        return option(props);
	      }

	      var sourceX = props.sourceX,
	          sourceY = props.sourceY,
	          sourceControlX = props.sourceControlX,
	          targetX = props.targetX,
	          targetY = props.targetY,
	          targetControlX = props.targetControlX,
	          linkWidth = props.linkWidth,
	          others = _objectWithoutProperties$g(props, ["sourceX", "sourceY", "sourceControlX", "targetX", "targetY", "targetControlX", "linkWidth"]);

	      return react.createElement("path", _extends$y({
	        className: "recharts-sankey-link",
	        d: "\n          M".concat(sourceX, ",").concat(sourceY, "\n          C").concat(sourceControlX, ",").concat(sourceY, " ").concat(targetControlX, ",").concat(targetY, " ").concat(targetX, ",").concat(targetY, "\n        "),
	        fill: "none",
	        stroke: "#333",
	        strokeWidth: linkWidth,
	        strokeOpacity: "0.2"
	      }, getPresentationAttributes(others)));
	    }
	  }, {
	    key: "renderNodeItem",
	    value: function renderNodeItem(option, props) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      if (isFunction_1(option)) {
	        return option(props);
	      }

	      return react.createElement(Rectangle, _extends$y({
	        className: "recharts-sankey-node",
	        fill: "#0088fe",
	        fillOpacity: "0.8"
	      }, props));
	    }
	  }]);

	  return Sankey;
	}(react_4);

	Sankey.displayName = 'Sankey';
	Sankey.propTypes = _objectSpread$D({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  nameKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  width: propTypes.number,
	  height: propTypes.number,
	  data: propTypes.shape({
	    nodes: propTypes.array,
	    links: propTypes.arrayOf(propTypes.shape({
	      target: propTypes.number,
	      source: propTypes.number,
	      value: propTypes.number
	    }))
	  }),
	  nodePadding: propTypes.number,
	  nodeWidth: propTypes.number,
	  linkCurvature: propTypes.number,
	  iterations: propTypes.number,
	  node: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func]),
	  link: propTypes.oneOfType([propTypes.object, propTypes.element, propTypes.func]),
	  style: propTypes.object,
	  className: propTypes.string,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
	  margin: propTypes.shape({
	    top: propTypes.number,
	    right: propTypes.number,
	    bottom: propTypes.number,
	    left: propTypes.number
	  })
	});
	Sankey.defaultProps = {
	  nodePadding: 10,
	  nodeWidth: 10,
	  nameKey: 'name',
	  dataKey: 'value',
	  linkCurvature: 0.5,
	  iterations: 32,
	  margin: {
	    top: 5,
	    right: 5,
	    bottom: 5,
	    left: 5
	  }
	};

	/**
	 * @fileOverview Radar Chart
	 */
	var RadarChart = generateCategoricalChart({
	  chartName: 'RadarChart',
	  GraphicalChild: Radar,
	  axisComponents: [{
	    axisType: 'angleAxis',
	    AxisComp: PolarAngleAxis
	  }, {
	    axisType: 'radiusAxis',
	    AxisComp: PolarRadiusAxis
	  }],
	  formatAxisMap: formatAxisMap,
	  defaultProps: {
	    layout: 'centric',
	    startAngle: 90,
	    endAngle: -270,
	    cx: '50%',
	    cy: '50%',
	    innerRadius: 0,
	    outerRadius: '80%'
	  },
	  propTypes: {
	    layout: propTypes.oneOf(['centric']),
	    startAngle: propTypes.number,
	    endAngle: propTypes.number,
	    cx: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    cy: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    innerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    outerRadius: propTypes.oneOfType([propTypes.number, propTypes.string])
	  }
	});

	/**
	 * @fileOverview Scatter Chart
	 */
	var ScatterChart = generateCategoricalChart({
	  chartName: 'ScatterChart',
	  GraphicalChild: Scatter,
	  eventType: 'single',
	  axisComponents: [{
	    axisType: 'xAxis',
	    AxisComp: XAxis
	  }, {
	    axisType: 'yAxis',
	    AxisComp: YAxis
	  }, {
	    axisType: 'zAxis',
	    AxisComp: ZAxis
	  }],
	  formatAxisMap: formatAxisMap$1
	});

	/**
	 * @fileOverview Area Chart
	 */
	var AreaChart = generateCategoricalChart({
	  chartName: 'AreaChart',
	  GraphicalChild: Area,
	  axisComponents: [{
	    axisType: 'xAxis',
	    AxisComp: XAxis
	  }, {
	    axisType: 'yAxis',
	    AxisComp: YAxis
	  }],
	  formatAxisMap: formatAxisMap$1
	});

	/**
	 * @fileOverview Radar Bar Chart
	 */
	var RadialBarChart = generateCategoricalChart({
	  chartName: 'RadialBarChart',
	  GraphicalChild: RadialBar,
	  legendContent: 'children',
	  axisComponents: [{
	    axisType: 'angleAxis',
	    AxisComp: PolarAngleAxis
	  }, {
	    axisType: 'radiusAxis',
	    AxisComp: PolarRadiusAxis
	  }],
	  formatAxisMap: formatAxisMap,
	  defaultProps: {
	    layout: 'radial',
	    startAngle: 0,
	    endAngle: 360,
	    cx: '50%',
	    cy: '50%',
	    innerRadius: 0,
	    outerRadius: '80%'
	  },
	  propTypes: {
	    layout: propTypes.oneOf(['radial']),
	    startAngle: propTypes.number,
	    endAngle: propTypes.number,
	    cx: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    cy: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    innerRadius: propTypes.oneOfType([propTypes.number, propTypes.string]),
	    outerRadius: propTypes.oneOfType([propTypes.number, propTypes.string])
	  }
	});

	/**
	 * @fileOverview Composed Chart
	 */
	var ComposedChart = generateCategoricalChart({
	  chartName: 'ComposedChart',
	  GraphicalChild: [Line, Area, Bar, Scatter],
	  axisComponents: [{
	    axisType: 'xAxis',
	    AxisComp: XAxis
	  }, {
	    axisType: 'yAxis',
	    AxisComp: YAxis
	  }, {
	    axisType: 'zAxis',
	    AxisComp: ZAxis
	  }],
	  formatAxisMap: formatAxisMap$1
	});

	function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$B(source, true).forEach(function (key) { _defineProperty$I(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$B(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$I(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _typeof$F(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$F = function _typeof(obj) { return typeof obj; }; } else { _typeof$F = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$F(obj); }

	function _extends$z() { _extends$z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$z.apply(this, arguments); }

	function _classCallCheck$D(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$D(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$D(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$D(Constructor.prototype, protoProps); if (staticProps) _defineProperties$D(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$C(self, call) { if (call && (_typeof$F(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$D(self); }

	function _assertThisInitialized$D(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$C(o) { _getPrototypeOf$C = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$C(o); }

	function _inherits$C(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$C(subClass, superClass); }

	function _setPrototypeOf$C(o, p) { _setPrototypeOf$C = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$C(o, p); }

	var getTrapezoidPath = function getTrapezoidPath(x, y, upperWidth, lowerWidth, height) {
	  var widthGap = upperWidth - lowerWidth;
	  var path;
	  path = "M ".concat(x, ",").concat(y);
	  path += "L ".concat(x + upperWidth, ",").concat(y);
	  path += "L ".concat(x + upperWidth - widthGap / 2, ",").concat(y + height);
	  path += "L ".concat(x + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y + height);
	  path += "L ".concat(x, ",").concat(y, " Z");
	  return path;
	};

	var Trapezoid =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$C(Trapezoid, _PureComponent);

	  function Trapezoid() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$D(this, Trapezoid);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$C(this, (_getPrototypeOf2 = _getPrototypeOf$C(Trapezoid)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      totalLength: -1
	    };
	    return _this;
	  }

	  _createClass$D(Trapezoid, [{
	    key: "componentDidMount",

	    /* eslint-disable  react/no-did-mount-set-state */
	    value: function componentDidMount() {
	      if (this.node && this.node.getTotalLength) {
	        try {
	          var totalLength = this.node.getTotalLength();

	          if (totalLength) {
	            this.setState({
	              totalLength: totalLength
	            });
	          }
	        } catch (err) {// calculate total length error
	        }
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          x = _this$props.x,
	          y = _this$props.y,
	          upperWidth = _this$props.upperWidth,
	          lowerWidth = _this$props.lowerWidth,
	          height = _this$props.height,
	          className = _this$props.className;
	      var totalLength = this.state.totalLength;
	      var _this$props2 = this.props,
	          animationEasing = _this$props2.animationEasing,
	          animationDuration = _this$props2.animationDuration,
	          animationBegin = _this$props2.animationBegin,
	          isUpdateAnimationActive = _this$props2.isUpdateAnimationActive;

	      if (x !== +x || y !== +y || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
	        return null;
	      }

	      var layerClass = classnames('recharts-trapezoid', className);

	      if (!isUpdateAnimationActive) {
	        return react.createElement("g", null, react.createElement("path", _extends$z({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {
	          className: layerClass,
	          d: getTrapezoidPath(x, y, upperWidth, lowerWidth, height)
	        })));
	      }

	      return react.createElement(Animate, {
	        canBegin: totalLength > 0,
	        from: {
	          upperWidth: 0,
	          lowerWidth: 0,
	          height: height,
	          x: x,
	          y: y
	        },
	        to: {
	          upperWidth: upperWidth,
	          lowerWidth: lowerWidth,
	          height: height,
	          x: x,
	          y: y
	        },
	        duration: animationDuration,
	        animationEasing: animationEasing,
	        isActive: isUpdateAnimationActive
	      }, function (_ref) {
	        var currUpperWidth = _ref.upperWidth,
	            currLowerWidth = _ref.lowerWidth,
	            currHeight = _ref.height,
	            currX = _ref.x,
	            currY = _ref.y;
	        return react.createElement(Animate, {
	          canBegin: totalLength > 0,
	          from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
	          to: "".concat(totalLength, "px 0px"),
	          attributeName: "strokeDasharray",
	          begin: animationBegin,
	          duration: animationDuration,
	          easing: animationEasing
	        }, react.createElement("path", _extends$z({}, getPresentationAttributes(_this2.props), filterEventAttributes(_this2.props), {
	          className: layerClass,
	          d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
	          ref: function ref(node) {
	            _this2.node = node;
	          }
	        })));
	      });
	    }
	  }]);

	  return Trapezoid;
	}(react_4);

	Trapezoid.displayName = 'Trapezoid';
	Trapezoid.propTypes = _objectSpread$E({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  x: propTypes.number,
	  y: propTypes.number,
	  upperWidth: propTypes.number,
	  lowerWidth: propTypes.number,
	  height: propTypes.number,
	  isUpdateAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])
	});
	Trapezoid.defaultProps = {
	  x: 0,
	  y: 0,
	  upperWidth: 0,
	  lowerWidth: 0,
	  height: 0,
	  isUpdateAnimationActive: false,
	  animationBegin: 0,
	  animationDuration: 1500,
	  animationEasing: 'ease'
	};

	function _typeof$G(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$G = function _typeof(obj) { return typeof obj; }; } else { _typeof$G = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$G(obj); }

	function _extends$A() { _extends$A = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$A.apply(this, arguments); }

	function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$C(source, true).forEach(function (key) { _defineProperty$J(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$C(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$J(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$E(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$E(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$E(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$E(Constructor.prototype, protoProps); if (staticProps) _defineProperties$E(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$D(self, call) { if (call && (_typeof$G(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$E(self); }

	function _assertThisInitialized$E(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$D(o) { _getPrototypeOf$D = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$D(o); }

	function _inherits$D(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$D(subClass, superClass); }

	function _setPrototypeOf$D(o, p) { _setPrototypeOf$D = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$D(o, p); }

	var Funnel =
	/*#__PURE__*/
	function (_PureComponent) {
	  _inherits$D(Funnel, _PureComponent);

	  function Funnel() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$E(this, Funnel);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$D(this, (_getPrototypeOf2 = _getPrototypeOf$D(Funnel)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      isAnimationFinished: false
	    };

	    _this.cachePrevData = function (trapezoids) {
	      _this.setState({
	        prevTrapezoids: trapezoids
	      });
	    };

	    _this.handleAnimationEnd = function () {
	      var onAnimationEnd = _this.props.onAnimationEnd;

	      _this.setState({
	        isAnimationFinished: true
	      });

	      if (isFunction_1(onAnimationEnd)) {
	        onAnimationEnd();
	      }
	    };

	    _this.handleAnimationStart = function () {
	      var onAnimationStart = _this.props.onAnimationStart;

	      _this.setState({
	        isAnimationFinished: false
	      });

	      if (isFunction_1(onAnimationStart)) {
	        onAnimationStart();
	      }
	    };

	    return _this;
	  }

	  _createClass$E(Funnel, [{
	    key: "componentWillReceiveProps",
	    // eslint-disable-next-line camelcase
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          animationId = _this$props.animationId,
	          trapezoids = _this$props.trapezoids;

	      if (nextProps.isAnimationActive !== this.props.isAnimationActive) {
	        this.cachePrevData([]);
	      } else if (nextProps.animationId !== animationId) {
	        this.cachePrevData(trapezoids);
	      }
	    }
	  }, {
	    key: "isActiveIndex",
	    value: function isActiveIndex(i) {
	      var activeIndex = this.props.activeIndex;

	      if (Array.isArray(activeIndex)) {
	        return activeIndex.indexOf(i) !== -1;
	      }

	      return i === activeIndex;
	    }
	  }, {
	    key: "renderTrapezoidsStatically",
	    value: function renderTrapezoidsStatically(trapezoids) {
	      var _this2 = this;

	      var activeShape = this.props.activeShape;
	      return trapezoids.map(function (entry, i) {
	        var trapezoidOptions = _this2.isActiveIndex(i) ? activeShape : null;

	        var trapezoidProps = _objectSpread$F({}, entry, {
	          stroke: entry.stroke
	        });

	        return react.createElement(Layer, _extends$A({
	          className: "recharts-funnel-trapezoid"
	        }, filterEventsOfChild(_this2.props, entry, i), {
	          key: "trapezoid-".concat(i) // eslint-disable-line react/no-array-index-key

	        }), _this2.constructor.renderTrapezoidItem(trapezoidOptions, trapezoidProps));
	      });
	    }
	  }, {
	    key: "renderTrapezoidsWithAnimation",
	    value: function renderTrapezoidsWithAnimation() {
	      var _this3 = this;

	      var _this$props2 = this.props,
	          trapezoids = _this$props2.trapezoids,
	          isAnimationActive = _this$props2.isAnimationActive,
	          animationBegin = _this$props2.animationBegin,
	          animationDuration = _this$props2.animationDuration,
	          animationEasing = _this$props2.animationEasing,
	          animationId = _this$props2.animationId;
	      var prevTrapezoids = this.state.prevTrapezoids;
	      return react.createElement(Animate, {
	        begin: animationBegin,
	        duration: animationDuration,
	        isActive: isAnimationActive,
	        easing: animationEasing,
	        from: {
	          t: 0
	        },
	        to: {
	          t: 1
	        },
	        key: "funnel-".concat(animationId),
	        onAnimationStart: this.handleAnimationStart,
	        onAnimationEnd: this.handleAnimationEnd
	      }, function (_ref) {
	        var t = _ref.t;
	        var stepData = trapezoids.map(function (entry, index) {
	          var prev = prevTrapezoids && prevTrapezoids[index];

	          if (prev) {
	            var _interpolatorX = interpolateNumber(prev.x, entry.x);

	            var _interpolatorY = interpolateNumber(prev.y, entry.y);

	            var _interpolatorUpperWidth = interpolateNumber(prev.upperWidth, entry.upperWidth);

	            var _interpolatorLowerWidth = interpolateNumber(prev.lowerWidth, entry.lowerWidth);

	            var _interpolatorHeight = interpolateNumber(prev.height, entry.height);

	            return _objectSpread$F({}, entry, {
	              x: _interpolatorX(t),
	              y: _interpolatorY(t),
	              upperWidth: _interpolatorUpperWidth(t),
	              lowerWidth: _interpolatorLowerWidth(t),
	              height: _interpolatorHeight(t)
	            });
	          }

	          var interpolatorX = interpolateNumber(entry.x + entry.upperWidth / 2, entry.x);
	          var interpolatorY = interpolateNumber(entry.y + entry.height / 2, entry.y);
	          var interpolatorUpperWidth = interpolateNumber(0, entry.upperWidth);
	          var interpolatorLowerWidth = interpolateNumber(0, entry.lowerWidth);
	          var interpolatorHeight = interpolateNumber(0, entry.height);
	          return _objectSpread$F({}, entry, {
	            x: interpolatorX(t),
	            y: interpolatorY(t),
	            upperWidth: interpolatorUpperWidth(t),
	            lowerWidth: interpolatorLowerWidth(t),
	            height: interpolatorHeight(t)
	          });
	        });
	        return react.createElement(Layer, null, _this3.renderTrapezoidsStatically(stepData));
	      });
	    }
	  }, {
	    key: "renderTrapezoids",
	    value: function renderTrapezoids() {
	      var _this$props3 = this.props,
	          trapezoids = _this$props3.trapezoids,
	          isAnimationActive = _this$props3.isAnimationActive;
	      var prevTrapezoids = this.state.prevTrapezoids;

	      if (isAnimationActive && trapezoids && trapezoids.length && (!prevTrapezoids || !isEqual_1(prevTrapezoids, trapezoids))) {
	        return this.renderTrapezoidsWithAnimation();
	      }

	      return this.renderTrapezoidsStatically(trapezoids);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          hide = _this$props4.hide,
	          trapezoids = _this$props4.trapezoids,
	          className = _this$props4.className,
	          isAnimationActive = _this$props4.isAnimationActive;
	      var isAnimationFinished = this.state.isAnimationFinished;

	      if (hide || !trapezoids || !trapezoids.length) {
	        return null;
	      }

	      var layerClass = classnames('recharts-trapezoids', className);
	      return react.createElement(Layer, {
	        className: layerClass
	      }, this.renderTrapezoids(), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, trapezoids));
	    }
	  }], [{
	    key: "renderTrapezoidItem",
	    value: function renderTrapezoidItem(option, props) {
	      if (react.isValidElement(option)) {
	        return react.cloneElement(option, props);
	      }

	      if (isFunction_1(option)) {
	        return option(props);
	      }

	      if (isPlainObject_1(option)) {
	        return react.createElement(Trapezoid, _extends$A({}, props, option));
	      }

	      return react.createElement(Trapezoid, props);
	    }
	  }]);

	  return Funnel;
	}(react_4);

	Funnel.displayName = 'Funnel';
	Funnel.propTypes = _objectSpread$F({}, PRESENTATION_ATTRIBUTES, {}, EVENT_ATTRIBUTES, {
	  className: propTypes.string,
	  animationId: propTypes.number,
	  dataKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]).isRequired,
	  nameKey: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.func]),
	  data: propTypes.arrayOf(propTypes.object),
	  trapezoids: propTypes.arrayOf(propTypes.object),
	  hide: propTypes.bool,
	  activeShape: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.element]),
	  legendType: propTypes.oneOf(LEGEND_TYPES),
	  tooltipType: propTypes.oneOf(TOOLTIP_TYPES),
	  activeIndex: propTypes.oneOfType([propTypes.number, propTypes.arrayOf(propTypes.number)]),
	  onAnimationStart: propTypes.func,
	  onAnimationEnd: propTypes.func,
	  isAnimationActive: propTypes.bool,
	  animationBegin: propTypes.number,
	  animationDuration: propTypes.number,
	  animationEasing: propTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'spring', 'linear'])
	});
	Funnel.defaultProps = {
	  stroke: '#fff',
	  fill: '#808080',
	  legendType: 'rect',
	  labelLine: true,
	  hide: false,
	  isAnimationActive: !isSsr(),
	  animationBegin: 400,
	  animationDuration: 1500,
	  animationEasing: 'ease',
	  nameKey: 'name'
	};

	Funnel.getRealFunnelData = function (item) {
	  var _item$props = item.props,
	      data = _item$props.data,
	      children = _item$props.children;
	  var presentationProps = getPresentationAttributes(item.props);
	  var cells = findAllByType(children, Cell);

	  if (data && data.length) {
	    return data.map(function (entry, index) {
	      return _objectSpread$F({
	        payload: entry
	      }, presentationProps, {}, entry, {}, cells && cells[index] && cells[index].props);
	    });
	  }

	  if (cells && cells.length) {
	    return cells.map(function (cell) {
	      return _objectSpread$F({}, presentationProps, {}, cell.props);
	    });
	  }

	  return [];
	};

	Funnel.getRealWidthHeight = function (item, offset) {
	  var customWidth = item.props.width;
	  var width = offset.width,
	      height = offset.height,
	      left = offset.left,
	      right = offset.right,
	      top = offset.top,
	      bottom = offset.bottom;
	  var realHeight = height;
	  var realWidth = width;

	  if (isNumber_1(customWidth)) {
	    realWidth = customWidth;
	  } else if (isString_1(customWidth)) {
	    realWidth = realWidth * parseFloat(customWidth) / 100;
	  }

	  return {
	    realWidth: realWidth - left - right - 50,
	    realHeight: realHeight - bottom - top,
	    offsetX: (width - realWidth) / 2,
	    offsetY: (height - realHeight) / 2
	  };
	};

	Funnel.getComposedData = function (_ref2) {
	  var item = _ref2.item,
	      offset = _ref2.offset,
	      onItemMouseLeave = _ref2.onItemMouseLeave,
	      onItemMouseEnter = _ref2.onItemMouseEnter;
	  var funnelData = Funnel.getRealFunnelData(item);
	  var _item$props2 = item.props,
	      dataKey = _item$props2.dataKey,
	      nameKey = _item$props2.nameKey,
	      tooltipType = _item$props2.tooltipType;
	  var left = offset.left,
	      top = offset.top;

	  var _Funnel$getRealWidthH = Funnel.getRealWidthHeight(item, offset),
	      realHeight = _Funnel$getRealWidthH.realHeight,
	      realWidth = _Funnel$getRealWidthH.realWidth,
	      offsetX = _Funnel$getRealWidthH.offsetX,
	      offsetY = _Funnel$getRealWidthH.offsetY;

	  var maxValue = getValueByDataKey(funnelData[0], dataKey, 0);
	  var len = funnelData.length;
	  var rowHeight = realHeight / len;
	  var trapezoids = funnelData.map(function (entry, i) {
	    var val = getValueByDataKey(entry, dataKey, 0);
	    var name = getValueByDataKey(entry, nameKey, i);
	    var nextVal = 0;

	    if (i !== len - 1) {
	      nextVal = getValueByDataKey(funnelData[i + 1], dataKey, 0);
	    }

	    var x = (maxValue - val) * realWidth / (2 * maxValue) + top + 25 + offsetX;
	    var y = realHeight / len * i + left + offsetY;
	    var upperWidth = val / maxValue * realWidth;
	    var lowerWidth = nextVal / maxValue * realWidth;
	    var tooltipPayload = [{
	      name: name,
	      value: val,
	      payload: entry,
	      dataKey: dataKey,
	      type: tooltipType
	    }];
	    var tooltipPosition = {
	      x: x + upperWidth / 2,
	      y: y + rowHeight / 2
	    };
	    return _objectSpread$F({
	      x: x,
	      y: y,
	      width: Math.max(upperWidth, lowerWidth),
	      upperWidth: upperWidth,
	      lowerWidth: lowerWidth,
	      height: rowHeight,
	      name: name,
	      val: val,
	      tooltipPayload: tooltipPayload,
	      tooltipPosition: tooltipPosition
	    }, omit_1(entry, 'width'), {
	      payload: entry
	    });
	  });
	  return {
	    trapezoids: trapezoids,
	    data: funnelData,
	    onMouseLeave: onItemMouseLeave,
	    onMouseEnter: onItemMouseEnter
	  };
	};

	/**
	 * @fileOverview Funnel Chart
	 */
	var FunnelChart = generateCategoricalChart({
	  chartName: 'FunnelChart',
	  GraphicalChild: Funnel,
	  eventType: 'item',
	  axisComponents: [],
	  defaultProps: {
	    layout: 'centric'
	  },
	  propTypes: {
	    layout: propTypes.oneOf(['centric'])
	  }
	});



	var Recharts = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Surface: Surface,
		Layer: Layer,
		Legend: Legend,
		Tooltip: Tooltip,
		ResponsiveContainer: ResponsiveContainer,
		Cell: Cell,
		Text: Text,
		Label: Label,
		LabelList: LabelList,
		Customized: Customized,
		Sector: Sector,
		Curve: Curve,
		Rectangle: Rectangle,
		Polygon: Polygon,
		Dot: Dot,
		Cross: Cross,
		Symbols: Symbols,
		PolarGrid: PolarGrid,
		PolarRadiusAxis: PolarRadiusAxis,
		PolarAngleAxis: PolarAngleAxis,
		Pie: Pie,
		Radar: Radar,
		RadialBar: RadialBar,
		Brush: Brush,
		ReferenceLine: ReferenceLine,
		ReferenceDot: ReferenceDot,
		ReferenceArea: ReferenceArea,
		CartesianAxis: CartesianAxis,
		CartesianGrid: CartesianGrid,
		Line: Line,
		Area: Area,
		Bar: Bar,
		Scatter: Scatter,
		XAxis: XAxis,
		YAxis: YAxis,
		ZAxis: ZAxis,
		ErrorBar: ErrorBar,
		LineChart: LineChart,
		BarChart: BarChart,
		PieChart: PieChart,
		Treemap: Treemap,
		Sankey: Sankey,
		RadarChart: RadarChart,
		ScatterChart: ScatterChart,
		AreaChart: AreaChart,
		RadialBarChart: RadialBarChart,
		ComposedChart: ComposedChart,
		Funnel: Funnel,
		FunnelChart: FunnelChart,
		Trapezoid: Trapezoid
	});

	/* eslint-disable import/first, import/no-extraneous-dependencies */


	window.global = {};

	window.React = react;
	window.ReactDOM = reactDom;
	window.ReactRedux = ReactRedux;
	window.ReactRouter = ReactRouter;
	window.ReactRouterDOM = ReactRouterDOM;
	window.Redux = Redux;
	window.PropTypes = propTypes;
	window.axios = axios$1;
	window.styled = styled$1;
	window.Recharts = Recharts;

	exports.React = react;
	exports.ReactDOM = reactDom;
	exports.ReactRedux = ReactRedux;

	return exports;

}({}));
